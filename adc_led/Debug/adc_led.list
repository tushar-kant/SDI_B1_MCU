
adc_led.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000420  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080005b8  080005b8  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080005b8  080005b8  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  080005b8  080005b8  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  080005b8  080005b8  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080005b8  080005b8  000105b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080005bc  080005bc  000105bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  080005c0  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000004  080005c4  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  080005c4  00020024  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000151b  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000052e  00000000  00000000  0002154f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001e0  00000000  00000000  00021a80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000198  00000000  00000000  00021c60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00013ebe  00000000  00000000  00021df8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001fc0  00000000  00000000  00035cb6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00080508  00000000  00000000  00037c76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000b817e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000005bc  00000000  00000000  000b81d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000004 	.word	0x20000004
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080005a0 	.word	0x080005a0

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000008 	.word	0x20000008
 80001d4:	080005a0 	.word	0x080005a0

080001d8 <main>:
void Usart_Init(void);
void USART1_write(char data);
void ADC_Init(void);

int main (void)
{
 80001d8:	b580      	push	{r7, lr}
 80001da:	b082      	sub	sp, #8
 80001dc:	af00      	add	r7, sp, #0
	int result;
	ADC_Init();
 80001de:	f000 f887 	bl	80002f0 <ADC_Init>
	Usart_Init();
 80001e2:	f000 f8bd 	bl	8000360 <Usart_Init>

	while (1)
	{
		ADC1->CR2 |= (1<<30); 		/* start a conversion */
 80001e6:	4b3d      	ldr	r3, [pc, #244]	; (80002dc <main+0x104>)
 80001e8:	689b      	ldr	r3, [r3, #8]
 80001ea:	4a3c      	ldr	r2, [pc, #240]	; (80002dc <main+0x104>)
 80001ec:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80001f0:	6093      	str	r3, [r2, #8]
		while(!(ADC1->SR & 2)) {} 		/* wait for conv complete */
 80001f2:	bf00      	nop
 80001f4:	4b39      	ldr	r3, [pc, #228]	; (80002dc <main+0x104>)
 80001f6:	681b      	ldr	r3, [r3, #0]
 80001f8:	f003 0302 	and.w	r3, r3, #2
 80001fc:	2b00      	cmp	r3, #0
 80001fe:	d0f9      	beq.n	80001f4 <main+0x1c>
		result = ADC1->DR; 				/* read conversion result */
 8000200:	4b36      	ldr	r3, [pc, #216]	; (80002dc <main+0x104>)
 8000202:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000204:	607b      	str	r3, [r7, #4]
		USART1_write((result/1000)+48);
 8000206:	687b      	ldr	r3, [r7, #4]
 8000208:	4a35      	ldr	r2, [pc, #212]	; (80002e0 <main+0x108>)
 800020a:	fb82 1203 	smull	r1, r2, r2, r3
 800020e:	1192      	asrs	r2, r2, #6
 8000210:	17db      	asrs	r3, r3, #31
 8000212:	1ad3      	subs	r3, r2, r3
 8000214:	b2db      	uxtb	r3, r3
 8000216:	3330      	adds	r3, #48	; 0x30
 8000218:	b2db      	uxtb	r3, r3
 800021a:	4618      	mov	r0, r3
 800021c:	f000 f8ec 	bl	80003f8 <USART1_write>
		USART1_write(((result/100)%10)+48);
 8000220:	687b      	ldr	r3, [r7, #4]
 8000222:	4a30      	ldr	r2, [pc, #192]	; (80002e4 <main+0x10c>)
 8000224:	fb82 1203 	smull	r1, r2, r2, r3
 8000228:	1152      	asrs	r2, r2, #5
 800022a:	17db      	asrs	r3, r3, #31
 800022c:	1ad2      	subs	r2, r2, r3
 800022e:	4b2e      	ldr	r3, [pc, #184]	; (80002e8 <main+0x110>)
 8000230:	fb83 1302 	smull	r1, r3, r3, r2
 8000234:	1099      	asrs	r1, r3, #2
 8000236:	17d3      	asrs	r3, r2, #31
 8000238:	1ac9      	subs	r1, r1, r3
 800023a:	460b      	mov	r3, r1
 800023c:	009b      	lsls	r3, r3, #2
 800023e:	440b      	add	r3, r1
 8000240:	005b      	lsls	r3, r3, #1
 8000242:	1ad1      	subs	r1, r2, r3
 8000244:	b2cb      	uxtb	r3, r1
 8000246:	3330      	adds	r3, #48	; 0x30
 8000248:	b2db      	uxtb	r3, r3
 800024a:	4618      	mov	r0, r3
 800024c:	f000 f8d4 	bl	80003f8 <USART1_write>
		USART1_write(((result/10)%10)+48);
 8000250:	687b      	ldr	r3, [r7, #4]
 8000252:	4a25      	ldr	r2, [pc, #148]	; (80002e8 <main+0x110>)
 8000254:	fb82 1203 	smull	r1, r2, r2, r3
 8000258:	1092      	asrs	r2, r2, #2
 800025a:	17db      	asrs	r3, r3, #31
 800025c:	1ad2      	subs	r2, r2, r3
 800025e:	4b22      	ldr	r3, [pc, #136]	; (80002e8 <main+0x110>)
 8000260:	fb83 1302 	smull	r1, r3, r3, r2
 8000264:	1099      	asrs	r1, r3, #2
 8000266:	17d3      	asrs	r3, r2, #31
 8000268:	1ac9      	subs	r1, r1, r3
 800026a:	460b      	mov	r3, r1
 800026c:	009b      	lsls	r3, r3, #2
 800026e:	440b      	add	r3, r1
 8000270:	005b      	lsls	r3, r3, #1
 8000272:	1ad1      	subs	r1, r2, r3
 8000274:	b2cb      	uxtb	r3, r1
 8000276:	3330      	adds	r3, #48	; 0x30
 8000278:	b2db      	uxtb	r3, r3
 800027a:	4618      	mov	r0, r3
 800027c:	f000 f8bc 	bl	80003f8 <USART1_write>
		USART1_write((result%10)+48);
 8000280:	687a      	ldr	r2, [r7, #4]
 8000282:	4b19      	ldr	r3, [pc, #100]	; (80002e8 <main+0x110>)
 8000284:	fb83 1302 	smull	r1, r3, r3, r2
 8000288:	1099      	asrs	r1, r3, #2
 800028a:	17d3      	asrs	r3, r2, #31
 800028c:	1ac9      	subs	r1, r1, r3
 800028e:	460b      	mov	r3, r1
 8000290:	009b      	lsls	r3, r3, #2
 8000292:	440b      	add	r3, r1
 8000294:	005b      	lsls	r3, r3, #1
 8000296:	1ad1      	subs	r1, r2, r3
 8000298:	b2cb      	uxtb	r3, r1
 800029a:	3330      	adds	r3, #48	; 0x30
 800029c:	b2db      	uxtb	r3, r3
 800029e:	4618      	mov	r0, r3
 80002a0:	f000 f8aa 	bl	80003f8 <USART1_write>
		USART1_write(0x60);
 80002a4:	2060      	movs	r0, #96	; 0x60
 80002a6:	f000 f8a7 	bl	80003f8 <USART1_write>
		USART1_write('D');
 80002aa:	2044      	movs	r0, #68	; 0x44
 80002ac:	f000 f8a4 	bl	80003f8 <USART1_write>
		delay(200);
 80002b0:	20c8      	movs	r0, #200	; 0xc8
 80002b2:	f000 f8b9 	bl	8000428 <delay>
		if (result & 0x1)
 80002b6:	687b      	ldr	r3, [r7, #4]
 80002b8:	f003 0301 	and.w	r3, r3, #1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d006      	beq.n	80002ce <main+0xf6>
			GPIOA->BSRR |= (1<<5); 		/* turn on LED */
 80002c0:	4b0a      	ldr	r3, [pc, #40]	; (80002ec <main+0x114>)
 80002c2:	699b      	ldr	r3, [r3, #24]
 80002c4:	4a09      	ldr	r2, [pc, #36]	; (80002ec <main+0x114>)
 80002c6:	f043 0320 	orr.w	r3, r3, #32
 80002ca:	6193      	str	r3, [r2, #24]
 80002cc:	e78b      	b.n	80001e6 <main+0xe>
		else
			GPIOA->BSRR |= (1<<21); 		/* turn off LED */
 80002ce:	4b07      	ldr	r3, [pc, #28]	; (80002ec <main+0x114>)
 80002d0:	699b      	ldr	r3, [r3, #24]
 80002d2:	4a06      	ldr	r2, [pc, #24]	; (80002ec <main+0x114>)
 80002d4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80002d8:	6193      	str	r3, [r2, #24]
		ADC1->CR2 |= (1<<30); 		/* start a conversion */
 80002da:	e784      	b.n	80001e6 <main+0xe>
 80002dc:	40012000 	.word	0x40012000
 80002e0:	10624dd3 	.word	0x10624dd3
 80002e4:	51eb851f 	.word	0x51eb851f
 80002e8:	66666667 	.word	0x66666667
 80002ec:	40020000 	.word	0x40020000

080002f0 <ADC_Init>:
	}
}

void ADC_Init(void)
{
 80002f0:	b480      	push	{r7}
 80002f2:	af00      	add	r7, sp, #0
	/* set up pin PA5 for LED */
		RCC->AHB1ENR |= 1; 					/* enable GPIOA clock */
 80002f4:	4b17      	ldr	r3, [pc, #92]	; (8000354 <ADC_Init+0x64>)
 80002f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002f8:	4a16      	ldr	r2, [pc, #88]	; (8000354 <ADC_Init+0x64>)
 80002fa:	f043 0301 	orr.w	r3, r3, #1
 80002fe:	6313      	str	r3, [r2, #48]	; 0x30
		GPIOA->MODER &= ~0xC00; 		/* clear pin mode */
 8000300:	4b15      	ldr	r3, [pc, #84]	; (8000358 <ADC_Init+0x68>)
 8000302:	681b      	ldr	r3, [r3, #0]
 8000304:	4a14      	ldr	r2, [pc, #80]	; (8000358 <ADC_Init+0x68>)
 8000306:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800030a:	6013      	str	r3, [r2, #0]
		GPIOA->MODER |= 0x400; 		/* set pin to output mode */
 800030c:	4b12      	ldr	r3, [pc, #72]	; (8000358 <ADC_Init+0x68>)
 800030e:	681b      	ldr	r3, [r3, #0]
 8000310:	4a11      	ldr	r2, [pc, #68]	; (8000358 <ADC_Init+0x68>)
 8000312:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000316:	6013      	str	r3, [r2, #0]

		/* set up pin PA1 for analog input */
		RCC->AHB1ENR |= 1; 					/* enable GPIOA clock */
 8000318:	4b0e      	ldr	r3, [pc, #56]	; (8000354 <ADC_Init+0x64>)
 800031a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800031c:	4a0d      	ldr	r2, [pc, #52]	; (8000354 <ADC_Init+0x64>)
 800031e:	f043 0301 	orr.w	r3, r3, #1
 8000322:	6313      	str	r3, [r2, #48]	; 0x30
		GPIOA->MODER |= 0xC; 				/* PA1 analog */
 8000324:	4b0c      	ldr	r3, [pc, #48]	; (8000358 <ADC_Init+0x68>)
 8000326:	681b      	ldr	r3, [r3, #0]
 8000328:	4a0b      	ldr	r2, [pc, #44]	; (8000358 <ADC_Init+0x68>)
 800032a:	f043 030c 	orr.w	r3, r3, #12
 800032e:	6013      	str	r3, [r2, #0]

		/* setup ADC1 */
		RCC->APB2ENR |= 0x100; 		/* enable ADC1 clock */
 8000330:	4b08      	ldr	r3, [pc, #32]	; (8000354 <ADC_Init+0x64>)
 8000332:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000334:	4a07      	ldr	r2, [pc, #28]	; (8000354 <ADC_Init+0x64>)
 8000336:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800033a:	6453      	str	r3, [r2, #68]	; 0x44
		ADC1->CR2 |= 3; 					/* enable ADC1 */
 800033c:	4b07      	ldr	r3, [pc, #28]	; (800035c <ADC_Init+0x6c>)
 800033e:	689b      	ldr	r3, [r3, #8]
 8000340:	4a06      	ldr	r2, [pc, #24]	; (800035c <ADC_Init+0x6c>)
 8000342:	f043 0303 	orr.w	r3, r3, #3
 8000346:	6093      	str	r3, [r2, #8]
}
 8000348:	bf00      	nop
 800034a:	46bd      	mov	sp, r7
 800034c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000350:	4770      	bx	lr
 8000352:	bf00      	nop
 8000354:	40023800 	.word	0x40023800
 8000358:	40020000 	.word	0x40020000
 800035c:	40012000 	.word	0x40012000

08000360 <Usart_Init>:

void Usart_Init(void)
{
 8000360:	b480      	push	{r7}
 8000362:	af00      	add	r7, sp, #0
	RCC->APB2ENR |= 0x10; 						//Enable APB2ENR
 8000364:	4b21      	ldr	r3, [pc, #132]	; (80003ec <Usart_Init+0x8c>)
 8000366:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000368:	4a20      	ldr	r2, [pc, #128]	; (80003ec <Usart_Init+0x8c>)
 800036a:	f043 0310 	orr.w	r3, r3, #16
 800036e:	6453      	str	r3, [r2, #68]	; 0x44
	RCC->AHB1ENR |= 0x1; 							//Enable GPIOA port
 8000370:	4b1e      	ldr	r3, [pc, #120]	; (80003ec <Usart_Init+0x8c>)
 8000372:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000374:	4a1d      	ldr	r2, [pc, #116]	; (80003ec <Usart_Init+0x8c>)
 8000376:	f043 0301 	orr.w	r3, r3, #1
 800037a:	6313      	str	r3, [r2, #48]	; 0x30
	RCC->AHB1ENR |=0X4;
 800037c:	4b1b      	ldr	r3, [pc, #108]	; (80003ec <Usart_Init+0x8c>)
 800037e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000380:	4a1a      	ldr	r2, [pc, #104]	; (80003ec <Usart_Init+0x8c>)
 8000382:	f043 0304 	orr.w	r3, r3, #4
 8000386:	6313      	str	r3, [r2, #48]	; 0x30
	GPIOA->MODER &=~0x3C0000;							//clear pa9 and pa10
 8000388:	4b19      	ldr	r3, [pc, #100]	; (80003f0 <Usart_Init+0x90>)
 800038a:	681b      	ldr	r3, [r3, #0]
 800038c:	4a18      	ldr	r2, [pc, #96]	; (80003f0 <Usart_Init+0x90>)
 800038e:	f423 1370 	bic.w	r3, r3, #3932160	; 0x3c0000
 8000392:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= 0x280000; 							//Alernate Function at PA9 AND PA10
 8000394:	4b16      	ldr	r3, [pc, #88]	; (80003f0 <Usart_Init+0x90>)
 8000396:	681b      	ldr	r3, [r3, #0]
 8000398:	4a15      	ldr	r2, [pc, #84]	; (80003f0 <Usart_Init+0x90>)
 800039a:	f443 1320 	orr.w	r3, r3, #2621440	; 0x280000
 800039e:	6013      	str	r3, [r2, #0]
	GPIOA->AFR[1] &=~0xFF0;						//clear pa9 and pa10
 80003a0:	4b13      	ldr	r3, [pc, #76]	; (80003f0 <Usart_Init+0x90>)
 80003a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80003a4:	4a12      	ldr	r2, [pc, #72]	; (80003f0 <Usart_Init+0x90>)
 80003a6:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80003aa:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOA->AFR[1] |=0x770; 						//Enable USART1 FOR pa9 and pa10
 80003ac:	4b10      	ldr	r3, [pc, #64]	; (80003f0 <Usart_Init+0x90>)
 80003ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80003b0:	4a0f      	ldr	r2, [pc, #60]	; (80003f0 <Usart_Init+0x90>)
 80003b2:	f443 63ee 	orr.w	r3, r3, #1904	; 0x770
 80003b6:	6253      	str	r3, [r2, #36]	; 0x24
	USART1->BRR |= 0x683; 							//9600 Baud Rate
 80003b8:	4b0e      	ldr	r3, [pc, #56]	; (80003f4 <Usart_Init+0x94>)
 80003ba:	689b      	ldr	r3, [r3, #8]
 80003bc:	4a0d      	ldr	r2, [pc, #52]	; (80003f4 <Usart_Init+0x94>)
 80003be:	f443 63d0 	orr.w	r3, r3, #1664	; 0x680
 80003c2:	f043 0303 	orr.w	r3, r3, #3
 80003c6:	6093      	str	r3, [r2, #8]
	//USART1->CR1 |= 0x4; 							//Rx Mode PA10
	USART1->CR1 |=0x8;								//Tx Mode PA9
 80003c8:	4b0a      	ldr	r3, [pc, #40]	; (80003f4 <Usart_Init+0x94>)
 80003ca:	68db      	ldr	r3, [r3, #12]
 80003cc:	4a09      	ldr	r2, [pc, #36]	; (80003f4 <Usart_Init+0x94>)
 80003ce:	f043 0308 	orr.w	r3, r3, #8
 80003d2:	60d3      	str	r3, [r2, #12]
	USART1->CR1 |= 0x2000; 							//USART1 Enable
 80003d4:	4b07      	ldr	r3, [pc, #28]	; (80003f4 <Usart_Init+0x94>)
 80003d6:	68db      	ldr	r3, [r3, #12]
 80003d8:	4a06      	ldr	r2, [pc, #24]	; (80003f4 <Usart_Init+0x94>)
 80003da:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80003de:	60d3      	str	r3, [r2, #12]
}
 80003e0:	bf00      	nop
 80003e2:	46bd      	mov	sp, r7
 80003e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003e8:	4770      	bx	lr
 80003ea:	bf00      	nop
 80003ec:	40023800 	.word	0x40023800
 80003f0:	40020000 	.word	0x40020000
 80003f4:	40011000 	.word	0x40011000

080003f8 <USART1_write>:

void USART1_write(char data)
{
 80003f8:	b480      	push	{r7}
 80003fa:	b083      	sub	sp, #12
 80003fc:	af00      	add	r7, sp, #0
 80003fe:	4603      	mov	r3, r0
 8000400:	71fb      	strb	r3, [r7, #7]
	while(!(USART1->SR & 0x80))	{}				//if 0 enters loops if 1 exits											//This loop is for Tx buffer
 8000402:	bf00      	nop
 8000404:	4b07      	ldr	r3, [pc, #28]	; (8000424 <USART1_write+0x2c>)
 8000406:	681b      	ldr	r3, [r3, #0]
 8000408:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800040c:	2b00      	cmp	r3, #0
 800040e:	d0f9      	beq.n	8000404 <USART1_write+0xc>
	USART1->DR = (data & 0xFF);						//Sending data to data register
 8000410:	4a04      	ldr	r2, [pc, #16]	; (8000424 <USART1_write+0x2c>)
 8000412:	79fb      	ldrb	r3, [r7, #7]
 8000414:	6053      	str	r3, [r2, #4]
}
 8000416:	bf00      	nop
 8000418:	370c      	adds	r7, #12
 800041a:	46bd      	mov	sp, r7
 800041c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000420:	4770      	bx	lr
 8000422:	bf00      	nop
 8000424:	40011000 	.word	0x40011000

08000428 <delay>:
void delay(int sec)
{
 8000428:	b480      	push	{r7}
 800042a:	b085      	sub	sp, #20
 800042c:	af00      	add	r7, sp, #0
 800042e:	6078      	str	r0, [r7, #4]
	for(;sec>0;sec--)
 8000430:	e00d      	b.n	800044e <delay+0x26>
	{
		for(int count1=0;count1<3000;count1++);
 8000432:	2300      	movs	r3, #0
 8000434:	60fb      	str	r3, [r7, #12]
 8000436:	e002      	b.n	800043e <delay+0x16>
 8000438:	68fb      	ldr	r3, [r7, #12]
 800043a:	3301      	adds	r3, #1
 800043c:	60fb      	str	r3, [r7, #12]
 800043e:	68fb      	ldr	r3, [r7, #12]
 8000440:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8000444:	4293      	cmp	r3, r2
 8000446:	ddf7      	ble.n	8000438 <delay+0x10>
	for(;sec>0;sec--)
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	3b01      	subs	r3, #1
 800044c:	607b      	str	r3, [r7, #4]
 800044e:	687b      	ldr	r3, [r7, #4]
 8000450:	2b00      	cmp	r3, #0
 8000452:	dcee      	bgt.n	8000432 <delay+0xa>
	}
}
 8000454:	bf00      	nop
 8000456:	bf00      	nop
 8000458:	3714      	adds	r7, #20
 800045a:	46bd      	mov	sp, r7
 800045c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000460:	4770      	bx	lr

08000462 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000462:	b480      	push	{r7}
 8000464:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000466:	e7fe      	b.n	8000466 <NMI_Handler+0x4>

08000468 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000468:	b480      	push	{r7}
 800046a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800046c:	e7fe      	b.n	800046c <HardFault_Handler+0x4>

0800046e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800046e:	b480      	push	{r7}
 8000470:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000472:	e7fe      	b.n	8000472 <MemManage_Handler+0x4>

08000474 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000474:	b480      	push	{r7}
 8000476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000478:	e7fe      	b.n	8000478 <BusFault_Handler+0x4>

0800047a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800047a:	b480      	push	{r7}
 800047c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800047e:	e7fe      	b.n	800047e <UsageFault_Handler+0x4>

08000480 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000480:	b480      	push	{r7}
 8000482:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000484:	bf00      	nop
 8000486:	46bd      	mov	sp, r7
 8000488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800048c:	4770      	bx	lr

0800048e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800048e:	b480      	push	{r7}
 8000490:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000492:	bf00      	nop
 8000494:	46bd      	mov	sp, r7
 8000496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800049a:	4770      	bx	lr

0800049c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800049c:	b480      	push	{r7}
 800049e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80004a0:	bf00      	nop
 80004a2:	46bd      	mov	sp, r7
 80004a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a8:	4770      	bx	lr

080004aa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80004aa:	b580      	push	{r7, lr}
 80004ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80004ae:	f000 f83f 	bl	8000530 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80004b2:	bf00      	nop
 80004b4:	bd80      	pop	{r7, pc}
	...

080004b8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80004b8:	b480      	push	{r7}
 80004ba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80004bc:	4b06      	ldr	r3, [pc, #24]	; (80004d8 <SystemInit+0x20>)
 80004be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80004c2:	4a05      	ldr	r2, [pc, #20]	; (80004d8 <SystemInit+0x20>)
 80004c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80004c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80004cc:	bf00      	nop
 80004ce:	46bd      	mov	sp, r7
 80004d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop
 80004d8:	e000ed00 	.word	0xe000ed00

080004dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80004dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000514 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80004e0:	480d      	ldr	r0, [pc, #52]	; (8000518 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80004e2:	490e      	ldr	r1, [pc, #56]	; (800051c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80004e4:	4a0e      	ldr	r2, [pc, #56]	; (8000520 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80004e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80004e8:	e002      	b.n	80004f0 <LoopCopyDataInit>

080004ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004ee:	3304      	adds	r3, #4

080004f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80004f4:	d3f9      	bcc.n	80004ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80004f6:	4a0b      	ldr	r2, [pc, #44]	; (8000524 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80004f8:	4c0b      	ldr	r4, [pc, #44]	; (8000528 <LoopFillZerobss+0x26>)
  movs r3, #0
 80004fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80004fc:	e001      	b.n	8000502 <LoopFillZerobss>

080004fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80004fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000500:	3204      	adds	r2, #4

08000502 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000502:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000504:	d3fb      	bcc.n	80004fe <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000506:	f7ff ffd7 	bl	80004b8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800050a:	f000 f825 	bl	8000558 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800050e:	f7ff fe63 	bl	80001d8 <main>
  bx  lr    
 8000512:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000514:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000518:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800051c:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000520:	080005c0 	.word	0x080005c0
  ldr r2, =_sbss
 8000524:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000528:	20000024 	.word	0x20000024

0800052c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800052c:	e7fe      	b.n	800052c <ADC_IRQHandler>
	...

08000530 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000530:	b480      	push	{r7}
 8000532:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000534:	4b06      	ldr	r3, [pc, #24]	; (8000550 <HAL_IncTick+0x20>)
 8000536:	781b      	ldrb	r3, [r3, #0]
 8000538:	461a      	mov	r2, r3
 800053a:	4b06      	ldr	r3, [pc, #24]	; (8000554 <HAL_IncTick+0x24>)
 800053c:	681b      	ldr	r3, [r3, #0]
 800053e:	4413      	add	r3, r2
 8000540:	4a04      	ldr	r2, [pc, #16]	; (8000554 <HAL_IncTick+0x24>)
 8000542:	6013      	str	r3, [r2, #0]
}
 8000544:	bf00      	nop
 8000546:	46bd      	mov	sp, r7
 8000548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054c:	4770      	bx	lr
 800054e:	bf00      	nop
 8000550:	20000000 	.word	0x20000000
 8000554:	20000020 	.word	0x20000020

08000558 <__libc_init_array>:
 8000558:	b570      	push	{r4, r5, r6, lr}
 800055a:	4d0d      	ldr	r5, [pc, #52]	; (8000590 <__libc_init_array+0x38>)
 800055c:	4c0d      	ldr	r4, [pc, #52]	; (8000594 <__libc_init_array+0x3c>)
 800055e:	1b64      	subs	r4, r4, r5
 8000560:	10a4      	asrs	r4, r4, #2
 8000562:	2600      	movs	r6, #0
 8000564:	42a6      	cmp	r6, r4
 8000566:	d109      	bne.n	800057c <__libc_init_array+0x24>
 8000568:	4d0b      	ldr	r5, [pc, #44]	; (8000598 <__libc_init_array+0x40>)
 800056a:	4c0c      	ldr	r4, [pc, #48]	; (800059c <__libc_init_array+0x44>)
 800056c:	f000 f818 	bl	80005a0 <_init>
 8000570:	1b64      	subs	r4, r4, r5
 8000572:	10a4      	asrs	r4, r4, #2
 8000574:	2600      	movs	r6, #0
 8000576:	42a6      	cmp	r6, r4
 8000578:	d105      	bne.n	8000586 <__libc_init_array+0x2e>
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000580:	4798      	blx	r3
 8000582:	3601      	adds	r6, #1
 8000584:	e7ee      	b.n	8000564 <__libc_init_array+0xc>
 8000586:	f855 3b04 	ldr.w	r3, [r5], #4
 800058a:	4798      	blx	r3
 800058c:	3601      	adds	r6, #1
 800058e:	e7f2      	b.n	8000576 <__libc_init_array+0x1e>
 8000590:	080005b8 	.word	0x080005b8
 8000594:	080005b8 	.word	0x080005b8
 8000598:	080005b8 	.word	0x080005b8
 800059c:	080005bc 	.word	0x080005bc

080005a0 <_init>:
 80005a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005a2:	bf00      	nop
 80005a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80005a6:	bc08      	pop	{r3}
 80005a8:	469e      	mov	lr, r3
 80005aa:	4770      	bx	lr

080005ac <_fini>:
 80005ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005ae:	bf00      	nop
 80005b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80005b2:	bc08      	pop	{r3}
 80005b4:	469e      	mov	lr, r3
 80005b6:	4770      	bx	lr
