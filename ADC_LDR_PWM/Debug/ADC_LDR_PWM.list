
ADC_LDR_PWM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000294  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800042c  08000434  00010434  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800042c  0800042c  00010434  2**0
                  CONTENTS
  4 .ARM          00000000  0800042c  0800042c  00010434  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800042c  08000434  00010434  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800042c  0800042c  0001042c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000430  08000430  00010430  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010434  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000434  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000434  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010434  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000b9c  00000000  00000000  00010464  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000026b  00000000  00000000  00011000  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000088  00000000  00000000  00011270  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000060  00000000  00000000  000112f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000151b5  00000000  00000000  00011358  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000f92  00000000  00000000  0002650d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000903be  00000000  00000000  0002749f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000b785d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000011c  00000000  00000000  000b78b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000000 	.word	0x20000000
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08000414 	.word	0x08000414

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000004 	.word	0x20000004
 80001d4:	08000414 	.word	0x08000414

080001d8 <main>:
#include "stm32f4xx.h"
void ADC_Init(void);
void PWM_Init(void);
void delay(int sec);
int main (void)
{
 80001d8:	b580      	push	{r7, lr}
 80001da:	b082      	sub	sp, #8
 80001dc:	af00      	add	r7, sp, #0
uint16_t AD_RES = 0;
 80001de:	2300      	movs	r3, #0
 80001e0:	80fb      	strh	r3, [r7, #6]
ADC_Init();
 80001e2:	f000 f81d 	bl	8000220 <ADC_Init>
PWM_Init();
 80001e6:	f000 f853 	bl	8000290 <PWM_Init>
while (1)
{
ADC1->CR2 |= (1<<30); /* start a conversion */
 80001ea:	4b0c      	ldr	r3, [pc, #48]	; (800021c <main+0x44>)
 80001ec:	689b      	ldr	r3, [r3, #8]
 80001ee:	4a0b      	ldr	r2, [pc, #44]	; (800021c <main+0x44>)
 80001f0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80001f4:	6093      	str	r3, [r2, #8]
while(!(ADC1->SR & 2)) {} /* wait for conv complete */
 80001f6:	bf00      	nop
 80001f8:	4b08      	ldr	r3, [pc, #32]	; (800021c <main+0x44>)
 80001fa:	681b      	ldr	r3, [r3, #0]
 80001fc:	f003 0302 	and.w	r3, r3, #2
 8000200:	2b00      	cmp	r3, #0
 8000202:	d0f9      	beq.n	80001f8 <main+0x20>
// Read The ADC Conversion Result & Map It To PWM DutyCycle
AD_RES = ADC1->DR; /* read conversion result */
 8000204:	4b05      	ldr	r3, [pc, #20]	; (800021c <main+0x44>)
 8000206:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000208:	80fb      	strh	r3, [r7, #6]
TIM2->CCR1 = (AD_RES<<4);
 800020a:	88fb      	ldrh	r3, [r7, #6]
 800020c:	011a      	lsls	r2, r3, #4
 800020e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000212:	635a      	str	r2, [r3, #52]	; 0x34
delay(20);
 8000214:	2014      	movs	r0, #20
 8000216:	f000 f87f 	bl	8000318 <delay>
ADC1->CR2 |= (1<<30); /* start a conversion */
 800021a:	e7e6      	b.n	80001ea <main+0x12>
 800021c:	40012000 	.word	0x40012000

08000220 <ADC_Init>:
}
}
void ADC_Init(void)
{
 8000220:	b480      	push	{r7}
 8000222:	af00      	add	r7, sp, #0
/* set up pin PA1 for analog input */
RCC->AHB1ENR |= 1; /* enable GPIOA clock */
 8000224:	4b17      	ldr	r3, [pc, #92]	; (8000284 <ADC_Init+0x64>)
 8000226:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000228:	4a16      	ldr	r2, [pc, #88]	; (8000284 <ADC_Init+0x64>)
 800022a:	f043 0301 	orr.w	r3, r3, #1
 800022e:	6313      	str	r3, [r2, #48]	; 0x30
GPIOA->MODER |= 0xC; /* PA1 analog */
 8000230:	4b15      	ldr	r3, [pc, #84]	; (8000288 <ADC_Init+0x68>)
 8000232:	681b      	ldr	r3, [r3, #0]
 8000234:	4a14      	ldr	r2, [pc, #80]	; (8000288 <ADC_Init+0x68>)
 8000236:	f043 030c 	orr.w	r3, r3, #12
 800023a:	6013      	str	r3, [r2, #0]
/* setup ADC1 */
RCC->APB2ENR |= 0x100; /* enable ADC1 clock */
 800023c:	4b11      	ldr	r3, [pc, #68]	; (8000284 <ADC_Init+0x64>)
 800023e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000240:	4a10      	ldr	r2, [pc, #64]	; (8000284 <ADC_Init+0x64>)
 8000242:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000246:	6453      	str	r3, [r2, #68]	; 0x44
ADC1->CR1 |=10;
 8000248:	4b10      	ldr	r3, [pc, #64]	; (800028c <ADC_Init+0x6c>)
 800024a:	685b      	ldr	r3, [r3, #4]
 800024c:	4a0f      	ldr	r2, [pc, #60]	; (800028c <ADC_Init+0x6c>)
 800024e:	f043 030a 	orr.w	r3, r3, #10
 8000252:	6053      	str	r3, [r2, #4]
ADC1->SMPR2 |=(1<<3);
 8000254:	4b0d      	ldr	r3, [pc, #52]	; (800028c <ADC_Init+0x6c>)
 8000256:	691b      	ldr	r3, [r3, #16]
 8000258:	4a0c      	ldr	r2, [pc, #48]	; (800028c <ADC_Init+0x6c>)
 800025a:	f043 0308 	orr.w	r3, r3, #8
 800025e:	6113      	str	r3, [r2, #16]
ADC1->CR2 = 0; /* SW trigger */
 8000260:	4b0a      	ldr	r3, [pc, #40]	; (800028c <ADC_Init+0x6c>)
 8000262:	2200      	movs	r2, #0
 8000264:	609a      	str	r2, [r3, #8]
ADC1->SQR3 = 1; /* single conversion ch 1 */
 8000266:	4b09      	ldr	r3, [pc, #36]	; (800028c <ADC_Init+0x6c>)
 8000268:	2201      	movs	r2, #1
 800026a:	635a      	str	r2, [r3, #52]	; 0x34
ADC1->CR2 |= 1; /* enable ADC1 */
 800026c:	4b07      	ldr	r3, [pc, #28]	; (800028c <ADC_Init+0x6c>)
 800026e:	689b      	ldr	r3, [r3, #8]
 8000270:	4a06      	ldr	r2, [pc, #24]	; (800028c <ADC_Init+0x6c>)
 8000272:	f043 0301 	orr.w	r3, r3, #1
 8000276:	6093      	str	r3, [r2, #8]
}
 8000278:	bf00      	nop
 800027a:	46bd      	mov	sp, r7
 800027c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000280:	4770      	bx	lr
 8000282:	bf00      	nop
 8000284:	40023800 	.word	0x40023800
 8000288:	40020000 	.word	0x40020000
 800028c:	40012000 	.word	0x40012000

08000290 <PWM_Init>:
void PWM_Init(void)
{
 8000290:	b480      	push	{r7}
 8000292:	af00      	add	r7, sp, #0
// configure PA5 as output of TIM2 CH1
RCC->AHB1ENR |= 1; /* enable GPIOA clock */
 8000294:	4b1e      	ldr	r3, [pc, #120]	; (8000310 <PWM_Init+0x80>)
 8000296:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000298:	4a1d      	ldr	r2, [pc, #116]	; (8000310 <PWM_Init+0x80>)
 800029a:	f043 0301 	orr.w	r3, r3, #1
 800029e:	6313      	str	r3, [r2, #48]	; 0x30
GPIOA->MODER &=~(3<<10); /* clear pin mode */
 80002a0:	4b1c      	ldr	r3, [pc, #112]	; (8000314 <PWM_Init+0x84>)
 80002a2:	681b      	ldr	r3, [r3, #0]
 80002a4:	4a1b      	ldr	r2, [pc, #108]	; (8000314 <PWM_Init+0x84>)
 80002a6:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80002aa:	6013      	str	r3, [r2, #0]
GPIOA->MODER |= (1<<11); /* set pin to alternate function */
 80002ac:	4b19      	ldr	r3, [pc, #100]	; (8000314 <PWM_Init+0x84>)
 80002ae:	681b      	ldr	r3, [r3, #0]
 80002b0:	4a18      	ldr	r2, [pc, #96]	; (8000314 <PWM_Init+0x84>)
 80002b2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80002b6:	6013      	str	r3, [r2, #0]
GPIOA->AFR[0] &= ~(0xF<<20); /* clear pin AF bits */
 80002b8:	4b16      	ldr	r3, [pc, #88]	; (8000314 <PWM_Init+0x84>)
 80002ba:	6a1b      	ldr	r3, [r3, #32]
 80002bc:	4a15      	ldr	r2, [pc, #84]	; (8000314 <PWM_Init+0x84>)
 80002be:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80002c2:	6213      	str	r3, [r2, #32]
GPIOA->AFR[0]|= 1<<20; /* set pin to AF1 for TIM2 CH1 */
 80002c4:	4b13      	ldr	r3, [pc, #76]	; (8000314 <PWM_Init+0x84>)
 80002c6:	6a1b      	ldr	r3, [r3, #32]
 80002c8:	4a12      	ldr	r2, [pc, #72]	; (8000314 <PWM_Init+0x84>)
 80002ca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002ce:	6213      	str	r3, [r2, #32]
/* setup TIM2 */
RCC->APB1ENR |= 1; /* enable TIM2 clock */
 80002d0:	4b0f      	ldr	r3, [pc, #60]	; (8000310 <PWM_Init+0x80>)
 80002d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80002d4:	4a0e      	ldr	r2, [pc, #56]	; (8000310 <PWM_Init+0x80>)
 80002d6:	f043 0301 	orr.w	r3, r3, #1
 80002da:	6413      	str	r3, [r2, #64]	; 0x40
TIM2->PSC = 0;
 80002dc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80002e0:	2200      	movs	r2, #0
 80002e2:	629a      	str	r2, [r3, #40]	; 0x28
TIM2->ARR = 65536 - 1;
 80002e4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80002e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80002ec:	62da      	str	r2, [r3, #44]	; 0x2c
TIM2->CCMR1 = 0x0068; /* PWM mode */
 80002ee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80002f2:	2268      	movs	r2, #104	; 0x68
 80002f4:	619a      	str	r2, [r3, #24]
TIM2->CCER = 1; /* enable PWMCh1N */
 80002f6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80002fa:	2201      	movs	r2, #1
 80002fc:	621a      	str	r2, [r3, #32]
TIM2->CR1 = 1; /* enable timer */
 80002fe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000302:	2201      	movs	r2, #1
 8000304:	601a      	str	r2, [r3, #0]
}
 8000306:	bf00      	nop
 8000308:	46bd      	mov	sp, r7
 800030a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800030e:	4770      	bx	lr
 8000310:	40023800 	.word	0x40023800
 8000314:	40020000 	.word	0x40020000

08000318 <delay>:
void delay(int sec)
{
 8000318:	b480      	push	{r7}
 800031a:	b085      	sub	sp, #20
 800031c:	af00      	add	r7, sp, #0
 800031e:	6078      	str	r0, [r7, #4]
for(;sec>0;sec--)
 8000320:	e00d      	b.n	800033e <delay+0x26>
{
for(int count1=0;count1<3195;count1++);
 8000322:	2300      	movs	r3, #0
 8000324:	60fb      	str	r3, [r7, #12]
 8000326:	e002      	b.n	800032e <delay+0x16>
 8000328:	68fb      	ldr	r3, [r7, #12]
 800032a:	3301      	adds	r3, #1
 800032c:	60fb      	str	r3, [r7, #12]
 800032e:	68fb      	ldr	r3, [r7, #12]
 8000330:	f640 427a 	movw	r2, #3194	; 0xc7a
 8000334:	4293      	cmp	r3, r2
 8000336:	ddf7      	ble.n	8000328 <delay+0x10>
for(;sec>0;sec--)
 8000338:	687b      	ldr	r3, [r7, #4]
 800033a:	3b01      	subs	r3, #1
 800033c:	607b      	str	r3, [r7, #4]
 800033e:	687b      	ldr	r3, [r7, #4]
 8000340:	2b00      	cmp	r3, #0
 8000342:	dcee      	bgt.n	8000322 <delay+0xa>
}
}
 8000344:	bf00      	nop
 8000346:	bf00      	nop
 8000348:	3714      	adds	r7, #20
 800034a:	46bd      	mov	sp, r7
 800034c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000350:	4770      	bx	lr
	...

08000354 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000354:	b480      	push	{r7}
 8000356:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000358:	4b06      	ldr	r3, [pc, #24]	; (8000374 <SystemInit+0x20>)
 800035a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800035e:	4a05      	ldr	r2, [pc, #20]	; (8000374 <SystemInit+0x20>)
 8000360:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000364:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000368:	bf00      	nop
 800036a:	46bd      	mov	sp, r7
 800036c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000370:	4770      	bx	lr
 8000372:	bf00      	nop
 8000374:	e000ed00 	.word	0xe000ed00

08000378 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000378:	f8df d034 	ldr.w	sp, [pc, #52]	; 80003b0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800037c:	480d      	ldr	r0, [pc, #52]	; (80003b4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800037e:	490e      	ldr	r1, [pc, #56]	; (80003b8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000380:	4a0e      	ldr	r2, [pc, #56]	; (80003bc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000382:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000384:	e002      	b.n	800038c <LoopCopyDataInit>

08000386 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000386:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000388:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800038a:	3304      	adds	r3, #4

0800038c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800038c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800038e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000390:	d3f9      	bcc.n	8000386 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000392:	4a0b      	ldr	r2, [pc, #44]	; (80003c0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000394:	4c0b      	ldr	r4, [pc, #44]	; (80003c4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000396:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000398:	e001      	b.n	800039e <LoopFillZerobss>

0800039a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800039a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800039c:	3204      	adds	r2, #4

0800039e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800039e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003a0:	d3fb      	bcc.n	800039a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80003a2:	f7ff ffd7 	bl	8000354 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80003a6:	f000 f811 	bl	80003cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80003aa:	f7ff ff15 	bl	80001d8 <main>
  bx  lr    
 80003ae:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80003b0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80003b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003b8:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80003bc:	08000434 	.word	0x08000434
  ldr r2, =_sbss
 80003c0:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80003c4:	2000001c 	.word	0x2000001c

080003c8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80003c8:	e7fe      	b.n	80003c8 <ADC_IRQHandler>
	...

080003cc <__libc_init_array>:
 80003cc:	b570      	push	{r4, r5, r6, lr}
 80003ce:	4d0d      	ldr	r5, [pc, #52]	; (8000404 <__libc_init_array+0x38>)
 80003d0:	4c0d      	ldr	r4, [pc, #52]	; (8000408 <__libc_init_array+0x3c>)
 80003d2:	1b64      	subs	r4, r4, r5
 80003d4:	10a4      	asrs	r4, r4, #2
 80003d6:	2600      	movs	r6, #0
 80003d8:	42a6      	cmp	r6, r4
 80003da:	d109      	bne.n	80003f0 <__libc_init_array+0x24>
 80003dc:	4d0b      	ldr	r5, [pc, #44]	; (800040c <__libc_init_array+0x40>)
 80003de:	4c0c      	ldr	r4, [pc, #48]	; (8000410 <__libc_init_array+0x44>)
 80003e0:	f000 f818 	bl	8000414 <_init>
 80003e4:	1b64      	subs	r4, r4, r5
 80003e6:	10a4      	asrs	r4, r4, #2
 80003e8:	2600      	movs	r6, #0
 80003ea:	42a6      	cmp	r6, r4
 80003ec:	d105      	bne.n	80003fa <__libc_init_array+0x2e>
 80003ee:	bd70      	pop	{r4, r5, r6, pc}
 80003f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80003f4:	4798      	blx	r3
 80003f6:	3601      	adds	r6, #1
 80003f8:	e7ee      	b.n	80003d8 <__libc_init_array+0xc>
 80003fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80003fe:	4798      	blx	r3
 8000400:	3601      	adds	r6, #1
 8000402:	e7f2      	b.n	80003ea <__libc_init_array+0x1e>
 8000404:	0800042c 	.word	0x0800042c
 8000408:	0800042c 	.word	0x0800042c
 800040c:	0800042c 	.word	0x0800042c
 8000410:	08000430 	.word	0x08000430

08000414 <_init>:
 8000414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000416:	bf00      	nop
 8000418:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800041a:	bc08      	pop	{r3}
 800041c:	469e      	mov	lr, r3
 800041e:	4770      	bx	lr

08000420 <_fini>:
 8000420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000422:	bf00      	nop
 8000424:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000426:	bc08      	pop	{r3}
 8000428:	469e      	mov	lr, r3
 800042a:	4770      	bx	lr
