
tim1_oc_r.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000001a8  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000340  08000348  00010348  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000340  08000340  00010348  2**0
                  CONTENTS
  4 .ARM          00000000  08000340  08000340  00010348  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000340  08000348  00010348  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000340  08000340  00010340  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000344  08000344  00010344  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010348  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000348  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000348  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010348  2**0
                  CONTENTS, READONLY
 12 .debug_info   000009f9  00000000  00000000  00010378  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000001d9  00000000  00000000  00010d71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000070  00000000  00000000  00010f50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000048  00000000  00000000  00010fc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001417d  00000000  00000000  00011008  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000e6f  00000000  00000000  00025185  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00084af7  00000000  00000000  00025ff4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000aaaeb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000000ac  00000000  00000000  000aab3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000000 	.word	0x20000000
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08000328 	.word	0x08000328

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000004 	.word	0x20000004
 80001d4:	08000328 	.word	0x08000328

080001d8 <main>:
#include "stm32f4xx.h"
int main(void)
{
 80001d8:	b480      	push	{r7}
 80001da:	af00      	add	r7, sp, #0
	RCC->AHB1ENR |=1;
 80001dc:	4b20      	ldr	r3, [pc, #128]	; (8000260 <main+0x88>)
 80001de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80001e0:	4a1f      	ldr	r2, [pc, #124]	; (8000260 <main+0x88>)
 80001e2:	f043 0301 	orr.w	r3, r3, #1
 80001e6:	6313      	str	r3, [r2, #48]	; 0x30
	GPIOA->MODER &=~0xC00;
 80001e8:	4b1e      	ldr	r3, [pc, #120]	; (8000264 <main+0x8c>)
 80001ea:	681b      	ldr	r3, [r3, #0]
 80001ec:	4a1d      	ldr	r2, [pc, #116]	; (8000264 <main+0x8c>)
 80001ee:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80001f2:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= 0x400;
 80001f4:	4b1b      	ldr	r3, [pc, #108]	; (8000264 <main+0x8c>)
 80001f6:	681b      	ldr	r3, [r3, #0]
 80001f8:	4a1a      	ldr	r2, [pc, #104]	; (8000264 <main+0x8c>)
 80001fa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80001fe:	6013      	str	r3, [r2, #0]
	RCC->APB1ENR |= 1;
 8000200:	4b17      	ldr	r3, [pc, #92]	; (8000260 <main+0x88>)
 8000202:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000204:	4a16      	ldr	r2, [pc, #88]	; (8000260 <main+0x88>)
 8000206:	f043 0301 	orr.w	r3, r3, #1
 800020a:	6413      	str	r3, [r2, #64]	; 0x40
	TIM2->PSC =1600-1;
 800020c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000210:	f240 623f 	movw	r2, #1599	; 0x63f
 8000214:	629a      	str	r2, [r3, #40]	; 0x28
	TIM2->ARR = 10000 - 1;
 8000216:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800021a:	f242 720f 	movw	r2, #9999	; 0x270f
 800021e:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM2->CNT = 0;
 8000220:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000224:	2200      	movs	r2, #0
 8000226:	625a      	str	r2, [r3, #36]	; 0x24
	TIM2->CR1 = 0x11;
 8000228:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800022c:	2211      	movs	r2, #17
 800022e:	601a      	str	r2, [r3, #0]
	while (1)
	{
		while(!(TIM2->SR & 1)) {}
 8000230:	bf00      	nop
 8000232:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000236:	691b      	ldr	r3, [r3, #16]
 8000238:	f003 0301 	and.w	r3, r3, #1
 800023c:	2b00      	cmp	r3, #0
 800023e:	d0f8      	beq.n	8000232 <main+0x5a>
		TIM2->SR &= ~1;
 8000240:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000244:	691b      	ldr	r3, [r3, #16]
 8000246:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800024a:	f023 0301 	bic.w	r3, r3, #1
 800024e:	6113      	str	r3, [r2, #16]
		GPIOA ->ODR ^= 0x00000020;
 8000250:	4b04      	ldr	r3, [pc, #16]	; (8000264 <main+0x8c>)
 8000252:	695b      	ldr	r3, [r3, #20]
 8000254:	4a03      	ldr	r2, [pc, #12]	; (8000264 <main+0x8c>)
 8000256:	f083 0320 	eor.w	r3, r3, #32
 800025a:	6153      	str	r3, [r2, #20]
		while(!(TIM2->SR & 1)) {}
 800025c:	e7e8      	b.n	8000230 <main+0x58>
 800025e:	bf00      	nop
 8000260:	40023800 	.word	0x40023800
 8000264:	40020000 	.word	0x40020000

08000268 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000268:	b480      	push	{r7}
 800026a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800026c:	4b06      	ldr	r3, [pc, #24]	; (8000288 <SystemInit+0x20>)
 800026e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000272:	4a05      	ldr	r2, [pc, #20]	; (8000288 <SystemInit+0x20>)
 8000274:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000278:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800027c:	bf00      	nop
 800027e:	46bd      	mov	sp, r7
 8000280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000284:	4770      	bx	lr
 8000286:	bf00      	nop
 8000288:	e000ed00 	.word	0xe000ed00

0800028c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800028c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80002c4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000290:	480d      	ldr	r0, [pc, #52]	; (80002c8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000292:	490e      	ldr	r1, [pc, #56]	; (80002cc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000294:	4a0e      	ldr	r2, [pc, #56]	; (80002d0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000296:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000298:	e002      	b.n	80002a0 <LoopCopyDataInit>

0800029a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800029a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800029c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800029e:	3304      	adds	r3, #4

080002a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002a4:	d3f9      	bcc.n	800029a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002a6:	4a0b      	ldr	r2, [pc, #44]	; (80002d4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80002a8:	4c0b      	ldr	r4, [pc, #44]	; (80002d8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80002aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002ac:	e001      	b.n	80002b2 <LoopFillZerobss>

080002ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002b0:	3204      	adds	r2, #4

080002b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002b4:	d3fb      	bcc.n	80002ae <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80002b6:	f7ff ffd7 	bl	8000268 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80002ba:	f000 f811 	bl	80002e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80002be:	f7ff ff8b 	bl	80001d8 <main>
  bx  lr    
 80002c2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80002c4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80002c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002cc:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80002d0:	08000348 	.word	0x08000348
  ldr r2, =_sbss
 80002d4:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80002d8:	2000001c 	.word	0x2000001c

080002dc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80002dc:	e7fe      	b.n	80002dc <ADC_IRQHandler>
	...

080002e0 <__libc_init_array>:
 80002e0:	b570      	push	{r4, r5, r6, lr}
 80002e2:	4d0d      	ldr	r5, [pc, #52]	; (8000318 <__libc_init_array+0x38>)
 80002e4:	4c0d      	ldr	r4, [pc, #52]	; (800031c <__libc_init_array+0x3c>)
 80002e6:	1b64      	subs	r4, r4, r5
 80002e8:	10a4      	asrs	r4, r4, #2
 80002ea:	2600      	movs	r6, #0
 80002ec:	42a6      	cmp	r6, r4
 80002ee:	d109      	bne.n	8000304 <__libc_init_array+0x24>
 80002f0:	4d0b      	ldr	r5, [pc, #44]	; (8000320 <__libc_init_array+0x40>)
 80002f2:	4c0c      	ldr	r4, [pc, #48]	; (8000324 <__libc_init_array+0x44>)
 80002f4:	f000 f818 	bl	8000328 <_init>
 80002f8:	1b64      	subs	r4, r4, r5
 80002fa:	10a4      	asrs	r4, r4, #2
 80002fc:	2600      	movs	r6, #0
 80002fe:	42a6      	cmp	r6, r4
 8000300:	d105      	bne.n	800030e <__libc_init_array+0x2e>
 8000302:	bd70      	pop	{r4, r5, r6, pc}
 8000304:	f855 3b04 	ldr.w	r3, [r5], #4
 8000308:	4798      	blx	r3
 800030a:	3601      	adds	r6, #1
 800030c:	e7ee      	b.n	80002ec <__libc_init_array+0xc>
 800030e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000312:	4798      	blx	r3
 8000314:	3601      	adds	r6, #1
 8000316:	e7f2      	b.n	80002fe <__libc_init_array+0x1e>
 8000318:	08000340 	.word	0x08000340
 800031c:	08000340 	.word	0x08000340
 8000320:	08000340 	.word	0x08000340
 8000324:	08000344 	.word	0x08000344

08000328 <_init>:
 8000328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800032a:	bf00      	nop
 800032c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800032e:	bc08      	pop	{r3}
 8000330:	469e      	mov	lr, r3
 8000332:	4770      	bx	lr

08000334 <_fini>:
 8000334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000336:	bf00      	nop
 8000338:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800033a:	bc08      	pop	{r3}
 800033c:	469e      	mov	lr, r3
 800033e:	4770      	bx	lr
