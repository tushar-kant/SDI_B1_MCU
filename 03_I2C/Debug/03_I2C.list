
03_I2C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000011f0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  08001390  08001390  00011390  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080013f4  080013f4  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  080013f4  080013f4  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  080013f4  080013f4  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080013f4  080013f4  000113f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080013f8  080013f8  000113f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080013fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000005c  20000074  08001470  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000d0  08001470  000200d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   000018c5  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000006b7  00000000  00000000  00021969  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000240  00000000  00000000  00022020  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000001e8  00000000  00000000  00022260  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014b59  00000000  00000000  00022448  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000029f3  00000000  00000000  00036fa1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082a59  00000000  00000000  00039994  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000bc3ed  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000b1c  00000000  00000000  000bc440  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08001378 	.word	0x08001378

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	08001378 	.word	0x08001378

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <main>:

  TIME time;


  int main(void)
   {
 8000280:	b580      	push	{r7, lr}
 8000282:	b082      	sub	sp, #8
 8000284:	af02      	add	r7, sp, #8

       I2C1_init();
 8000286:	f000 f859 	bl	800033c <I2C1_init>
       LCD_init();
 800028a:	f000 fa5c 	bl	8000746 <LCD_init>
       delay(10);
 800028e:	200a      	movs	r0, #10
 8000290:	f000 fa08 	bl	80006a4 <delay>

   //    LCD_data('m');
       LCD_string("TIME:");
 8000294:	4822      	ldr	r0, [pc, #136]	; (8000320 <main+0xa0>)
 8000296:	f000 fa3a 	bl	800070e <LCD_string>
       LCD_command(0xC0);
 800029a:	20c0      	movs	r0, #192	; 0xc0
 800029c:	f000 fae6 	bl	800086c <LCD_command>
       LCD_string("DATE:");
 80002a0:	4820      	ldr	r0, [pc, #128]	; (8000324 <main+0xa4>)
 80002a2:	f000 fa34 	bl	800070e <LCD_string>
       I2C1_burstWrite(SLAVE_ADDR, 0x00, 7, timeDateToSet);
 80002a6:	4b20      	ldr	r3, [pc, #128]	; (8000328 <main+0xa8>)
 80002a8:	2207      	movs	r2, #7
 80002aa:	2100      	movs	r1, #0
 80002ac:	2068      	movs	r0, #104	; 0x68
 80002ae:	f000 f8a1 	bl	80003f4 <I2C1_burstWrite>

       while (1)
       {
       	LCD_command(0x86);
 80002b2:	2086      	movs	r0, #134	; 0x86
 80002b4:	f000 fada 	bl	800086c <LCD_command>

       	Get_Time();		//reading RTC data
 80002b8:	f000 f9a6 	bl	8000608 <Get_Time>

       	sprintf (buffer, "%02d:%02d:%02d", time.hour, time.minutes, time.seconds);
 80002bc:	4b1b      	ldr	r3, [pc, #108]	; (800032c <main+0xac>)
 80002be:	789b      	ldrb	r3, [r3, #2]
 80002c0:	461a      	mov	r2, r3
 80002c2:	4b1a      	ldr	r3, [pc, #104]	; (800032c <main+0xac>)
 80002c4:	785b      	ldrb	r3, [r3, #1]
 80002c6:	4619      	mov	r1, r3
 80002c8:	4b18      	ldr	r3, [pc, #96]	; (800032c <main+0xac>)
 80002ca:	781b      	ldrb	r3, [r3, #0]
 80002cc:	9300      	str	r3, [sp, #0]
 80002ce:	460b      	mov	r3, r1
 80002d0:	4917      	ldr	r1, [pc, #92]	; (8000330 <main+0xb0>)
 80002d2:	4818      	ldr	r0, [pc, #96]	; (8000334 <main+0xb4>)
 80002d4:	f000 fbe2 	bl	8000a9c <siprintf>
       	delay(1);
 80002d8:	2001      	movs	r0, #1
 80002da:	f000 f9e3 	bl	80006a4 <delay>
       	LCD_string(buffer);
 80002de:	4815      	ldr	r0, [pc, #84]	; (8000334 <main+0xb4>)
 80002e0:	f000 fa15 	bl	800070e <LCD_string>
       	delay(1);
 80002e4:	2001      	movs	r0, #1
 80002e6:	f000 f9dd 	bl	80006a4 <delay>

       	sprintf (buffer, "%02d-%02d-20%02d", time.dayofmonth, time.month, time.year);
 80002ea:	4b10      	ldr	r3, [pc, #64]	; (800032c <main+0xac>)
 80002ec:	791b      	ldrb	r3, [r3, #4]
 80002ee:	461a      	mov	r2, r3
 80002f0:	4b0e      	ldr	r3, [pc, #56]	; (800032c <main+0xac>)
 80002f2:	795b      	ldrb	r3, [r3, #5]
 80002f4:	4619      	mov	r1, r3
 80002f6:	4b0d      	ldr	r3, [pc, #52]	; (800032c <main+0xac>)
 80002f8:	799b      	ldrb	r3, [r3, #6]
 80002fa:	9300      	str	r3, [sp, #0]
 80002fc:	460b      	mov	r3, r1
 80002fe:	490e      	ldr	r1, [pc, #56]	; (8000338 <main+0xb8>)
 8000300:	480c      	ldr	r0, [pc, #48]	; (8000334 <main+0xb4>)
 8000302:	f000 fbcb 	bl	8000a9c <siprintf>
       	delay(1);
 8000306:	2001      	movs	r0, #1
 8000308:	f000 f9cc 	bl	80006a4 <delay>
       	LCD_command(0xC6);
 800030c:	20c6      	movs	r0, #198	; 0xc6
 800030e:	f000 faad 	bl	800086c <LCD_command>
       	LCD_string(buffer);
 8000312:	4808      	ldr	r0, [pc, #32]	; (8000334 <main+0xb4>)
 8000314:	f000 f9fb 	bl	800070e <LCD_string>
       	//delay(1);
       	//LCD_command(0x08);				//turn off the screen
       	//delay(200);
       	LCD_command(0x0C);				//turn on the screen and cursor off
 8000318:	200c      	movs	r0, #12
 800031a:	f000 faa7 	bl	800086c <LCD_command>
       	LCD_command(0x86);
 800031e:	e7c8      	b.n	80002b2 <main+0x32>
 8000320:	08001390 	.word	0x08001390
 8000324:	08001398 	.word	0x08001398
 8000328:	20000000 	.word	0x20000000
 800032c:	200000b0 	.word	0x200000b0
 8000330:	080013a0 	.word	0x080013a0
 8000334:	200000a0 	.word	0x200000a0
 8000338:	080013b0 	.word	0x080013b0

0800033c <I2C1_init>:

   }


  void I2C1_init(void)
  {
 800033c:	b480      	push	{r7}
 800033e:	af00      	add	r7, sp, #0

  	RCC->AHB1ENR |= 2; 							/* Enable GPIOB clock */
 8000340:	4b29      	ldr	r3, [pc, #164]	; (80003e8 <I2C1_init+0xac>)
 8000342:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000344:	4a28      	ldr	r2, [pc, #160]	; (80003e8 <I2C1_init+0xac>)
 8000346:	f043 0302 	orr.w	r3, r3, #2
 800034a:	6313      	str	r3, [r2, #48]	; 0x30
  	RCC->APB1ENR |= 1<<21; 					/* Enable I2C1 clock */
 800034c:	4b26      	ldr	r3, [pc, #152]	; (80003e8 <I2C1_init+0xac>)
 800034e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000350:	4a25      	ldr	r2, [pc, #148]	; (80003e8 <I2C1_init+0xac>)
 8000352:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000356:	6413      	str	r3, [r2, #64]	; 0x40

  	/* configure PB8, PB9 pins for I2C1 */

  	GPIOB->MODER &= ~0xF0000; 				/* PB8, PB9 use alternate function */
 8000358:	4b24      	ldr	r3, [pc, #144]	; (80003ec <I2C1_init+0xb0>)
 800035a:	681b      	ldr	r3, [r3, #0]
 800035c:	4a23      	ldr	r2, [pc, #140]	; (80003ec <I2C1_init+0xb0>)
 800035e:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8000362:	6013      	str	r3, [r2, #0]
  	GPIOB->MODER |= 0xA0000;
 8000364:	4b21      	ldr	r3, [pc, #132]	; (80003ec <I2C1_init+0xb0>)
 8000366:	681b      	ldr	r3, [r3, #0]
 8000368:	4a20      	ldr	r2, [pc, #128]	; (80003ec <I2C1_init+0xb0>)
 800036a:	f443 2320 	orr.w	r3, r3, #655360	; 0xa0000
 800036e:	6013      	str	r3, [r2, #0]
  	GPIOB->AFR[1] &= ~0xFF; 				/* PB8, PB9 I2C1 SCL, SDA */
 8000370:	4b1e      	ldr	r3, [pc, #120]	; (80003ec <I2C1_init+0xb0>)
 8000372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000374:	4a1d      	ldr	r2, [pc, #116]	; (80003ec <I2C1_init+0xb0>)
 8000376:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800037a:	6253      	str	r3, [r2, #36]	; 0x24
  	GPIOB->AFR[1] |= 0x44;
 800037c:	4b1b      	ldr	r3, [pc, #108]	; (80003ec <I2C1_init+0xb0>)
 800037e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000380:	4a1a      	ldr	r2, [pc, #104]	; (80003ec <I2C1_init+0xb0>)
 8000382:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8000386:	6253      	str	r3, [r2, #36]	; 0x24
  	GPIOB->OTYPER |= 0x300; 				/* output open-drain */
 8000388:	4b18      	ldr	r3, [pc, #96]	; (80003ec <I2C1_init+0xb0>)
 800038a:	685b      	ldr	r3, [r3, #4]
 800038c:	4a17      	ldr	r2, [pc, #92]	; (80003ec <I2C1_init+0xb0>)
 800038e:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8000392:	6053      	str	r3, [r2, #4]
  	GPIOB->PUPDR &=~0xF0000; 				/* with pull-ups */
 8000394:	4b15      	ldr	r3, [pc, #84]	; (80003ec <I2C1_init+0xb0>)
 8000396:	68db      	ldr	r3, [r3, #12]
 8000398:	4a14      	ldr	r2, [pc, #80]	; (80003ec <I2C1_init+0xb0>)
 800039a:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 800039e:	60d3      	str	r3, [r2, #12]
  	GPIOB->PUPDR |= 0x50000;
 80003a0:	4b12      	ldr	r3, [pc, #72]	; (80003ec <I2C1_init+0xb0>)
 80003a2:	68db      	ldr	r3, [r3, #12]
 80003a4:	4a11      	ldr	r2, [pc, #68]	; (80003ec <I2C1_init+0xb0>)
 80003a6:	f443 23a0 	orr.w	r3, r3, #327680	; 0x50000
 80003aa:	60d3      	str	r3, [r2, #12]

  	I2C1->CR1 = 0x8000; 						/* software reset I2C1 */
 80003ac:	4b10      	ldr	r3, [pc, #64]	; (80003f0 <I2C1_init+0xb4>)
 80003ae:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80003b2:	601a      	str	r2, [r3, #0]
  	I2C1->CR1 &= ~0x8000;						/* out of reset */
 80003b4:	4b0e      	ldr	r3, [pc, #56]	; (80003f0 <I2C1_init+0xb4>)
 80003b6:	681b      	ldr	r3, [r3, #0]
 80003b8:	4a0d      	ldr	r2, [pc, #52]	; (80003f0 <I2C1_init+0xb4>)
 80003ba:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80003be:	6013      	str	r3, [r2, #0]
  	I2C1->CR2 = 0x10; 						/* peripheral clock is 16 MHz*/
 80003c0:	4b0b      	ldr	r3, [pc, #44]	; (80003f0 <I2C1_init+0xb4>)
 80003c2:	2210      	movs	r2, #16
 80003c4:	605a      	str	r2, [r3, #4]

  	I2C1->CCR = 80; 							/* standard mode, 100kHz clock */ //0x50
 80003c6:	4b0a      	ldr	r3, [pc, #40]	; (80003f0 <I2C1_init+0xb4>)
 80003c8:	2250      	movs	r2, #80	; 0x50
 80003ca:	61da      	str	r2, [r3, #28]
  	I2C1->TRISE =17; 							/* maximum rise time */  //0x11
 80003cc:	4b08      	ldr	r3, [pc, #32]	; (80003f0 <I2C1_init+0xb4>)
 80003ce:	2211      	movs	r2, #17
 80003d0:	621a      	str	r2, [r3, #32]
  	I2C1->CR1 |= 0x1; 						/* enable I2C1module */
 80003d2:	4b07      	ldr	r3, [pc, #28]	; (80003f0 <I2C1_init+0xb4>)
 80003d4:	681b      	ldr	r3, [r3, #0]
 80003d6:	4a06      	ldr	r2, [pc, #24]	; (80003f0 <I2C1_init+0xb4>)
 80003d8:	f043 0301 	orr.w	r3, r3, #1
 80003dc:	6013      	str	r3, [r2, #0]
  }
 80003de:	bf00      	nop
 80003e0:	46bd      	mov	sp, r7
 80003e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003e6:	4770      	bx	lr
 80003e8:	40023800 	.word	0x40023800
 80003ec:	40020400 	.word	0x40020400
 80003f0:	40005400 	.word	0x40005400

080003f4 <I2C1_burstWrite>:

  void I2C1_burstWrite(char saddr, char maddr, int n, char* data)
  {
 80003f4:	b480      	push	{r7}
 80003f6:	b087      	sub	sp, #28
 80003f8:	af00      	add	r7, sp, #0
 80003fa:	60ba      	str	r2, [r7, #8]
 80003fc:	607b      	str	r3, [r7, #4]
 80003fe:	4603      	mov	r3, r0
 8000400:	73fb      	strb	r3, [r7, #15]
 8000402:	460b      	mov	r3, r1
 8000404:	73bb      	strb	r3, [r7, #14]
      int i;
      volatile int tmp;

      while (I2C1->SR2 & 2);                  /* wait until bus not busy */
 8000406:	bf00      	nop
 8000408:	4b2d      	ldr	r3, [pc, #180]	; (80004c0 <I2C1_burstWrite+0xcc>)
 800040a:	699b      	ldr	r3, [r3, #24]
 800040c:	f003 0302 	and.w	r3, r3, #2
 8000410:	2b00      	cmp	r3, #0
 8000412:	d1f9      	bne.n	8000408 <I2C1_burstWrite+0x14>
      I2C1->CR1 &= ~0x800;                    /* disable POS */
 8000414:	4b2a      	ldr	r3, [pc, #168]	; (80004c0 <I2C1_burstWrite+0xcc>)
 8000416:	681b      	ldr	r3, [r3, #0]
 8000418:	4a29      	ldr	r2, [pc, #164]	; (80004c0 <I2C1_burstWrite+0xcc>)
 800041a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800041e:	6013      	str	r3, [r2, #0]
      I2C1->CR1 |= 0x100;                     /* generate start */
 8000420:	4b27      	ldr	r3, [pc, #156]	; (80004c0 <I2C1_burstWrite+0xcc>)
 8000422:	681b      	ldr	r3, [r3, #0]
 8000424:	4a26      	ldr	r2, [pc, #152]	; (80004c0 <I2C1_burstWrite+0xcc>)
 8000426:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800042a:	6013      	str	r3, [r2, #0]
      while (!(I2C1->SR1 & 1));               /* wait until start flag is set */
 800042c:	bf00      	nop
 800042e:	4b24      	ldr	r3, [pc, #144]	; (80004c0 <I2C1_burstWrite+0xcc>)
 8000430:	695b      	ldr	r3, [r3, #20]
 8000432:	f003 0301 	and.w	r3, r3, #1
 8000436:	2b00      	cmp	r3, #0
 8000438:	d0f9      	beq.n	800042e <I2C1_burstWrite+0x3a>
      I2C1->DR = saddr << 1;                  /* transmit slave address */
 800043a:	7bfb      	ldrb	r3, [r7, #15]
 800043c:	005a      	lsls	r2, r3, #1
 800043e:	4b20      	ldr	r3, [pc, #128]	; (80004c0 <I2C1_burstWrite+0xcc>)
 8000440:	611a      	str	r2, [r3, #16]
      while (!(I2C1->SR1 & 0x2));               /* wait until addr flag is set */
 8000442:	bf00      	nop
 8000444:	4b1e      	ldr	r3, [pc, #120]	; (80004c0 <I2C1_burstWrite+0xcc>)
 8000446:	695b      	ldr	r3, [r3, #20]
 8000448:	f003 0302 	and.w	r3, r3, #2
 800044c:	2b00      	cmp	r3, #0
 800044e:	d0f9      	beq.n	8000444 <I2C1_burstWrite+0x50>
      tmp = I2C1->SR2;                        /* clear addr flag */
 8000450:	4b1b      	ldr	r3, [pc, #108]	; (80004c0 <I2C1_burstWrite+0xcc>)
 8000452:	699b      	ldr	r3, [r3, #24]
 8000454:	613b      	str	r3, [r7, #16]
      while (!(I2C1->SR1 & 0x80));            /* wait until data register empty */
 8000456:	bf00      	nop
 8000458:	4b19      	ldr	r3, [pc, #100]	; (80004c0 <I2C1_burstWrite+0xcc>)
 800045a:	695b      	ldr	r3, [r3, #20]
 800045c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000460:	2b00      	cmp	r3, #0
 8000462:	d0f9      	beq.n	8000458 <I2C1_burstWrite+0x64>
      I2C1->DR = maddr;                       /* send memory address */
 8000464:	4a16      	ldr	r2, [pc, #88]	; (80004c0 <I2C1_burstWrite+0xcc>)
 8000466:	7bbb      	ldrb	r3, [r7, #14]
 8000468:	6113      	str	r3, [r2, #16]

      /* write all the data */
      for (i = 0; i < n; i++)
 800046a:	2300      	movs	r3, #0
 800046c:	617b      	str	r3, [r7, #20]
 800046e:	e00f      	b.n	8000490 <I2C1_burstWrite+0x9c>
      {
          while (!(I2C1->SR1 & 0x80));        /* wait until data register empty */
 8000470:	bf00      	nop
 8000472:	4b13      	ldr	r3, [pc, #76]	; (80004c0 <I2C1_burstWrite+0xcc>)
 8000474:	695b      	ldr	r3, [r3, #20]
 8000476:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800047a:	2b00      	cmp	r3, #0
 800047c:	d0f9      	beq.n	8000472 <I2C1_burstWrite+0x7e>
          I2C1->DR = *data++;                // transmit memory address */
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	1c5a      	adds	r2, r3, #1
 8000482:	607a      	str	r2, [r7, #4]
 8000484:	781a      	ldrb	r2, [r3, #0]
 8000486:	4b0e      	ldr	r3, [pc, #56]	; (80004c0 <I2C1_burstWrite+0xcc>)
 8000488:	611a      	str	r2, [r3, #16]
      for (i = 0; i < n; i++)
 800048a:	697b      	ldr	r3, [r7, #20]
 800048c:	3301      	adds	r3, #1
 800048e:	617b      	str	r3, [r7, #20]
 8000490:	697a      	ldr	r2, [r7, #20]
 8000492:	68bb      	ldr	r3, [r7, #8]
 8000494:	429a      	cmp	r2, r3
 8000496:	dbeb      	blt.n	8000470 <I2C1_burstWrite+0x7c>
      }

      while (!(I2C1->SR1 & 4));               /* wait until transfer finished */
 8000498:	bf00      	nop
 800049a:	4b09      	ldr	r3, [pc, #36]	; (80004c0 <I2C1_burstWrite+0xcc>)
 800049c:	695b      	ldr	r3, [r3, #20]
 800049e:	f003 0304 	and.w	r3, r3, #4
 80004a2:	2b00      	cmp	r3, #0
 80004a4:	d0f9      	beq.n	800049a <I2C1_burstWrite+0xa6>
      I2C1->CR1 |= 0x200;                     /* generate stop */
 80004a6:	4b06      	ldr	r3, [pc, #24]	; (80004c0 <I2C1_burstWrite+0xcc>)
 80004a8:	681b      	ldr	r3, [r3, #0]
 80004aa:	4a05      	ldr	r2, [pc, #20]	; (80004c0 <I2C1_burstWrite+0xcc>)
 80004ac:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80004b0:	6013      	str	r3, [r2, #0]
  }
 80004b2:	bf00      	nop
 80004b4:	371c      	adds	r7, #28
 80004b6:	46bd      	mov	sp, r7
 80004b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop
 80004c0:	40005400 	.word	0x40005400

080004c4 <I2C1_burstRead>:

  void I2C1_burstRead(char saddr, char maddr, int n, char* data)
  {
 80004c4:	b480      	push	{r7}
 80004c6:	b087      	sub	sp, #28
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	60ba      	str	r2, [r7, #8]
 80004cc:	607b      	str	r3, [r7, #4]
 80004ce:	4603      	mov	r3, r0
 80004d0:	73fb      	strb	r3, [r7, #15]
 80004d2:	460b      	mov	r3, r1
 80004d4:	73bb      	strb	r3, [r7, #14]
      volatile int tmp;

      while (I2C1->SR2 & 2);                  /* wait until bus not busy */
 80004d6:	bf00      	nop
 80004d8:	4b4a      	ldr	r3, [pc, #296]	; (8000604 <I2C1_burstRead+0x140>)
 80004da:	699b      	ldr	r3, [r3, #24]
 80004dc:	f003 0302 	and.w	r3, r3, #2
 80004e0:	2b00      	cmp	r3, #0
 80004e2:	d1f9      	bne.n	80004d8 <I2C1_burstRead+0x14>
      I2C1->CR1 &= ~0x800;                    /* disable POS */
 80004e4:	4b47      	ldr	r3, [pc, #284]	; (8000604 <I2C1_burstRead+0x140>)
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	4a46      	ldr	r2, [pc, #280]	; (8000604 <I2C1_burstRead+0x140>)
 80004ea:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80004ee:	6013      	str	r3, [r2, #0]
      I2C1->CR1 |= 0x100;                     /* generate start */
 80004f0:	4b44      	ldr	r3, [pc, #272]	; (8000604 <I2C1_burstRead+0x140>)
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	4a43      	ldr	r2, [pc, #268]	; (8000604 <I2C1_burstRead+0x140>)
 80004f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80004fa:	6013      	str	r3, [r2, #0]
      while (!(I2C1->SR1 & 1));               /* wait until start flag is set */
 80004fc:	bf00      	nop
 80004fe:	4b41      	ldr	r3, [pc, #260]	; (8000604 <I2C1_burstRead+0x140>)
 8000500:	695b      	ldr	r3, [r3, #20]
 8000502:	f003 0301 	and.w	r3, r3, #1
 8000506:	2b00      	cmp	r3, #0
 8000508:	d0f9      	beq.n	80004fe <I2C1_burstRead+0x3a>
      I2C1->DR = saddr << 1;                  /* transmit slave address + Write */
 800050a:	7bfb      	ldrb	r3, [r7, #15]
 800050c:	005a      	lsls	r2, r3, #1
 800050e:	4b3d      	ldr	r3, [pc, #244]	; (8000604 <I2C1_burstRead+0x140>)
 8000510:	611a      	str	r2, [r3, #16]
      while (!(I2C1->SR1 & 2));               /* wait until addr flag is set */
 8000512:	bf00      	nop
 8000514:	4b3b      	ldr	r3, [pc, #236]	; (8000604 <I2C1_burstRead+0x140>)
 8000516:	695b      	ldr	r3, [r3, #20]
 8000518:	f003 0302 	and.w	r3, r3, #2
 800051c:	2b00      	cmp	r3, #0
 800051e:	d0f9      	beq.n	8000514 <I2C1_burstRead+0x50>
      tmp = I2C1->SR2;                        /* clear addr flag */
 8000520:	4b38      	ldr	r3, [pc, #224]	; (8000604 <I2C1_burstRead+0x140>)
 8000522:	699b      	ldr	r3, [r3, #24]
 8000524:	617b      	str	r3, [r7, #20]
      while (!(I2C1->SR1 & 0x80));            /* wait until transmitter empty */
 8000526:	bf00      	nop
 8000528:	4b36      	ldr	r3, [pc, #216]	; (8000604 <I2C1_burstRead+0x140>)
 800052a:	695b      	ldr	r3, [r3, #20]
 800052c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000530:	2b00      	cmp	r3, #0
 8000532:	d0f9      	beq.n	8000528 <I2C1_burstRead+0x64>
      I2C1->DR = maddr;                       /* send memory address */
 8000534:	4a33      	ldr	r2, [pc, #204]	; (8000604 <I2C1_burstRead+0x140>)
 8000536:	7bbb      	ldrb	r3, [r7, #14]
 8000538:	6113      	str	r3, [r2, #16]
      while (!(I2C1->SR1 & 0x80));            /* wait until transmitter empty */
 800053a:	bf00      	nop
 800053c:	4b31      	ldr	r3, [pc, #196]	; (8000604 <I2C1_burstRead+0x140>)
 800053e:	695b      	ldr	r3, [r3, #20]
 8000540:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000544:	2b00      	cmp	r3, #0
 8000546:	d0f9      	beq.n	800053c <I2C1_burstRead+0x78>

      I2C1->CR1 |= 0x100;                     /* generate restart */
 8000548:	4b2e      	ldr	r3, [pc, #184]	; (8000604 <I2C1_burstRead+0x140>)
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	4a2d      	ldr	r2, [pc, #180]	; (8000604 <I2C1_burstRead+0x140>)
 800054e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000552:	6013      	str	r3, [r2, #0]
      while (!(I2C1->SR1 & 1));               /* wait until start flag is set */
 8000554:	bf00      	nop
 8000556:	4b2b      	ldr	r3, [pc, #172]	; (8000604 <I2C1_burstRead+0x140>)
 8000558:	695b      	ldr	r3, [r3, #20]
 800055a:	f003 0301 	and.w	r3, r3, #1
 800055e:	2b00      	cmp	r3, #0
 8000560:	d0f9      	beq.n	8000556 <I2C1_burstRead+0x92>
      I2C1->DR = saddr << 1 | 1;              /* transmit slave address + Read */
 8000562:	7bfb      	ldrb	r3, [r7, #15]
 8000564:	005b      	lsls	r3, r3, #1
 8000566:	f043 0201 	orr.w	r2, r3, #1
 800056a:	4b26      	ldr	r3, [pc, #152]	; (8000604 <I2C1_burstRead+0x140>)
 800056c:	611a      	str	r2, [r3, #16]
      while (!(I2C1->SR1 & 2));               /* wait until addr flag is set */
 800056e:	bf00      	nop
 8000570:	4b24      	ldr	r3, [pc, #144]	; (8000604 <I2C1_burstRead+0x140>)
 8000572:	695b      	ldr	r3, [r3, #20]
 8000574:	f003 0302 	and.w	r3, r3, #2
 8000578:	2b00      	cmp	r3, #0
 800057a:	d0f9      	beq.n	8000570 <I2C1_burstRead+0xac>
      tmp = I2C1->SR2;                        /* clear addr flag */
 800057c:	4b21      	ldr	r3, [pc, #132]	; (8000604 <I2C1_burstRead+0x140>)
 800057e:	699b      	ldr	r3, [r3, #24]
 8000580:	617b      	str	r3, [r7, #20]
      I2C1->CR1 |=  0x0400;                   /* Enable Acknowledge */
 8000582:	4b20      	ldr	r3, [pc, #128]	; (8000604 <I2C1_burstRead+0x140>)
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	4a1f      	ldr	r2, [pc, #124]	; (8000604 <I2C1_burstRead+0x140>)
 8000588:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800058c:	6013      	str	r3, [r2, #0]

      while(n > 0)
 800058e:	e02e      	b.n	80005ee <I2C1_burstRead+0x12a>
      {
          /* One byte left */
          if(n == 1)
 8000590:	68bb      	ldr	r3, [r7, #8]
 8000592:	2b01      	cmp	r3, #1
 8000594:	d11a      	bne.n	80005cc <I2C1_burstRead+0x108>
          {
              I2C1->CR1 &= ~(0x400);          /* Disable Acknowledge */
 8000596:	4b1b      	ldr	r3, [pc, #108]	; (8000604 <I2C1_burstRead+0x140>)
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	4a1a      	ldr	r2, [pc, #104]	; (8000604 <I2C1_burstRead+0x140>)
 800059c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80005a0:	6013      	str	r3, [r2, #0]
              I2C1->CR1 |= 0x200;             /* Generate Stop */
 80005a2:	4b18      	ldr	r3, [pc, #96]	; (8000604 <I2C1_burstRead+0x140>)
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	4a17      	ldr	r2, [pc, #92]	; (8000604 <I2C1_burstRead+0x140>)
 80005a8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80005ac:	6013      	str	r3, [r2, #0]
              while (!(I2C1->SR1 & 0x40));    /* Wait for RXNE flag set */
 80005ae:	bf00      	nop
 80005b0:	4b14      	ldr	r3, [pc, #80]	; (8000604 <I2C1_burstRead+0x140>)
 80005b2:	695b      	ldr	r3, [r3, #20]
 80005b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d0f9      	beq.n	80005b0 <I2C1_burstRead+0xec>
              *data++ =I2C1->DR;             		// Read data from DR */
 80005bc:	4b11      	ldr	r3, [pc, #68]	; (8000604 <I2C1_burstRead+0x140>)
 80005be:	6919      	ldr	r1, [r3, #16]
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	1c5a      	adds	r2, r3, #1
 80005c4:	607a      	str	r2, [r7, #4]
 80005c6:	b2ca      	uxtb	r2, r1
 80005c8:	701a      	strb	r2, [r3, #0]
              break;
 80005ca:	e014      	b.n	80005f6 <I2C1_burstRead+0x132>
          }
          else
          {
              while (!(I2C1->SR1 & 0x40));    /* Wait until RXNE flag is set */
 80005cc:	bf00      	nop
 80005ce:	4b0d      	ldr	r3, [pc, #52]	; (8000604 <I2C1_burstRead+0x140>)
 80005d0:	695b      	ldr	r3, [r3, #20]
 80005d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d0f9      	beq.n	80005ce <I2C1_burstRead+0x10a>
              *data++ =I2C1->DR;           			// Read data from DR */
 80005da:	4b0a      	ldr	r3, [pc, #40]	; (8000604 <I2C1_burstRead+0x140>)
 80005dc:	6919      	ldr	r1, [r3, #16]
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	1c5a      	adds	r2, r3, #1
 80005e2:	607a      	str	r2, [r7, #4]
 80005e4:	b2ca      	uxtb	r2, r1
 80005e6:	701a      	strb	r2, [r3, #0]
              n--;
 80005e8:	68bb      	ldr	r3, [r7, #8]
 80005ea:	3b01      	subs	r3, #1
 80005ec:	60bb      	str	r3, [r7, #8]
      while(n > 0)
 80005ee:	68bb      	ldr	r3, [r7, #8]
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	dccd      	bgt.n	8000590 <I2C1_burstRead+0xcc>
          }
      }
  }
 80005f4:	bf00      	nop
 80005f6:	bf00      	nop
 80005f8:	371c      	adds	r7, #28
 80005fa:	46bd      	mov	sp, r7
 80005fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000600:	4770      	bx	lr
 8000602:	bf00      	nop
 8000604:	40005400 	.word	0x40005400

08000608 <Get_Time>:

  void Get_Time()
  {
 8000608:	b580      	push	{r7, lr}
 800060a:	af00      	add	r7, sp, #0
  	//uint8_t get_time[7];
  	I2C1_burstRead(SLAVE_ADDR, 0x00, 7, timeDateReadback);
 800060c:	4b23      	ldr	r3, [pc, #140]	; (800069c <Get_Time+0x94>)
 800060e:	2207      	movs	r2, #7
 8000610:	2100      	movs	r1, #0
 8000612:	2068      	movs	r0, #104	; 0x68
 8000614:	f7ff ff56 	bl	80004c4 <I2C1_burstRead>

  	time.seconds = BCDtoDecimal(timeDateReadback[0]);		////conversion back
 8000618:	4b20      	ldr	r3, [pc, #128]	; (800069c <Get_Time+0x94>)
 800061a:	781b      	ldrb	r3, [r3, #0]
 800061c:	4618      	mov	r0, r3
 800061e:	f000 f861 	bl	80006e4 <BCDtoDecimal>
 8000622:	4603      	mov	r3, r0
 8000624:	b2da      	uxtb	r2, r3
 8000626:	4b1e      	ldr	r3, [pc, #120]	; (80006a0 <Get_Time+0x98>)
 8000628:	701a      	strb	r2, [r3, #0]
  	time.minutes = BCDtoDecimal(timeDateReadback[1]);
 800062a:	4b1c      	ldr	r3, [pc, #112]	; (800069c <Get_Time+0x94>)
 800062c:	785b      	ldrb	r3, [r3, #1]
 800062e:	4618      	mov	r0, r3
 8000630:	f000 f858 	bl	80006e4 <BCDtoDecimal>
 8000634:	4603      	mov	r3, r0
 8000636:	b2da      	uxtb	r2, r3
 8000638:	4b19      	ldr	r3, [pc, #100]	; (80006a0 <Get_Time+0x98>)
 800063a:	705a      	strb	r2, [r3, #1]
  	time.hour = 	BCDtoDecimal(timeDateReadback[2]);
 800063c:	4b17      	ldr	r3, [pc, #92]	; (800069c <Get_Time+0x94>)
 800063e:	789b      	ldrb	r3, [r3, #2]
 8000640:	4618      	mov	r0, r3
 8000642:	f000 f84f 	bl	80006e4 <BCDtoDecimal>
 8000646:	4603      	mov	r3, r0
 8000648:	b2da      	uxtb	r2, r3
 800064a:	4b15      	ldr	r3, [pc, #84]	; (80006a0 <Get_Time+0x98>)
 800064c:	709a      	strb	r2, [r3, #2]
  	time.dayofweek = BCDtoDecimal(timeDateReadback[3]);
 800064e:	4b13      	ldr	r3, [pc, #76]	; (800069c <Get_Time+0x94>)
 8000650:	78db      	ldrb	r3, [r3, #3]
 8000652:	4618      	mov	r0, r3
 8000654:	f000 f846 	bl	80006e4 <BCDtoDecimal>
 8000658:	4603      	mov	r3, r0
 800065a:	b2da      	uxtb	r2, r3
 800065c:	4b10      	ldr	r3, [pc, #64]	; (80006a0 <Get_Time+0x98>)
 800065e:	70da      	strb	r2, [r3, #3]
  	time.dayofmonth = BCDtoDecimal(timeDateReadback[4]);
 8000660:	4b0e      	ldr	r3, [pc, #56]	; (800069c <Get_Time+0x94>)
 8000662:	791b      	ldrb	r3, [r3, #4]
 8000664:	4618      	mov	r0, r3
 8000666:	f000 f83d 	bl	80006e4 <BCDtoDecimal>
 800066a:	4603      	mov	r3, r0
 800066c:	b2da      	uxtb	r2, r3
 800066e:	4b0c      	ldr	r3, [pc, #48]	; (80006a0 <Get_Time+0x98>)
 8000670:	711a      	strb	r2, [r3, #4]
  	time.month = BCDtoDecimal(timeDateReadback[5]);
 8000672:	4b0a      	ldr	r3, [pc, #40]	; (800069c <Get_Time+0x94>)
 8000674:	795b      	ldrb	r3, [r3, #5]
 8000676:	4618      	mov	r0, r3
 8000678:	f000 f834 	bl	80006e4 <BCDtoDecimal>
 800067c:	4603      	mov	r3, r0
 800067e:	b2da      	uxtb	r2, r3
 8000680:	4b07      	ldr	r3, [pc, #28]	; (80006a0 <Get_Time+0x98>)
 8000682:	715a      	strb	r2, [r3, #5]
  	time.year = BCDtoDecimal(timeDateReadback[6]);
 8000684:	4b05      	ldr	r3, [pc, #20]	; (800069c <Get_Time+0x94>)
 8000686:	799b      	ldrb	r3, [r3, #6]
 8000688:	4618      	mov	r0, r3
 800068a:	f000 f82b 	bl	80006e4 <BCDtoDecimal>
 800068e:	4603      	mov	r3, r0
 8000690:	b2da      	uxtb	r2, r3
 8000692:	4b03      	ldr	r3, [pc, #12]	; (80006a0 <Get_Time+0x98>)
 8000694:	719a      	strb	r2, [r3, #6]
  }
 8000696:	bf00      	nop
 8000698:	bd80      	pop	{r7, pc}
 800069a:	bf00      	nop
 800069c:	20000090 	.word	0x20000090
 80006a0:	200000b0 	.word	0x200000b0

080006a4 <delay>:

  void delay(uint32_t  x)
  {
 80006a4:	b480      	push	{r7}
 80006a6:	b085      	sub	sp, #20
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]
  	for(int i=0;i<x;i++)
 80006ac:	2300      	movs	r3, #0
 80006ae:	60fb      	str	r3, [r7, #12]
 80006b0:	e00d      	b.n	80006ce <delay+0x2a>
  	{
  		for(int j=0;j<3000;j++);
 80006b2:	2300      	movs	r3, #0
 80006b4:	60bb      	str	r3, [r7, #8]
 80006b6:	e002      	b.n	80006be <delay+0x1a>
 80006b8:	68bb      	ldr	r3, [r7, #8]
 80006ba:	3301      	adds	r3, #1
 80006bc:	60bb      	str	r3, [r7, #8]
 80006be:	68bb      	ldr	r3, [r7, #8]
 80006c0:	f640 32b7 	movw	r2, #2999	; 0xbb7
 80006c4:	4293      	cmp	r3, r2
 80006c6:	ddf7      	ble.n	80006b8 <delay+0x14>
  	for(int i=0;i<x;i++)
 80006c8:	68fb      	ldr	r3, [r7, #12]
 80006ca:	3301      	adds	r3, #1
 80006cc:	60fb      	str	r3, [r7, #12]
 80006ce:	68fb      	ldr	r3, [r7, #12]
 80006d0:	687a      	ldr	r2, [r7, #4]
 80006d2:	429a      	cmp	r2, r3
 80006d4:	d8ed      	bhi.n	80006b2 <delay+0xe>
  	}
  }
 80006d6:	bf00      	nop
 80006d8:	bf00      	nop
 80006da:	3714      	adds	r7, #20
 80006dc:	46bd      	mov	sp, r7
 80006de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e2:	4770      	bx	lr

080006e4 <BCDtoDecimal>:

  int BCDtoDecimal(int BCD)
  {
 80006e4:	b480      	push	{r7}
 80006e6:	b083      	sub	sp, #12
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
  	return(((BCD>>4)*10) + (BCD & 0xf));
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	111a      	asrs	r2, r3, #4
 80006f0:	4613      	mov	r3, r2
 80006f2:	009b      	lsls	r3, r3, #2
 80006f4:	4413      	add	r3, r2
 80006f6:	005b      	lsls	r3, r3, #1
 80006f8:	461a      	mov	r2, r3
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	f003 030f 	and.w	r3, r3, #15
 8000700:	4413      	add	r3, r2
  }
 8000702:	4618      	mov	r0, r3
 8000704:	370c      	adds	r7, #12
 8000706:	46bd      	mov	sp, r7
 8000708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070c:	4770      	bx	lr

0800070e <LCD_string>:



  void LCD_string(char str[])
  {
 800070e:	b580      	push	{r7, lr}
 8000710:	b084      	sub	sp, #16
 8000712:	af00      	add	r7, sp, #0
 8000714:	6078      	str	r0, [r7, #4]
  	for(int i=0;str[i]!='\0';i++)
 8000716:	2300      	movs	r3, #0
 8000718:	60fb      	str	r3, [r7, #12]
 800071a:	e009      	b.n	8000730 <LCD_string+0x22>
  	{
  		LCD_data(str[i]);
 800071c:	68fb      	ldr	r3, [r7, #12]
 800071e:	687a      	ldr	r2, [r7, #4]
 8000720:	4413      	add	r3, r2
 8000722:	781b      	ldrb	r3, [r3, #0]
 8000724:	4618      	mov	r0, r3
 8000726:	f000 f8c3 	bl	80008b0 <LCD_data>
  	for(int i=0;str[i]!='\0';i++)
 800072a:	68fb      	ldr	r3, [r7, #12]
 800072c:	3301      	adds	r3, #1
 800072e:	60fb      	str	r3, [r7, #12]
 8000730:	68fb      	ldr	r3, [r7, #12]
 8000732:	687a      	ldr	r2, [r7, #4]
 8000734:	4413      	add	r3, r2
 8000736:	781b      	ldrb	r3, [r3, #0]
 8000738:	2b00      	cmp	r3, #0
 800073a:	d1ef      	bne.n	800071c <LCD_string+0xe>
  	}

  }
 800073c:	bf00      	nop
 800073e:	bf00      	nop
 8000740:	3710      	adds	r7, #16
 8000742:	46bd      	mov	sp, r7
 8000744:	bd80      	pop	{r7, pc}

08000746 <LCD_init>:
  /* initialize GPIOA/C then initialize LCD controller */
  void LCD_init(void)
  {
 8000746:	b580      	push	{r7, lr}
 8000748:	af00      	add	r7, sp, #0
  	PORTS_init();
 800074a:	f000 f82d 	bl	80007a8 <PORTS_init>
  	delay(20); /* LCD controller reset sequence */
 800074e:	2014      	movs	r0, #20
 8000750:	f7ff ffa8 	bl	80006a4 <delay>
  	LCD_nibble_write(0x30, 0);
 8000754:	2100      	movs	r1, #0
 8000756:	2030      	movs	r0, #48	; 0x30
 8000758:	f000 f858 	bl	800080c <LCD_nibble_write>
  	delay(5);
 800075c:	2005      	movs	r0, #5
 800075e:	f7ff ffa1 	bl	80006a4 <delay>
  	LCD_nibble_write(0x30, 0);
 8000762:	2100      	movs	r1, #0
 8000764:	2030      	movs	r0, #48	; 0x30
 8000766:	f000 f851 	bl	800080c <LCD_nibble_write>
  	delay(1);
 800076a:	2001      	movs	r0, #1
 800076c:	f7ff ff9a 	bl	80006a4 <delay>
  	LCD_nibble_write(0x30, 0);
 8000770:	2100      	movs	r1, #0
 8000772:	2030      	movs	r0, #48	; 0x30
 8000774:	f000 f84a 	bl	800080c <LCD_nibble_write>
  	delay(1);
 8000778:	2001      	movs	r0, #1
 800077a:	f7ff ff93 	bl	80006a4 <delay>
  	LCD_nibble_write(0x20, 0); /* use 4-bit data mode */
 800077e:	2100      	movs	r1, #0
 8000780:	2020      	movs	r0, #32
 8000782:	f000 f843 	bl	800080c <LCD_nibble_write>
  	delay(1);
 8000786:	2001      	movs	r0, #1
 8000788:	f7ff ff8c 	bl	80006a4 <delay>
  	LCD_command(0x28); /* set 4-bit data, 2-line, 5x7 font */
 800078c:	2028      	movs	r0, #40	; 0x28
 800078e:	f000 f86d 	bl	800086c <LCD_command>
  	LCD_command(0x06); /* move cursor right */
 8000792:	2006      	movs	r0, #6
 8000794:	f000 f86a 	bl	800086c <LCD_command>
  	LCD_command(0x01); /* clear screen, move cursor to home */
 8000798:	2001      	movs	r0, #1
 800079a:	f000 f867 	bl	800086c <LCD_command>
  	LCD_command(0x0F); /* turn on display, cursor blinking */
 800079e:	200f      	movs	r0, #15
 80007a0:	f000 f864 	bl	800086c <LCD_command>
  }
 80007a4:	bf00      	nop
 80007a6:	bd80      	pop	{r7, pc}

080007a8 <PORTS_init>:

  void PORTS_init(void)
  {
 80007a8:	b480      	push	{r7}
 80007aa:	af00      	add	r7, sp, #0
  		RCC->AHB1ENR |= 0x1;                     // Enable AHB1 BUS which is connected to PA5 via GPIO port A
 80007ac:	4b14      	ldr	r3, [pc, #80]	; (8000800 <PORTS_init+0x58>)
 80007ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b0:	4a13      	ldr	r2, [pc, #76]	; (8000800 <PORTS_init+0x58>)
 80007b2:	f043 0301 	orr.w	r3, r3, #1
 80007b6:	6313      	str	r3, [r2, #48]	; 0x30
  		RCC->AHB1ENR |= 0x4;					// Enanle AHB1 bus conneted to GPIO port C
 80007b8:	4b11      	ldr	r3, [pc, #68]	; (8000800 <PORTS_init+0x58>)
 80007ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007bc:	4a10      	ldr	r2, [pc, #64]	; (8000800 <PORTS_init+0x58>)
 80007be:	f043 0304 	orr.w	r3, r3, #4
 80007c2:	6313      	str	r3, [r2, #48]	; 0x30
  	//	RCC->AHB1ENR |=0x2;						//Enanle AHB1 bus conneted to GPIO port B
  		GPIOA->MODER &=~((3<<10) | (3<<14)); //0xCC00                //clear all pin PA5 PA6 PA7
 80007c4:	4b0f      	ldr	r3, [pc, #60]	; (8000804 <PORTS_init+0x5c>)
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	4a0e      	ldr	r2, [pc, #56]	; (8000804 <PORTS_init+0x5c>)
 80007ca:	f423 434c 	bic.w	r3, r3, #52224	; 0xcc00
 80007ce:	6013      	str	r3, [r2, #0]
  		GPIOA->MODER |=0x4400; 				//set all pin 5,6,7 as o/p mode
 80007d0:	4b0c      	ldr	r3, [pc, #48]	; (8000804 <PORTS_init+0x5c>)
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	4a0b      	ldr	r2, [pc, #44]	; (8000804 <PORTS_init+0x5c>)
 80007d6:	f443 4388 	orr.w	r3, r3, #17408	; 0x4400
 80007da:	6013      	str	r3, [r2, #0]
  	//	GPIOA->BSRR = 0xC00000;	//(3<<22)			//turn off EN and RW pin
  		GPIOC->MODER &=~0xFF00;				// CLEAR all pin 4-7 of port C
 80007dc:	4b0a      	ldr	r3, [pc, #40]	; (8000808 <PORTS_init+0x60>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	4a09      	ldr	r2, [pc, #36]	; (8000808 <PORTS_init+0x60>)
 80007e2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80007e6:	6013      	str	r3, [r2, #0]
  		GPIOC->MODER |= 0x5500;				// set all pin 4-7 as o/p mode
 80007e8:	4b07      	ldr	r3, [pc, #28]	; (8000808 <PORTS_init+0x60>)
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	4a06      	ldr	r2, [pc, #24]	; (8000808 <PORTS_init+0x60>)
 80007ee:	f443 43aa 	orr.w	r3, r3, #21760	; 0x5500
 80007f2:	6013      	str	r3, [r2, #0]


  }
 80007f4:	bf00      	nop
 80007f6:	46bd      	mov	sp, r7
 80007f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fc:	4770      	bx	lr
 80007fe:	bf00      	nop
 8000800:	40023800 	.word	0x40023800
 8000804:	40020000 	.word	0x40020000
 8000808:	40020800 	.word	0x40020800

0800080c <LCD_nibble_write>:

  void LCD_nibble_write(char data, unsigned char control)
  {
 800080c:	b580      	push	{r7, lr}
 800080e:	b082      	sub	sp, #8
 8000810:	af00      	add	r7, sp, #0
 8000812:	4603      	mov	r3, r0
 8000814:	460a      	mov	r2, r1
 8000816:	71fb      	strb	r3, [r7, #7]
 8000818:	4613      	mov	r3, r2
 800081a:	71bb      	strb	r3, [r7, #6]
  	/*populate data bits */
  	GPIOC->BSRR = 0xF00000; 					/* reset the PC4-PC7 data bits */
 800081c:	4b11      	ldr	r3, [pc, #68]	; (8000864 <LCD_nibble_write+0x58>)
 800081e:	f44f 0270 	mov.w	r2, #15728640	; 0xf00000
 8000822:	619a      	str	r2, [r3, #24]
  	GPIOC->BSRR = data & 0xF0; 					/* set data bits 4-7 */
 8000824:	79fb      	ldrb	r3, [r7, #7]
 8000826:	4a0f      	ldr	r2, [pc, #60]	; (8000864 <LCD_nibble_write+0x58>)
 8000828:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800082c:	6193      	str	r3, [r2, #24]
  	/* set R/S bit */
  	if (control & RS)
 800082e:	79bb      	ldrb	r3, [r7, #6]
 8000830:	f003 0320 	and.w	r3, r3, #32
 8000834:	2b00      	cmp	r3, #0
 8000836:	d003      	beq.n	8000840 <LCD_nibble_write+0x34>
  		GPIOA->BSRR = RS;
 8000838:	4b0b      	ldr	r3, [pc, #44]	; (8000868 <LCD_nibble_write+0x5c>)
 800083a:	2220      	movs	r2, #32
 800083c:	619a      	str	r2, [r3, #24]
 800083e:	e003      	b.n	8000848 <LCD_nibble_write+0x3c>
  	else
  		GPIOA->BSRR = RS << 16;	//(1<<21)  //
 8000840:	4b09      	ldr	r3, [pc, #36]	; (8000868 <LCD_nibble_write+0x5c>)
 8000842:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000846:	619a      	str	r2, [r3, #24]
  	/* pulse E */
  	GPIOA->BSRR = EN;
 8000848:	4b07      	ldr	r3, [pc, #28]	; (8000868 <LCD_nibble_write+0x5c>)
 800084a:	2280      	movs	r2, #128	; 0x80
 800084c:	619a      	str	r2, [r3, #24]
  	delay(0);
 800084e:	2000      	movs	r0, #0
 8000850:	f7ff ff28 	bl	80006a4 <delay>
  	GPIOA->BSRR = EN << 16;
 8000854:	4b04      	ldr	r3, [pc, #16]	; (8000868 <LCD_nibble_write+0x5c>)
 8000856:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800085a:	619a      	str	r2, [r3, #24]
  }
 800085c:	bf00      	nop
 800085e:	3708      	adds	r7, #8
 8000860:	46bd      	mov	sp, r7
 8000862:	bd80      	pop	{r7, pc}
 8000864:	40020800 	.word	0x40020800
 8000868:	40020000 	.word	0x40020000

0800086c <LCD_command>:
  void LCD_command(unsigned char command)
  {
 800086c:	b580      	push	{r7, lr}
 800086e:	b082      	sub	sp, #8
 8000870:	af00      	add	r7, sp, #0
 8000872:	4603      	mov	r3, r0
 8000874:	71fb      	strb	r3, [r7, #7]
  	LCD_nibble_write(command & 0xF0, 0); 			/* upper nibble first */
 8000876:	79fb      	ldrb	r3, [r7, #7]
 8000878:	f023 030f 	bic.w	r3, r3, #15
 800087c:	b2db      	uxtb	r3, r3
 800087e:	2100      	movs	r1, #0
 8000880:	4618      	mov	r0, r3
 8000882:	f7ff ffc3 	bl	800080c <LCD_nibble_write>
  	LCD_nibble_write(command << 4, 0); 				/* then lower nibble */
 8000886:	79fb      	ldrb	r3, [r7, #7]
 8000888:	011b      	lsls	r3, r3, #4
 800088a:	b2db      	uxtb	r3, r3
 800088c:	2100      	movs	r1, #0
 800088e:	4618      	mov	r0, r3
 8000890:	f7ff ffbc 	bl	800080c <LCD_nibble_write>
  	if (command < 4)
 8000894:	79fb      	ldrb	r3, [r7, #7]
 8000896:	2b03      	cmp	r3, #3
 8000898:	d803      	bhi.n	80008a2 <LCD_command+0x36>
  		delay(2); 									/* command 1 and 2 needs up to 1.64ms */
 800089a:	2002      	movs	r0, #2
 800089c:	f7ff ff02 	bl	80006a4 <delay>
  	else
  		delay(1); 									/* all others 40 us */

  }
 80008a0:	e002      	b.n	80008a8 <LCD_command+0x3c>
  		delay(1); 									/* all others 40 us */
 80008a2:	2001      	movs	r0, #1
 80008a4:	f7ff fefe 	bl	80006a4 <delay>
  }
 80008a8:	bf00      	nop
 80008aa:	3708      	adds	r7, #8
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bd80      	pop	{r7, pc}

080008b0 <LCD_data>:
  void LCD_data(char data)
  {
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b082      	sub	sp, #8
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	4603      	mov	r3, r0
 80008b8:	71fb      	strb	r3, [r7, #7]
  	LCD_nibble_write(data & 0xF0, RS); 				/* upper nibble first */
 80008ba:	79fb      	ldrb	r3, [r7, #7]
 80008bc:	f023 030f 	bic.w	r3, r3, #15
 80008c0:	b2db      	uxtb	r3, r3
 80008c2:	2120      	movs	r1, #32
 80008c4:	4618      	mov	r0, r3
 80008c6:	f7ff ffa1 	bl	800080c <LCD_nibble_write>
  	LCD_nibble_write(data << 4, RS); 				/* then lower nibble */
 80008ca:	79fb      	ldrb	r3, [r7, #7]
 80008cc:	011b      	lsls	r3, r3, #4
 80008ce:	b2db      	uxtb	r3, r3
 80008d0:	2120      	movs	r1, #32
 80008d2:	4618      	mov	r0, r3
 80008d4:	f7ff ff9a 	bl	800080c <LCD_nibble_write>
  	delay(100);
 80008d8:	2064      	movs	r0, #100	; 0x64
 80008da:	f7ff fee3 	bl	80006a4 <delay>
  }
 80008de:	bf00      	nop
 80008e0:	3708      	adds	r7, #8
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}

080008e6 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008e6:	b480      	push	{r7}
 80008e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008ea:	e7fe      	b.n	80008ea <NMI_Handler+0x4>

080008ec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008ec:	b480      	push	{r7}
 80008ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008f0:	e7fe      	b.n	80008f0 <HardFault_Handler+0x4>

080008f2 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008f2:	b480      	push	{r7}
 80008f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008f6:	e7fe      	b.n	80008f6 <MemManage_Handler+0x4>

080008f8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008f8:	b480      	push	{r7}
 80008fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008fc:	e7fe      	b.n	80008fc <BusFault_Handler+0x4>

080008fe <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008fe:	b480      	push	{r7}
 8000900:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000902:	e7fe      	b.n	8000902 <UsageFault_Handler+0x4>

08000904 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000904:	b480      	push	{r7}
 8000906:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000908:	bf00      	nop
 800090a:	46bd      	mov	sp, r7
 800090c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000910:	4770      	bx	lr

08000912 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000912:	b480      	push	{r7}
 8000914:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000916:	bf00      	nop
 8000918:	46bd      	mov	sp, r7
 800091a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091e:	4770      	bx	lr

08000920 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000920:	b480      	push	{r7}
 8000922:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000924:	bf00      	nop
 8000926:	46bd      	mov	sp, r7
 8000928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092c:	4770      	bx	lr

0800092e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800092e:	b580      	push	{r7, lr}
 8000930:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000932:	f000 f875 	bl	8000a20 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000936:	bf00      	nop
 8000938:	bd80      	pop	{r7, pc}
	...

0800093c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b086      	sub	sp, #24
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000944:	4a14      	ldr	r2, [pc, #80]	; (8000998 <_sbrk+0x5c>)
 8000946:	4b15      	ldr	r3, [pc, #84]	; (800099c <_sbrk+0x60>)
 8000948:	1ad3      	subs	r3, r2, r3
 800094a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800094c:	697b      	ldr	r3, [r7, #20]
 800094e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000950:	4b13      	ldr	r3, [pc, #76]	; (80009a0 <_sbrk+0x64>)
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	2b00      	cmp	r3, #0
 8000956:	d102      	bne.n	800095e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000958:	4b11      	ldr	r3, [pc, #68]	; (80009a0 <_sbrk+0x64>)
 800095a:	4a12      	ldr	r2, [pc, #72]	; (80009a4 <_sbrk+0x68>)
 800095c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800095e:	4b10      	ldr	r3, [pc, #64]	; (80009a0 <_sbrk+0x64>)
 8000960:	681a      	ldr	r2, [r3, #0]
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	4413      	add	r3, r2
 8000966:	693a      	ldr	r2, [r7, #16]
 8000968:	429a      	cmp	r2, r3
 800096a:	d207      	bcs.n	800097c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800096c:	f000 f86c 	bl	8000a48 <__errno>
 8000970:	4603      	mov	r3, r0
 8000972:	220c      	movs	r2, #12
 8000974:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000976:	f04f 33ff 	mov.w	r3, #4294967295
 800097a:	e009      	b.n	8000990 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800097c:	4b08      	ldr	r3, [pc, #32]	; (80009a0 <_sbrk+0x64>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000982:	4b07      	ldr	r3, [pc, #28]	; (80009a0 <_sbrk+0x64>)
 8000984:	681a      	ldr	r2, [r3, #0]
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	4413      	add	r3, r2
 800098a:	4a05      	ldr	r2, [pc, #20]	; (80009a0 <_sbrk+0x64>)
 800098c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800098e:	68fb      	ldr	r3, [r7, #12]
}
 8000990:	4618      	mov	r0, r3
 8000992:	3718      	adds	r7, #24
 8000994:	46bd      	mov	sp, r7
 8000996:	bd80      	pop	{r7, pc}
 8000998:	20020000 	.word	0x20020000
 800099c:	00000400 	.word	0x00000400
 80009a0:	200000b8 	.word	0x200000b8
 80009a4:	200000d0 	.word	0x200000d0

080009a8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009a8:	b480      	push	{r7}
 80009aa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009ac:	4b06      	ldr	r3, [pc, #24]	; (80009c8 <SystemInit+0x20>)
 80009ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009b2:	4a05      	ldr	r2, [pc, #20]	; (80009c8 <SystemInit+0x20>)
 80009b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009bc:	bf00      	nop
 80009be:	46bd      	mov	sp, r7
 80009c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c4:	4770      	bx	lr
 80009c6:	bf00      	nop
 80009c8:	e000ed00 	.word	0xe000ed00

080009cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80009cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a04 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80009d0:	480d      	ldr	r0, [pc, #52]	; (8000a08 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80009d2:	490e      	ldr	r1, [pc, #56]	; (8000a0c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80009d4:	4a0e      	ldr	r2, [pc, #56]	; (8000a10 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80009d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009d8:	e002      	b.n	80009e0 <LoopCopyDataInit>

080009da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009de:	3304      	adds	r3, #4

080009e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009e4:	d3f9      	bcc.n	80009da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009e6:	4a0b      	ldr	r2, [pc, #44]	; (8000a14 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80009e8:	4c0b      	ldr	r4, [pc, #44]	; (8000a18 <LoopFillZerobss+0x26>)
  movs r3, #0
 80009ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009ec:	e001      	b.n	80009f2 <LoopFillZerobss>

080009ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009f0:	3204      	adds	r2, #4

080009f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009f4:	d3fb      	bcc.n	80009ee <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80009f6:	f7ff ffd7 	bl	80009a8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80009fa:	f000 f82b 	bl	8000a54 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80009fe:	f7ff fc3f 	bl	8000280 <main>
  bx  lr    
 8000a02:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000a04:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000a08:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a0c:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000a10:	080013fc 	.word	0x080013fc
  ldr r2, =_sbss
 8000a14:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000a18:	200000d0 	.word	0x200000d0

08000a1c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a1c:	e7fe      	b.n	8000a1c <ADC_IRQHandler>
	...

08000a20 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a20:	b480      	push	{r7}
 8000a22:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a24:	4b06      	ldr	r3, [pc, #24]	; (8000a40 <HAL_IncTick+0x20>)
 8000a26:	781b      	ldrb	r3, [r3, #0]
 8000a28:	461a      	mov	r2, r3
 8000a2a:	4b06      	ldr	r3, [pc, #24]	; (8000a44 <HAL_IncTick+0x24>)
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	4413      	add	r3, r2
 8000a30:	4a04      	ldr	r2, [pc, #16]	; (8000a44 <HAL_IncTick+0x24>)
 8000a32:	6013      	str	r3, [r2, #0]
}
 8000a34:	bf00      	nop
 8000a36:	46bd      	mov	sp, r7
 8000a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop
 8000a40:	2000000f 	.word	0x2000000f
 8000a44:	200000bc 	.word	0x200000bc

08000a48 <__errno>:
 8000a48:	4b01      	ldr	r3, [pc, #4]	; (8000a50 <__errno+0x8>)
 8000a4a:	6818      	ldr	r0, [r3, #0]
 8000a4c:	4770      	bx	lr
 8000a4e:	bf00      	nop
 8000a50:	20000010 	.word	0x20000010

08000a54 <__libc_init_array>:
 8000a54:	b570      	push	{r4, r5, r6, lr}
 8000a56:	4d0d      	ldr	r5, [pc, #52]	; (8000a8c <__libc_init_array+0x38>)
 8000a58:	4c0d      	ldr	r4, [pc, #52]	; (8000a90 <__libc_init_array+0x3c>)
 8000a5a:	1b64      	subs	r4, r4, r5
 8000a5c:	10a4      	asrs	r4, r4, #2
 8000a5e:	2600      	movs	r6, #0
 8000a60:	42a6      	cmp	r6, r4
 8000a62:	d109      	bne.n	8000a78 <__libc_init_array+0x24>
 8000a64:	4d0b      	ldr	r5, [pc, #44]	; (8000a94 <__libc_init_array+0x40>)
 8000a66:	4c0c      	ldr	r4, [pc, #48]	; (8000a98 <__libc_init_array+0x44>)
 8000a68:	f000 fc86 	bl	8001378 <_init>
 8000a6c:	1b64      	subs	r4, r4, r5
 8000a6e:	10a4      	asrs	r4, r4, #2
 8000a70:	2600      	movs	r6, #0
 8000a72:	42a6      	cmp	r6, r4
 8000a74:	d105      	bne.n	8000a82 <__libc_init_array+0x2e>
 8000a76:	bd70      	pop	{r4, r5, r6, pc}
 8000a78:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a7c:	4798      	blx	r3
 8000a7e:	3601      	adds	r6, #1
 8000a80:	e7ee      	b.n	8000a60 <__libc_init_array+0xc>
 8000a82:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a86:	4798      	blx	r3
 8000a88:	3601      	adds	r6, #1
 8000a8a:	e7f2      	b.n	8000a72 <__libc_init_array+0x1e>
 8000a8c:	080013f4 	.word	0x080013f4
 8000a90:	080013f4 	.word	0x080013f4
 8000a94:	080013f4 	.word	0x080013f4
 8000a98:	080013f8 	.word	0x080013f8

08000a9c <siprintf>:
 8000a9c:	b40e      	push	{r1, r2, r3}
 8000a9e:	b500      	push	{lr}
 8000aa0:	b09c      	sub	sp, #112	; 0x70
 8000aa2:	ab1d      	add	r3, sp, #116	; 0x74
 8000aa4:	9002      	str	r0, [sp, #8]
 8000aa6:	9006      	str	r0, [sp, #24]
 8000aa8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8000aac:	4809      	ldr	r0, [pc, #36]	; (8000ad4 <siprintf+0x38>)
 8000aae:	9107      	str	r1, [sp, #28]
 8000ab0:	9104      	str	r1, [sp, #16]
 8000ab2:	4909      	ldr	r1, [pc, #36]	; (8000ad8 <siprintf+0x3c>)
 8000ab4:	f853 2b04 	ldr.w	r2, [r3], #4
 8000ab8:	9105      	str	r1, [sp, #20]
 8000aba:	6800      	ldr	r0, [r0, #0]
 8000abc:	9301      	str	r3, [sp, #4]
 8000abe:	a902      	add	r1, sp, #8
 8000ac0:	f000 f868 	bl	8000b94 <_svfiprintf_r>
 8000ac4:	9b02      	ldr	r3, [sp, #8]
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	701a      	strb	r2, [r3, #0]
 8000aca:	b01c      	add	sp, #112	; 0x70
 8000acc:	f85d eb04 	ldr.w	lr, [sp], #4
 8000ad0:	b003      	add	sp, #12
 8000ad2:	4770      	bx	lr
 8000ad4:	20000010 	.word	0x20000010
 8000ad8:	ffff0208 	.word	0xffff0208

08000adc <__ssputs_r>:
 8000adc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ae0:	688e      	ldr	r6, [r1, #8]
 8000ae2:	429e      	cmp	r6, r3
 8000ae4:	4682      	mov	sl, r0
 8000ae6:	460c      	mov	r4, r1
 8000ae8:	4690      	mov	r8, r2
 8000aea:	461f      	mov	r7, r3
 8000aec:	d838      	bhi.n	8000b60 <__ssputs_r+0x84>
 8000aee:	898a      	ldrh	r2, [r1, #12]
 8000af0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8000af4:	d032      	beq.n	8000b5c <__ssputs_r+0x80>
 8000af6:	6825      	ldr	r5, [r4, #0]
 8000af8:	6909      	ldr	r1, [r1, #16]
 8000afa:	eba5 0901 	sub.w	r9, r5, r1
 8000afe:	6965      	ldr	r5, [r4, #20]
 8000b00:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8000b04:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8000b08:	3301      	adds	r3, #1
 8000b0a:	444b      	add	r3, r9
 8000b0c:	106d      	asrs	r5, r5, #1
 8000b0e:	429d      	cmp	r5, r3
 8000b10:	bf38      	it	cc
 8000b12:	461d      	movcc	r5, r3
 8000b14:	0553      	lsls	r3, r2, #21
 8000b16:	d531      	bpl.n	8000b7c <__ssputs_r+0xa0>
 8000b18:	4629      	mov	r1, r5
 8000b1a:	f000 fb63 	bl	80011e4 <_malloc_r>
 8000b1e:	4606      	mov	r6, r0
 8000b20:	b950      	cbnz	r0, 8000b38 <__ssputs_r+0x5c>
 8000b22:	230c      	movs	r3, #12
 8000b24:	f8ca 3000 	str.w	r3, [sl]
 8000b28:	89a3      	ldrh	r3, [r4, #12]
 8000b2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b2e:	81a3      	strh	r3, [r4, #12]
 8000b30:	f04f 30ff 	mov.w	r0, #4294967295
 8000b34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b38:	6921      	ldr	r1, [r4, #16]
 8000b3a:	464a      	mov	r2, r9
 8000b3c:	f000 fabe 	bl	80010bc <memcpy>
 8000b40:	89a3      	ldrh	r3, [r4, #12]
 8000b42:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8000b46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b4a:	81a3      	strh	r3, [r4, #12]
 8000b4c:	6126      	str	r6, [r4, #16]
 8000b4e:	6165      	str	r5, [r4, #20]
 8000b50:	444e      	add	r6, r9
 8000b52:	eba5 0509 	sub.w	r5, r5, r9
 8000b56:	6026      	str	r6, [r4, #0]
 8000b58:	60a5      	str	r5, [r4, #8]
 8000b5a:	463e      	mov	r6, r7
 8000b5c:	42be      	cmp	r6, r7
 8000b5e:	d900      	bls.n	8000b62 <__ssputs_r+0x86>
 8000b60:	463e      	mov	r6, r7
 8000b62:	6820      	ldr	r0, [r4, #0]
 8000b64:	4632      	mov	r2, r6
 8000b66:	4641      	mov	r1, r8
 8000b68:	f000 fab6 	bl	80010d8 <memmove>
 8000b6c:	68a3      	ldr	r3, [r4, #8]
 8000b6e:	1b9b      	subs	r3, r3, r6
 8000b70:	60a3      	str	r3, [r4, #8]
 8000b72:	6823      	ldr	r3, [r4, #0]
 8000b74:	4433      	add	r3, r6
 8000b76:	6023      	str	r3, [r4, #0]
 8000b78:	2000      	movs	r0, #0
 8000b7a:	e7db      	b.n	8000b34 <__ssputs_r+0x58>
 8000b7c:	462a      	mov	r2, r5
 8000b7e:	f000 fba5 	bl	80012cc <_realloc_r>
 8000b82:	4606      	mov	r6, r0
 8000b84:	2800      	cmp	r0, #0
 8000b86:	d1e1      	bne.n	8000b4c <__ssputs_r+0x70>
 8000b88:	6921      	ldr	r1, [r4, #16]
 8000b8a:	4650      	mov	r0, sl
 8000b8c:	f000 fabe 	bl	800110c <_free_r>
 8000b90:	e7c7      	b.n	8000b22 <__ssputs_r+0x46>
	...

08000b94 <_svfiprintf_r>:
 8000b94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000b98:	4698      	mov	r8, r3
 8000b9a:	898b      	ldrh	r3, [r1, #12]
 8000b9c:	061b      	lsls	r3, r3, #24
 8000b9e:	b09d      	sub	sp, #116	; 0x74
 8000ba0:	4607      	mov	r7, r0
 8000ba2:	460d      	mov	r5, r1
 8000ba4:	4614      	mov	r4, r2
 8000ba6:	d50e      	bpl.n	8000bc6 <_svfiprintf_r+0x32>
 8000ba8:	690b      	ldr	r3, [r1, #16]
 8000baa:	b963      	cbnz	r3, 8000bc6 <_svfiprintf_r+0x32>
 8000bac:	2140      	movs	r1, #64	; 0x40
 8000bae:	f000 fb19 	bl	80011e4 <_malloc_r>
 8000bb2:	6028      	str	r0, [r5, #0]
 8000bb4:	6128      	str	r0, [r5, #16]
 8000bb6:	b920      	cbnz	r0, 8000bc2 <_svfiprintf_r+0x2e>
 8000bb8:	230c      	movs	r3, #12
 8000bba:	603b      	str	r3, [r7, #0]
 8000bbc:	f04f 30ff 	mov.w	r0, #4294967295
 8000bc0:	e0d1      	b.n	8000d66 <_svfiprintf_r+0x1d2>
 8000bc2:	2340      	movs	r3, #64	; 0x40
 8000bc4:	616b      	str	r3, [r5, #20]
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	9309      	str	r3, [sp, #36]	; 0x24
 8000bca:	2320      	movs	r3, #32
 8000bcc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8000bd0:	f8cd 800c 	str.w	r8, [sp, #12]
 8000bd4:	2330      	movs	r3, #48	; 0x30
 8000bd6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8000d80 <_svfiprintf_r+0x1ec>
 8000bda:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8000bde:	f04f 0901 	mov.w	r9, #1
 8000be2:	4623      	mov	r3, r4
 8000be4:	469a      	mov	sl, r3
 8000be6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000bea:	b10a      	cbz	r2, 8000bf0 <_svfiprintf_r+0x5c>
 8000bec:	2a25      	cmp	r2, #37	; 0x25
 8000bee:	d1f9      	bne.n	8000be4 <_svfiprintf_r+0x50>
 8000bf0:	ebba 0b04 	subs.w	fp, sl, r4
 8000bf4:	d00b      	beq.n	8000c0e <_svfiprintf_r+0x7a>
 8000bf6:	465b      	mov	r3, fp
 8000bf8:	4622      	mov	r2, r4
 8000bfa:	4629      	mov	r1, r5
 8000bfc:	4638      	mov	r0, r7
 8000bfe:	f7ff ff6d 	bl	8000adc <__ssputs_r>
 8000c02:	3001      	adds	r0, #1
 8000c04:	f000 80aa 	beq.w	8000d5c <_svfiprintf_r+0x1c8>
 8000c08:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8000c0a:	445a      	add	r2, fp
 8000c0c:	9209      	str	r2, [sp, #36]	; 0x24
 8000c0e:	f89a 3000 	ldrb.w	r3, [sl]
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	f000 80a2 	beq.w	8000d5c <_svfiprintf_r+0x1c8>
 8000c18:	2300      	movs	r3, #0
 8000c1a:	f04f 32ff 	mov.w	r2, #4294967295
 8000c1e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000c22:	f10a 0a01 	add.w	sl, sl, #1
 8000c26:	9304      	str	r3, [sp, #16]
 8000c28:	9307      	str	r3, [sp, #28]
 8000c2a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8000c2e:	931a      	str	r3, [sp, #104]	; 0x68
 8000c30:	4654      	mov	r4, sl
 8000c32:	2205      	movs	r2, #5
 8000c34:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000c38:	4851      	ldr	r0, [pc, #324]	; (8000d80 <_svfiprintf_r+0x1ec>)
 8000c3a:	f7ff fad1 	bl	80001e0 <memchr>
 8000c3e:	9a04      	ldr	r2, [sp, #16]
 8000c40:	b9d8      	cbnz	r0, 8000c7a <_svfiprintf_r+0xe6>
 8000c42:	06d0      	lsls	r0, r2, #27
 8000c44:	bf44      	itt	mi
 8000c46:	2320      	movmi	r3, #32
 8000c48:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000c4c:	0711      	lsls	r1, r2, #28
 8000c4e:	bf44      	itt	mi
 8000c50:	232b      	movmi	r3, #43	; 0x2b
 8000c52:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000c56:	f89a 3000 	ldrb.w	r3, [sl]
 8000c5a:	2b2a      	cmp	r3, #42	; 0x2a
 8000c5c:	d015      	beq.n	8000c8a <_svfiprintf_r+0xf6>
 8000c5e:	9a07      	ldr	r2, [sp, #28]
 8000c60:	4654      	mov	r4, sl
 8000c62:	2000      	movs	r0, #0
 8000c64:	f04f 0c0a 	mov.w	ip, #10
 8000c68:	4621      	mov	r1, r4
 8000c6a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000c6e:	3b30      	subs	r3, #48	; 0x30
 8000c70:	2b09      	cmp	r3, #9
 8000c72:	d94e      	bls.n	8000d12 <_svfiprintf_r+0x17e>
 8000c74:	b1b0      	cbz	r0, 8000ca4 <_svfiprintf_r+0x110>
 8000c76:	9207      	str	r2, [sp, #28]
 8000c78:	e014      	b.n	8000ca4 <_svfiprintf_r+0x110>
 8000c7a:	eba0 0308 	sub.w	r3, r0, r8
 8000c7e:	fa09 f303 	lsl.w	r3, r9, r3
 8000c82:	4313      	orrs	r3, r2
 8000c84:	9304      	str	r3, [sp, #16]
 8000c86:	46a2      	mov	sl, r4
 8000c88:	e7d2      	b.n	8000c30 <_svfiprintf_r+0x9c>
 8000c8a:	9b03      	ldr	r3, [sp, #12]
 8000c8c:	1d19      	adds	r1, r3, #4
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	9103      	str	r1, [sp, #12]
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	bfbb      	ittet	lt
 8000c96:	425b      	neglt	r3, r3
 8000c98:	f042 0202 	orrlt.w	r2, r2, #2
 8000c9c:	9307      	strge	r3, [sp, #28]
 8000c9e:	9307      	strlt	r3, [sp, #28]
 8000ca0:	bfb8      	it	lt
 8000ca2:	9204      	strlt	r2, [sp, #16]
 8000ca4:	7823      	ldrb	r3, [r4, #0]
 8000ca6:	2b2e      	cmp	r3, #46	; 0x2e
 8000ca8:	d10c      	bne.n	8000cc4 <_svfiprintf_r+0x130>
 8000caa:	7863      	ldrb	r3, [r4, #1]
 8000cac:	2b2a      	cmp	r3, #42	; 0x2a
 8000cae:	d135      	bne.n	8000d1c <_svfiprintf_r+0x188>
 8000cb0:	9b03      	ldr	r3, [sp, #12]
 8000cb2:	1d1a      	adds	r2, r3, #4
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	9203      	str	r2, [sp, #12]
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	bfb8      	it	lt
 8000cbc:	f04f 33ff 	movlt.w	r3, #4294967295
 8000cc0:	3402      	adds	r4, #2
 8000cc2:	9305      	str	r3, [sp, #20]
 8000cc4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8000d90 <_svfiprintf_r+0x1fc>
 8000cc8:	7821      	ldrb	r1, [r4, #0]
 8000cca:	2203      	movs	r2, #3
 8000ccc:	4650      	mov	r0, sl
 8000cce:	f7ff fa87 	bl	80001e0 <memchr>
 8000cd2:	b140      	cbz	r0, 8000ce6 <_svfiprintf_r+0x152>
 8000cd4:	2340      	movs	r3, #64	; 0x40
 8000cd6:	eba0 000a 	sub.w	r0, r0, sl
 8000cda:	fa03 f000 	lsl.w	r0, r3, r0
 8000cde:	9b04      	ldr	r3, [sp, #16]
 8000ce0:	4303      	orrs	r3, r0
 8000ce2:	3401      	adds	r4, #1
 8000ce4:	9304      	str	r3, [sp, #16]
 8000ce6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000cea:	4826      	ldr	r0, [pc, #152]	; (8000d84 <_svfiprintf_r+0x1f0>)
 8000cec:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8000cf0:	2206      	movs	r2, #6
 8000cf2:	f7ff fa75 	bl	80001e0 <memchr>
 8000cf6:	2800      	cmp	r0, #0
 8000cf8:	d038      	beq.n	8000d6c <_svfiprintf_r+0x1d8>
 8000cfa:	4b23      	ldr	r3, [pc, #140]	; (8000d88 <_svfiprintf_r+0x1f4>)
 8000cfc:	bb1b      	cbnz	r3, 8000d46 <_svfiprintf_r+0x1b2>
 8000cfe:	9b03      	ldr	r3, [sp, #12]
 8000d00:	3307      	adds	r3, #7
 8000d02:	f023 0307 	bic.w	r3, r3, #7
 8000d06:	3308      	adds	r3, #8
 8000d08:	9303      	str	r3, [sp, #12]
 8000d0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000d0c:	4433      	add	r3, r6
 8000d0e:	9309      	str	r3, [sp, #36]	; 0x24
 8000d10:	e767      	b.n	8000be2 <_svfiprintf_r+0x4e>
 8000d12:	fb0c 3202 	mla	r2, ip, r2, r3
 8000d16:	460c      	mov	r4, r1
 8000d18:	2001      	movs	r0, #1
 8000d1a:	e7a5      	b.n	8000c68 <_svfiprintf_r+0xd4>
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	3401      	adds	r4, #1
 8000d20:	9305      	str	r3, [sp, #20]
 8000d22:	4619      	mov	r1, r3
 8000d24:	f04f 0c0a 	mov.w	ip, #10
 8000d28:	4620      	mov	r0, r4
 8000d2a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000d2e:	3a30      	subs	r2, #48	; 0x30
 8000d30:	2a09      	cmp	r2, #9
 8000d32:	d903      	bls.n	8000d3c <_svfiprintf_r+0x1a8>
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d0c5      	beq.n	8000cc4 <_svfiprintf_r+0x130>
 8000d38:	9105      	str	r1, [sp, #20]
 8000d3a:	e7c3      	b.n	8000cc4 <_svfiprintf_r+0x130>
 8000d3c:	fb0c 2101 	mla	r1, ip, r1, r2
 8000d40:	4604      	mov	r4, r0
 8000d42:	2301      	movs	r3, #1
 8000d44:	e7f0      	b.n	8000d28 <_svfiprintf_r+0x194>
 8000d46:	ab03      	add	r3, sp, #12
 8000d48:	9300      	str	r3, [sp, #0]
 8000d4a:	462a      	mov	r2, r5
 8000d4c:	4b0f      	ldr	r3, [pc, #60]	; (8000d8c <_svfiprintf_r+0x1f8>)
 8000d4e:	a904      	add	r1, sp, #16
 8000d50:	4638      	mov	r0, r7
 8000d52:	f3af 8000 	nop.w
 8000d56:	1c42      	adds	r2, r0, #1
 8000d58:	4606      	mov	r6, r0
 8000d5a:	d1d6      	bne.n	8000d0a <_svfiprintf_r+0x176>
 8000d5c:	89ab      	ldrh	r3, [r5, #12]
 8000d5e:	065b      	lsls	r3, r3, #25
 8000d60:	f53f af2c 	bmi.w	8000bbc <_svfiprintf_r+0x28>
 8000d64:	9809      	ldr	r0, [sp, #36]	; 0x24
 8000d66:	b01d      	add	sp, #116	; 0x74
 8000d68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000d6c:	ab03      	add	r3, sp, #12
 8000d6e:	9300      	str	r3, [sp, #0]
 8000d70:	462a      	mov	r2, r5
 8000d72:	4b06      	ldr	r3, [pc, #24]	; (8000d8c <_svfiprintf_r+0x1f8>)
 8000d74:	a904      	add	r1, sp, #16
 8000d76:	4638      	mov	r0, r7
 8000d78:	f000 f87a 	bl	8000e70 <_printf_i>
 8000d7c:	e7eb      	b.n	8000d56 <_svfiprintf_r+0x1c2>
 8000d7e:	bf00      	nop
 8000d80:	080013c1 	.word	0x080013c1
 8000d84:	080013cb 	.word	0x080013cb
 8000d88:	00000000 	.word	0x00000000
 8000d8c:	08000add 	.word	0x08000add
 8000d90:	080013c7 	.word	0x080013c7

08000d94 <_printf_common>:
 8000d94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d98:	4616      	mov	r6, r2
 8000d9a:	4699      	mov	r9, r3
 8000d9c:	688a      	ldr	r2, [r1, #8]
 8000d9e:	690b      	ldr	r3, [r1, #16]
 8000da0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8000da4:	4293      	cmp	r3, r2
 8000da6:	bfb8      	it	lt
 8000da8:	4613      	movlt	r3, r2
 8000daa:	6033      	str	r3, [r6, #0]
 8000dac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8000db0:	4607      	mov	r7, r0
 8000db2:	460c      	mov	r4, r1
 8000db4:	b10a      	cbz	r2, 8000dba <_printf_common+0x26>
 8000db6:	3301      	adds	r3, #1
 8000db8:	6033      	str	r3, [r6, #0]
 8000dba:	6823      	ldr	r3, [r4, #0]
 8000dbc:	0699      	lsls	r1, r3, #26
 8000dbe:	bf42      	ittt	mi
 8000dc0:	6833      	ldrmi	r3, [r6, #0]
 8000dc2:	3302      	addmi	r3, #2
 8000dc4:	6033      	strmi	r3, [r6, #0]
 8000dc6:	6825      	ldr	r5, [r4, #0]
 8000dc8:	f015 0506 	ands.w	r5, r5, #6
 8000dcc:	d106      	bne.n	8000ddc <_printf_common+0x48>
 8000dce:	f104 0a19 	add.w	sl, r4, #25
 8000dd2:	68e3      	ldr	r3, [r4, #12]
 8000dd4:	6832      	ldr	r2, [r6, #0]
 8000dd6:	1a9b      	subs	r3, r3, r2
 8000dd8:	42ab      	cmp	r3, r5
 8000dda:	dc26      	bgt.n	8000e2a <_printf_common+0x96>
 8000ddc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8000de0:	1e13      	subs	r3, r2, #0
 8000de2:	6822      	ldr	r2, [r4, #0]
 8000de4:	bf18      	it	ne
 8000de6:	2301      	movne	r3, #1
 8000de8:	0692      	lsls	r2, r2, #26
 8000dea:	d42b      	bmi.n	8000e44 <_printf_common+0xb0>
 8000dec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8000df0:	4649      	mov	r1, r9
 8000df2:	4638      	mov	r0, r7
 8000df4:	47c0      	blx	r8
 8000df6:	3001      	adds	r0, #1
 8000df8:	d01e      	beq.n	8000e38 <_printf_common+0xa4>
 8000dfa:	6823      	ldr	r3, [r4, #0]
 8000dfc:	68e5      	ldr	r5, [r4, #12]
 8000dfe:	6832      	ldr	r2, [r6, #0]
 8000e00:	f003 0306 	and.w	r3, r3, #6
 8000e04:	2b04      	cmp	r3, #4
 8000e06:	bf08      	it	eq
 8000e08:	1aad      	subeq	r5, r5, r2
 8000e0a:	68a3      	ldr	r3, [r4, #8]
 8000e0c:	6922      	ldr	r2, [r4, #16]
 8000e0e:	bf0c      	ite	eq
 8000e10:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000e14:	2500      	movne	r5, #0
 8000e16:	4293      	cmp	r3, r2
 8000e18:	bfc4      	itt	gt
 8000e1a:	1a9b      	subgt	r3, r3, r2
 8000e1c:	18ed      	addgt	r5, r5, r3
 8000e1e:	2600      	movs	r6, #0
 8000e20:	341a      	adds	r4, #26
 8000e22:	42b5      	cmp	r5, r6
 8000e24:	d11a      	bne.n	8000e5c <_printf_common+0xc8>
 8000e26:	2000      	movs	r0, #0
 8000e28:	e008      	b.n	8000e3c <_printf_common+0xa8>
 8000e2a:	2301      	movs	r3, #1
 8000e2c:	4652      	mov	r2, sl
 8000e2e:	4649      	mov	r1, r9
 8000e30:	4638      	mov	r0, r7
 8000e32:	47c0      	blx	r8
 8000e34:	3001      	adds	r0, #1
 8000e36:	d103      	bne.n	8000e40 <_printf_common+0xac>
 8000e38:	f04f 30ff 	mov.w	r0, #4294967295
 8000e3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e40:	3501      	adds	r5, #1
 8000e42:	e7c6      	b.n	8000dd2 <_printf_common+0x3e>
 8000e44:	18e1      	adds	r1, r4, r3
 8000e46:	1c5a      	adds	r2, r3, #1
 8000e48:	2030      	movs	r0, #48	; 0x30
 8000e4a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8000e4e:	4422      	add	r2, r4
 8000e50:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8000e54:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8000e58:	3302      	adds	r3, #2
 8000e5a:	e7c7      	b.n	8000dec <_printf_common+0x58>
 8000e5c:	2301      	movs	r3, #1
 8000e5e:	4622      	mov	r2, r4
 8000e60:	4649      	mov	r1, r9
 8000e62:	4638      	mov	r0, r7
 8000e64:	47c0      	blx	r8
 8000e66:	3001      	adds	r0, #1
 8000e68:	d0e6      	beq.n	8000e38 <_printf_common+0xa4>
 8000e6a:	3601      	adds	r6, #1
 8000e6c:	e7d9      	b.n	8000e22 <_printf_common+0x8e>
	...

08000e70 <_printf_i>:
 8000e70:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8000e74:	7e0f      	ldrb	r7, [r1, #24]
 8000e76:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8000e78:	2f78      	cmp	r7, #120	; 0x78
 8000e7a:	4691      	mov	r9, r2
 8000e7c:	4680      	mov	r8, r0
 8000e7e:	460c      	mov	r4, r1
 8000e80:	469a      	mov	sl, r3
 8000e82:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8000e86:	d807      	bhi.n	8000e98 <_printf_i+0x28>
 8000e88:	2f62      	cmp	r7, #98	; 0x62
 8000e8a:	d80a      	bhi.n	8000ea2 <_printf_i+0x32>
 8000e8c:	2f00      	cmp	r7, #0
 8000e8e:	f000 80d8 	beq.w	8001042 <_printf_i+0x1d2>
 8000e92:	2f58      	cmp	r7, #88	; 0x58
 8000e94:	f000 80a3 	beq.w	8000fde <_printf_i+0x16e>
 8000e98:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8000e9c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8000ea0:	e03a      	b.n	8000f18 <_printf_i+0xa8>
 8000ea2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8000ea6:	2b15      	cmp	r3, #21
 8000ea8:	d8f6      	bhi.n	8000e98 <_printf_i+0x28>
 8000eaa:	a101      	add	r1, pc, #4	; (adr r1, 8000eb0 <_printf_i+0x40>)
 8000eac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8000eb0:	08000f09 	.word	0x08000f09
 8000eb4:	08000f1d 	.word	0x08000f1d
 8000eb8:	08000e99 	.word	0x08000e99
 8000ebc:	08000e99 	.word	0x08000e99
 8000ec0:	08000e99 	.word	0x08000e99
 8000ec4:	08000e99 	.word	0x08000e99
 8000ec8:	08000f1d 	.word	0x08000f1d
 8000ecc:	08000e99 	.word	0x08000e99
 8000ed0:	08000e99 	.word	0x08000e99
 8000ed4:	08000e99 	.word	0x08000e99
 8000ed8:	08000e99 	.word	0x08000e99
 8000edc:	08001029 	.word	0x08001029
 8000ee0:	08000f4d 	.word	0x08000f4d
 8000ee4:	0800100b 	.word	0x0800100b
 8000ee8:	08000e99 	.word	0x08000e99
 8000eec:	08000e99 	.word	0x08000e99
 8000ef0:	0800104b 	.word	0x0800104b
 8000ef4:	08000e99 	.word	0x08000e99
 8000ef8:	08000f4d 	.word	0x08000f4d
 8000efc:	08000e99 	.word	0x08000e99
 8000f00:	08000e99 	.word	0x08000e99
 8000f04:	08001013 	.word	0x08001013
 8000f08:	682b      	ldr	r3, [r5, #0]
 8000f0a:	1d1a      	adds	r2, r3, #4
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	602a      	str	r2, [r5, #0]
 8000f10:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8000f14:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8000f18:	2301      	movs	r3, #1
 8000f1a:	e0a3      	b.n	8001064 <_printf_i+0x1f4>
 8000f1c:	6820      	ldr	r0, [r4, #0]
 8000f1e:	6829      	ldr	r1, [r5, #0]
 8000f20:	0606      	lsls	r6, r0, #24
 8000f22:	f101 0304 	add.w	r3, r1, #4
 8000f26:	d50a      	bpl.n	8000f3e <_printf_i+0xce>
 8000f28:	680e      	ldr	r6, [r1, #0]
 8000f2a:	602b      	str	r3, [r5, #0]
 8000f2c:	2e00      	cmp	r6, #0
 8000f2e:	da03      	bge.n	8000f38 <_printf_i+0xc8>
 8000f30:	232d      	movs	r3, #45	; 0x2d
 8000f32:	4276      	negs	r6, r6
 8000f34:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8000f38:	485e      	ldr	r0, [pc, #376]	; (80010b4 <_printf_i+0x244>)
 8000f3a:	230a      	movs	r3, #10
 8000f3c:	e019      	b.n	8000f72 <_printf_i+0x102>
 8000f3e:	680e      	ldr	r6, [r1, #0]
 8000f40:	602b      	str	r3, [r5, #0]
 8000f42:	f010 0f40 	tst.w	r0, #64	; 0x40
 8000f46:	bf18      	it	ne
 8000f48:	b236      	sxthne	r6, r6
 8000f4a:	e7ef      	b.n	8000f2c <_printf_i+0xbc>
 8000f4c:	682b      	ldr	r3, [r5, #0]
 8000f4e:	6820      	ldr	r0, [r4, #0]
 8000f50:	1d19      	adds	r1, r3, #4
 8000f52:	6029      	str	r1, [r5, #0]
 8000f54:	0601      	lsls	r1, r0, #24
 8000f56:	d501      	bpl.n	8000f5c <_printf_i+0xec>
 8000f58:	681e      	ldr	r6, [r3, #0]
 8000f5a:	e002      	b.n	8000f62 <_printf_i+0xf2>
 8000f5c:	0646      	lsls	r6, r0, #25
 8000f5e:	d5fb      	bpl.n	8000f58 <_printf_i+0xe8>
 8000f60:	881e      	ldrh	r6, [r3, #0]
 8000f62:	4854      	ldr	r0, [pc, #336]	; (80010b4 <_printf_i+0x244>)
 8000f64:	2f6f      	cmp	r7, #111	; 0x6f
 8000f66:	bf0c      	ite	eq
 8000f68:	2308      	moveq	r3, #8
 8000f6a:	230a      	movne	r3, #10
 8000f6c:	2100      	movs	r1, #0
 8000f6e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8000f72:	6865      	ldr	r5, [r4, #4]
 8000f74:	60a5      	str	r5, [r4, #8]
 8000f76:	2d00      	cmp	r5, #0
 8000f78:	bfa2      	ittt	ge
 8000f7a:	6821      	ldrge	r1, [r4, #0]
 8000f7c:	f021 0104 	bicge.w	r1, r1, #4
 8000f80:	6021      	strge	r1, [r4, #0]
 8000f82:	b90e      	cbnz	r6, 8000f88 <_printf_i+0x118>
 8000f84:	2d00      	cmp	r5, #0
 8000f86:	d04d      	beq.n	8001024 <_printf_i+0x1b4>
 8000f88:	4615      	mov	r5, r2
 8000f8a:	fbb6 f1f3 	udiv	r1, r6, r3
 8000f8e:	fb03 6711 	mls	r7, r3, r1, r6
 8000f92:	5dc7      	ldrb	r7, [r0, r7]
 8000f94:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8000f98:	4637      	mov	r7, r6
 8000f9a:	42bb      	cmp	r3, r7
 8000f9c:	460e      	mov	r6, r1
 8000f9e:	d9f4      	bls.n	8000f8a <_printf_i+0x11a>
 8000fa0:	2b08      	cmp	r3, #8
 8000fa2:	d10b      	bne.n	8000fbc <_printf_i+0x14c>
 8000fa4:	6823      	ldr	r3, [r4, #0]
 8000fa6:	07de      	lsls	r6, r3, #31
 8000fa8:	d508      	bpl.n	8000fbc <_printf_i+0x14c>
 8000faa:	6923      	ldr	r3, [r4, #16]
 8000fac:	6861      	ldr	r1, [r4, #4]
 8000fae:	4299      	cmp	r1, r3
 8000fb0:	bfde      	ittt	le
 8000fb2:	2330      	movle	r3, #48	; 0x30
 8000fb4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8000fb8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8000fbc:	1b52      	subs	r2, r2, r5
 8000fbe:	6122      	str	r2, [r4, #16]
 8000fc0:	f8cd a000 	str.w	sl, [sp]
 8000fc4:	464b      	mov	r3, r9
 8000fc6:	aa03      	add	r2, sp, #12
 8000fc8:	4621      	mov	r1, r4
 8000fca:	4640      	mov	r0, r8
 8000fcc:	f7ff fee2 	bl	8000d94 <_printf_common>
 8000fd0:	3001      	adds	r0, #1
 8000fd2:	d14c      	bne.n	800106e <_printf_i+0x1fe>
 8000fd4:	f04f 30ff 	mov.w	r0, #4294967295
 8000fd8:	b004      	add	sp, #16
 8000fda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fde:	4835      	ldr	r0, [pc, #212]	; (80010b4 <_printf_i+0x244>)
 8000fe0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8000fe4:	6829      	ldr	r1, [r5, #0]
 8000fe6:	6823      	ldr	r3, [r4, #0]
 8000fe8:	f851 6b04 	ldr.w	r6, [r1], #4
 8000fec:	6029      	str	r1, [r5, #0]
 8000fee:	061d      	lsls	r5, r3, #24
 8000ff0:	d514      	bpl.n	800101c <_printf_i+0x1ac>
 8000ff2:	07df      	lsls	r7, r3, #31
 8000ff4:	bf44      	itt	mi
 8000ff6:	f043 0320 	orrmi.w	r3, r3, #32
 8000ffa:	6023      	strmi	r3, [r4, #0]
 8000ffc:	b91e      	cbnz	r6, 8001006 <_printf_i+0x196>
 8000ffe:	6823      	ldr	r3, [r4, #0]
 8001000:	f023 0320 	bic.w	r3, r3, #32
 8001004:	6023      	str	r3, [r4, #0]
 8001006:	2310      	movs	r3, #16
 8001008:	e7b0      	b.n	8000f6c <_printf_i+0xfc>
 800100a:	6823      	ldr	r3, [r4, #0]
 800100c:	f043 0320 	orr.w	r3, r3, #32
 8001010:	6023      	str	r3, [r4, #0]
 8001012:	2378      	movs	r3, #120	; 0x78
 8001014:	4828      	ldr	r0, [pc, #160]	; (80010b8 <_printf_i+0x248>)
 8001016:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800101a:	e7e3      	b.n	8000fe4 <_printf_i+0x174>
 800101c:	0659      	lsls	r1, r3, #25
 800101e:	bf48      	it	mi
 8001020:	b2b6      	uxthmi	r6, r6
 8001022:	e7e6      	b.n	8000ff2 <_printf_i+0x182>
 8001024:	4615      	mov	r5, r2
 8001026:	e7bb      	b.n	8000fa0 <_printf_i+0x130>
 8001028:	682b      	ldr	r3, [r5, #0]
 800102a:	6826      	ldr	r6, [r4, #0]
 800102c:	6961      	ldr	r1, [r4, #20]
 800102e:	1d18      	adds	r0, r3, #4
 8001030:	6028      	str	r0, [r5, #0]
 8001032:	0635      	lsls	r5, r6, #24
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	d501      	bpl.n	800103c <_printf_i+0x1cc>
 8001038:	6019      	str	r1, [r3, #0]
 800103a:	e002      	b.n	8001042 <_printf_i+0x1d2>
 800103c:	0670      	lsls	r0, r6, #25
 800103e:	d5fb      	bpl.n	8001038 <_printf_i+0x1c8>
 8001040:	8019      	strh	r1, [r3, #0]
 8001042:	2300      	movs	r3, #0
 8001044:	6123      	str	r3, [r4, #16]
 8001046:	4615      	mov	r5, r2
 8001048:	e7ba      	b.n	8000fc0 <_printf_i+0x150>
 800104a:	682b      	ldr	r3, [r5, #0]
 800104c:	1d1a      	adds	r2, r3, #4
 800104e:	602a      	str	r2, [r5, #0]
 8001050:	681d      	ldr	r5, [r3, #0]
 8001052:	6862      	ldr	r2, [r4, #4]
 8001054:	2100      	movs	r1, #0
 8001056:	4628      	mov	r0, r5
 8001058:	f7ff f8c2 	bl	80001e0 <memchr>
 800105c:	b108      	cbz	r0, 8001062 <_printf_i+0x1f2>
 800105e:	1b40      	subs	r0, r0, r5
 8001060:	6060      	str	r0, [r4, #4]
 8001062:	6863      	ldr	r3, [r4, #4]
 8001064:	6123      	str	r3, [r4, #16]
 8001066:	2300      	movs	r3, #0
 8001068:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800106c:	e7a8      	b.n	8000fc0 <_printf_i+0x150>
 800106e:	6923      	ldr	r3, [r4, #16]
 8001070:	462a      	mov	r2, r5
 8001072:	4649      	mov	r1, r9
 8001074:	4640      	mov	r0, r8
 8001076:	47d0      	blx	sl
 8001078:	3001      	adds	r0, #1
 800107a:	d0ab      	beq.n	8000fd4 <_printf_i+0x164>
 800107c:	6823      	ldr	r3, [r4, #0]
 800107e:	079b      	lsls	r3, r3, #30
 8001080:	d413      	bmi.n	80010aa <_printf_i+0x23a>
 8001082:	68e0      	ldr	r0, [r4, #12]
 8001084:	9b03      	ldr	r3, [sp, #12]
 8001086:	4298      	cmp	r0, r3
 8001088:	bfb8      	it	lt
 800108a:	4618      	movlt	r0, r3
 800108c:	e7a4      	b.n	8000fd8 <_printf_i+0x168>
 800108e:	2301      	movs	r3, #1
 8001090:	4632      	mov	r2, r6
 8001092:	4649      	mov	r1, r9
 8001094:	4640      	mov	r0, r8
 8001096:	47d0      	blx	sl
 8001098:	3001      	adds	r0, #1
 800109a:	d09b      	beq.n	8000fd4 <_printf_i+0x164>
 800109c:	3501      	adds	r5, #1
 800109e:	68e3      	ldr	r3, [r4, #12]
 80010a0:	9903      	ldr	r1, [sp, #12]
 80010a2:	1a5b      	subs	r3, r3, r1
 80010a4:	42ab      	cmp	r3, r5
 80010a6:	dcf2      	bgt.n	800108e <_printf_i+0x21e>
 80010a8:	e7eb      	b.n	8001082 <_printf_i+0x212>
 80010aa:	2500      	movs	r5, #0
 80010ac:	f104 0619 	add.w	r6, r4, #25
 80010b0:	e7f5      	b.n	800109e <_printf_i+0x22e>
 80010b2:	bf00      	nop
 80010b4:	080013d2 	.word	0x080013d2
 80010b8:	080013e3 	.word	0x080013e3

080010bc <memcpy>:
 80010bc:	440a      	add	r2, r1
 80010be:	4291      	cmp	r1, r2
 80010c0:	f100 33ff 	add.w	r3, r0, #4294967295
 80010c4:	d100      	bne.n	80010c8 <memcpy+0xc>
 80010c6:	4770      	bx	lr
 80010c8:	b510      	push	{r4, lr}
 80010ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 80010ce:	f803 4f01 	strb.w	r4, [r3, #1]!
 80010d2:	4291      	cmp	r1, r2
 80010d4:	d1f9      	bne.n	80010ca <memcpy+0xe>
 80010d6:	bd10      	pop	{r4, pc}

080010d8 <memmove>:
 80010d8:	4288      	cmp	r0, r1
 80010da:	b510      	push	{r4, lr}
 80010dc:	eb01 0402 	add.w	r4, r1, r2
 80010e0:	d902      	bls.n	80010e8 <memmove+0x10>
 80010e2:	4284      	cmp	r4, r0
 80010e4:	4623      	mov	r3, r4
 80010e6:	d807      	bhi.n	80010f8 <memmove+0x20>
 80010e8:	1e43      	subs	r3, r0, #1
 80010ea:	42a1      	cmp	r1, r4
 80010ec:	d008      	beq.n	8001100 <memmove+0x28>
 80010ee:	f811 2b01 	ldrb.w	r2, [r1], #1
 80010f2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80010f6:	e7f8      	b.n	80010ea <memmove+0x12>
 80010f8:	4402      	add	r2, r0
 80010fa:	4601      	mov	r1, r0
 80010fc:	428a      	cmp	r2, r1
 80010fe:	d100      	bne.n	8001102 <memmove+0x2a>
 8001100:	bd10      	pop	{r4, pc}
 8001102:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8001106:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800110a:	e7f7      	b.n	80010fc <memmove+0x24>

0800110c <_free_r>:
 800110c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800110e:	2900      	cmp	r1, #0
 8001110:	d044      	beq.n	800119c <_free_r+0x90>
 8001112:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001116:	9001      	str	r0, [sp, #4]
 8001118:	2b00      	cmp	r3, #0
 800111a:	f1a1 0404 	sub.w	r4, r1, #4
 800111e:	bfb8      	it	lt
 8001120:	18e4      	addlt	r4, r4, r3
 8001122:	f000 f913 	bl	800134c <__malloc_lock>
 8001126:	4a1e      	ldr	r2, [pc, #120]	; (80011a0 <_free_r+0x94>)
 8001128:	9801      	ldr	r0, [sp, #4]
 800112a:	6813      	ldr	r3, [r2, #0]
 800112c:	b933      	cbnz	r3, 800113c <_free_r+0x30>
 800112e:	6063      	str	r3, [r4, #4]
 8001130:	6014      	str	r4, [r2, #0]
 8001132:	b003      	add	sp, #12
 8001134:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8001138:	f000 b90e 	b.w	8001358 <__malloc_unlock>
 800113c:	42a3      	cmp	r3, r4
 800113e:	d908      	bls.n	8001152 <_free_r+0x46>
 8001140:	6825      	ldr	r5, [r4, #0]
 8001142:	1961      	adds	r1, r4, r5
 8001144:	428b      	cmp	r3, r1
 8001146:	bf01      	itttt	eq
 8001148:	6819      	ldreq	r1, [r3, #0]
 800114a:	685b      	ldreq	r3, [r3, #4]
 800114c:	1949      	addeq	r1, r1, r5
 800114e:	6021      	streq	r1, [r4, #0]
 8001150:	e7ed      	b.n	800112e <_free_r+0x22>
 8001152:	461a      	mov	r2, r3
 8001154:	685b      	ldr	r3, [r3, #4]
 8001156:	b10b      	cbz	r3, 800115c <_free_r+0x50>
 8001158:	42a3      	cmp	r3, r4
 800115a:	d9fa      	bls.n	8001152 <_free_r+0x46>
 800115c:	6811      	ldr	r1, [r2, #0]
 800115e:	1855      	adds	r5, r2, r1
 8001160:	42a5      	cmp	r5, r4
 8001162:	d10b      	bne.n	800117c <_free_r+0x70>
 8001164:	6824      	ldr	r4, [r4, #0]
 8001166:	4421      	add	r1, r4
 8001168:	1854      	adds	r4, r2, r1
 800116a:	42a3      	cmp	r3, r4
 800116c:	6011      	str	r1, [r2, #0]
 800116e:	d1e0      	bne.n	8001132 <_free_r+0x26>
 8001170:	681c      	ldr	r4, [r3, #0]
 8001172:	685b      	ldr	r3, [r3, #4]
 8001174:	6053      	str	r3, [r2, #4]
 8001176:	4421      	add	r1, r4
 8001178:	6011      	str	r1, [r2, #0]
 800117a:	e7da      	b.n	8001132 <_free_r+0x26>
 800117c:	d902      	bls.n	8001184 <_free_r+0x78>
 800117e:	230c      	movs	r3, #12
 8001180:	6003      	str	r3, [r0, #0]
 8001182:	e7d6      	b.n	8001132 <_free_r+0x26>
 8001184:	6825      	ldr	r5, [r4, #0]
 8001186:	1961      	adds	r1, r4, r5
 8001188:	428b      	cmp	r3, r1
 800118a:	bf04      	itt	eq
 800118c:	6819      	ldreq	r1, [r3, #0]
 800118e:	685b      	ldreq	r3, [r3, #4]
 8001190:	6063      	str	r3, [r4, #4]
 8001192:	bf04      	itt	eq
 8001194:	1949      	addeq	r1, r1, r5
 8001196:	6021      	streq	r1, [r4, #0]
 8001198:	6054      	str	r4, [r2, #4]
 800119a:	e7ca      	b.n	8001132 <_free_r+0x26>
 800119c:	b003      	add	sp, #12
 800119e:	bd30      	pop	{r4, r5, pc}
 80011a0:	200000c0 	.word	0x200000c0

080011a4 <sbrk_aligned>:
 80011a4:	b570      	push	{r4, r5, r6, lr}
 80011a6:	4e0e      	ldr	r6, [pc, #56]	; (80011e0 <sbrk_aligned+0x3c>)
 80011a8:	460c      	mov	r4, r1
 80011aa:	6831      	ldr	r1, [r6, #0]
 80011ac:	4605      	mov	r5, r0
 80011ae:	b911      	cbnz	r1, 80011b6 <sbrk_aligned+0x12>
 80011b0:	f000 f8bc 	bl	800132c <_sbrk_r>
 80011b4:	6030      	str	r0, [r6, #0]
 80011b6:	4621      	mov	r1, r4
 80011b8:	4628      	mov	r0, r5
 80011ba:	f000 f8b7 	bl	800132c <_sbrk_r>
 80011be:	1c43      	adds	r3, r0, #1
 80011c0:	d00a      	beq.n	80011d8 <sbrk_aligned+0x34>
 80011c2:	1cc4      	adds	r4, r0, #3
 80011c4:	f024 0403 	bic.w	r4, r4, #3
 80011c8:	42a0      	cmp	r0, r4
 80011ca:	d007      	beq.n	80011dc <sbrk_aligned+0x38>
 80011cc:	1a21      	subs	r1, r4, r0
 80011ce:	4628      	mov	r0, r5
 80011d0:	f000 f8ac 	bl	800132c <_sbrk_r>
 80011d4:	3001      	adds	r0, #1
 80011d6:	d101      	bne.n	80011dc <sbrk_aligned+0x38>
 80011d8:	f04f 34ff 	mov.w	r4, #4294967295
 80011dc:	4620      	mov	r0, r4
 80011de:	bd70      	pop	{r4, r5, r6, pc}
 80011e0:	200000c4 	.word	0x200000c4

080011e4 <_malloc_r>:
 80011e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80011e8:	1ccd      	adds	r5, r1, #3
 80011ea:	f025 0503 	bic.w	r5, r5, #3
 80011ee:	3508      	adds	r5, #8
 80011f0:	2d0c      	cmp	r5, #12
 80011f2:	bf38      	it	cc
 80011f4:	250c      	movcc	r5, #12
 80011f6:	2d00      	cmp	r5, #0
 80011f8:	4607      	mov	r7, r0
 80011fa:	db01      	blt.n	8001200 <_malloc_r+0x1c>
 80011fc:	42a9      	cmp	r1, r5
 80011fe:	d905      	bls.n	800120c <_malloc_r+0x28>
 8001200:	230c      	movs	r3, #12
 8001202:	603b      	str	r3, [r7, #0]
 8001204:	2600      	movs	r6, #0
 8001206:	4630      	mov	r0, r6
 8001208:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800120c:	4e2e      	ldr	r6, [pc, #184]	; (80012c8 <_malloc_r+0xe4>)
 800120e:	f000 f89d 	bl	800134c <__malloc_lock>
 8001212:	6833      	ldr	r3, [r6, #0]
 8001214:	461c      	mov	r4, r3
 8001216:	bb34      	cbnz	r4, 8001266 <_malloc_r+0x82>
 8001218:	4629      	mov	r1, r5
 800121a:	4638      	mov	r0, r7
 800121c:	f7ff ffc2 	bl	80011a4 <sbrk_aligned>
 8001220:	1c43      	adds	r3, r0, #1
 8001222:	4604      	mov	r4, r0
 8001224:	d14d      	bne.n	80012c2 <_malloc_r+0xde>
 8001226:	6834      	ldr	r4, [r6, #0]
 8001228:	4626      	mov	r6, r4
 800122a:	2e00      	cmp	r6, #0
 800122c:	d140      	bne.n	80012b0 <_malloc_r+0xcc>
 800122e:	6823      	ldr	r3, [r4, #0]
 8001230:	4631      	mov	r1, r6
 8001232:	4638      	mov	r0, r7
 8001234:	eb04 0803 	add.w	r8, r4, r3
 8001238:	f000 f878 	bl	800132c <_sbrk_r>
 800123c:	4580      	cmp	r8, r0
 800123e:	d13a      	bne.n	80012b6 <_malloc_r+0xd2>
 8001240:	6821      	ldr	r1, [r4, #0]
 8001242:	3503      	adds	r5, #3
 8001244:	1a6d      	subs	r5, r5, r1
 8001246:	f025 0503 	bic.w	r5, r5, #3
 800124a:	3508      	adds	r5, #8
 800124c:	2d0c      	cmp	r5, #12
 800124e:	bf38      	it	cc
 8001250:	250c      	movcc	r5, #12
 8001252:	4629      	mov	r1, r5
 8001254:	4638      	mov	r0, r7
 8001256:	f7ff ffa5 	bl	80011a4 <sbrk_aligned>
 800125a:	3001      	adds	r0, #1
 800125c:	d02b      	beq.n	80012b6 <_malloc_r+0xd2>
 800125e:	6823      	ldr	r3, [r4, #0]
 8001260:	442b      	add	r3, r5
 8001262:	6023      	str	r3, [r4, #0]
 8001264:	e00e      	b.n	8001284 <_malloc_r+0xa0>
 8001266:	6822      	ldr	r2, [r4, #0]
 8001268:	1b52      	subs	r2, r2, r5
 800126a:	d41e      	bmi.n	80012aa <_malloc_r+0xc6>
 800126c:	2a0b      	cmp	r2, #11
 800126e:	d916      	bls.n	800129e <_malloc_r+0xba>
 8001270:	1961      	adds	r1, r4, r5
 8001272:	42a3      	cmp	r3, r4
 8001274:	6025      	str	r5, [r4, #0]
 8001276:	bf18      	it	ne
 8001278:	6059      	strne	r1, [r3, #4]
 800127a:	6863      	ldr	r3, [r4, #4]
 800127c:	bf08      	it	eq
 800127e:	6031      	streq	r1, [r6, #0]
 8001280:	5162      	str	r2, [r4, r5]
 8001282:	604b      	str	r3, [r1, #4]
 8001284:	4638      	mov	r0, r7
 8001286:	f104 060b 	add.w	r6, r4, #11
 800128a:	f000 f865 	bl	8001358 <__malloc_unlock>
 800128e:	f026 0607 	bic.w	r6, r6, #7
 8001292:	1d23      	adds	r3, r4, #4
 8001294:	1af2      	subs	r2, r6, r3
 8001296:	d0b6      	beq.n	8001206 <_malloc_r+0x22>
 8001298:	1b9b      	subs	r3, r3, r6
 800129a:	50a3      	str	r3, [r4, r2]
 800129c:	e7b3      	b.n	8001206 <_malloc_r+0x22>
 800129e:	6862      	ldr	r2, [r4, #4]
 80012a0:	42a3      	cmp	r3, r4
 80012a2:	bf0c      	ite	eq
 80012a4:	6032      	streq	r2, [r6, #0]
 80012a6:	605a      	strne	r2, [r3, #4]
 80012a8:	e7ec      	b.n	8001284 <_malloc_r+0xa0>
 80012aa:	4623      	mov	r3, r4
 80012ac:	6864      	ldr	r4, [r4, #4]
 80012ae:	e7b2      	b.n	8001216 <_malloc_r+0x32>
 80012b0:	4634      	mov	r4, r6
 80012b2:	6876      	ldr	r6, [r6, #4]
 80012b4:	e7b9      	b.n	800122a <_malloc_r+0x46>
 80012b6:	230c      	movs	r3, #12
 80012b8:	603b      	str	r3, [r7, #0]
 80012ba:	4638      	mov	r0, r7
 80012bc:	f000 f84c 	bl	8001358 <__malloc_unlock>
 80012c0:	e7a1      	b.n	8001206 <_malloc_r+0x22>
 80012c2:	6025      	str	r5, [r4, #0]
 80012c4:	e7de      	b.n	8001284 <_malloc_r+0xa0>
 80012c6:	bf00      	nop
 80012c8:	200000c0 	.word	0x200000c0

080012cc <_realloc_r>:
 80012cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80012d0:	4680      	mov	r8, r0
 80012d2:	4614      	mov	r4, r2
 80012d4:	460e      	mov	r6, r1
 80012d6:	b921      	cbnz	r1, 80012e2 <_realloc_r+0x16>
 80012d8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80012dc:	4611      	mov	r1, r2
 80012de:	f7ff bf81 	b.w	80011e4 <_malloc_r>
 80012e2:	b92a      	cbnz	r2, 80012f0 <_realloc_r+0x24>
 80012e4:	f7ff ff12 	bl	800110c <_free_r>
 80012e8:	4625      	mov	r5, r4
 80012ea:	4628      	mov	r0, r5
 80012ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80012f0:	f000 f838 	bl	8001364 <_malloc_usable_size_r>
 80012f4:	4284      	cmp	r4, r0
 80012f6:	4607      	mov	r7, r0
 80012f8:	d802      	bhi.n	8001300 <_realloc_r+0x34>
 80012fa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80012fe:	d812      	bhi.n	8001326 <_realloc_r+0x5a>
 8001300:	4621      	mov	r1, r4
 8001302:	4640      	mov	r0, r8
 8001304:	f7ff ff6e 	bl	80011e4 <_malloc_r>
 8001308:	4605      	mov	r5, r0
 800130a:	2800      	cmp	r0, #0
 800130c:	d0ed      	beq.n	80012ea <_realloc_r+0x1e>
 800130e:	42bc      	cmp	r4, r7
 8001310:	4622      	mov	r2, r4
 8001312:	4631      	mov	r1, r6
 8001314:	bf28      	it	cs
 8001316:	463a      	movcs	r2, r7
 8001318:	f7ff fed0 	bl	80010bc <memcpy>
 800131c:	4631      	mov	r1, r6
 800131e:	4640      	mov	r0, r8
 8001320:	f7ff fef4 	bl	800110c <_free_r>
 8001324:	e7e1      	b.n	80012ea <_realloc_r+0x1e>
 8001326:	4635      	mov	r5, r6
 8001328:	e7df      	b.n	80012ea <_realloc_r+0x1e>
	...

0800132c <_sbrk_r>:
 800132c:	b538      	push	{r3, r4, r5, lr}
 800132e:	4d06      	ldr	r5, [pc, #24]	; (8001348 <_sbrk_r+0x1c>)
 8001330:	2300      	movs	r3, #0
 8001332:	4604      	mov	r4, r0
 8001334:	4608      	mov	r0, r1
 8001336:	602b      	str	r3, [r5, #0]
 8001338:	f7ff fb00 	bl	800093c <_sbrk>
 800133c:	1c43      	adds	r3, r0, #1
 800133e:	d102      	bne.n	8001346 <_sbrk_r+0x1a>
 8001340:	682b      	ldr	r3, [r5, #0]
 8001342:	b103      	cbz	r3, 8001346 <_sbrk_r+0x1a>
 8001344:	6023      	str	r3, [r4, #0]
 8001346:	bd38      	pop	{r3, r4, r5, pc}
 8001348:	200000c8 	.word	0x200000c8

0800134c <__malloc_lock>:
 800134c:	4801      	ldr	r0, [pc, #4]	; (8001354 <__malloc_lock+0x8>)
 800134e:	f000 b811 	b.w	8001374 <__retarget_lock_acquire_recursive>
 8001352:	bf00      	nop
 8001354:	200000cc 	.word	0x200000cc

08001358 <__malloc_unlock>:
 8001358:	4801      	ldr	r0, [pc, #4]	; (8001360 <__malloc_unlock+0x8>)
 800135a:	f000 b80c 	b.w	8001376 <__retarget_lock_release_recursive>
 800135e:	bf00      	nop
 8001360:	200000cc 	.word	0x200000cc

08001364 <_malloc_usable_size_r>:
 8001364:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001368:	1f18      	subs	r0, r3, #4
 800136a:	2b00      	cmp	r3, #0
 800136c:	bfbc      	itt	lt
 800136e:	580b      	ldrlt	r3, [r1, r0]
 8001370:	18c0      	addlt	r0, r0, r3
 8001372:	4770      	bx	lr

08001374 <__retarget_lock_acquire_recursive>:
 8001374:	4770      	bx	lr

08001376 <__retarget_lock_release_recursive>:
 8001376:	4770      	bx	lr

08001378 <_init>:
 8001378:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800137a:	bf00      	nop
 800137c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800137e:	bc08      	pop	{r3}
 8001380:	469e      	mov	lr, r3
 8001382:	4770      	bx	lr

08001384 <_fini>:
 8001384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001386:	bf00      	nop
 8001388:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800138a:	bc08      	pop	{r3}
 800138c:	469e      	mov	lr, r3
 800138e:	4770      	bx	lr
