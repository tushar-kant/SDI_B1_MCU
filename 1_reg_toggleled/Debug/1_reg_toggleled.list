
1_reg_toggleled.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000002ec  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000484  08000484  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000484  08000484  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08000484  08000484  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000484  08000484  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000484  08000484  00010484  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000488  08000488  00010488  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  0800048c  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000004  08000490  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  08000490  00020024  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   000017e7  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000624  00000000  00000000  0002181b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001f8  00000000  00000000  00021e40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000001b0  00000000  00000000  00022038  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00013f2b  00000000  00000000  000221e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001fed  00000000  00000000  00036113  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008058e  00000000  00000000  00038100  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000b868e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000060c  00000000  00000000  000b86e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000004 	.word	0x20000004
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800046c 	.word	0x0800046c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000008 	.word	0x20000008
 80001d4:	0800046c 	.word	0x0800046c

080001d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80001d8:	b480      	push	{r7}
 80001da:	b083      	sub	sp, #12
 80001dc:	af00      	add	r7, sp, #0
 80001de:	4603      	mov	r3, r0
 80001e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001e6:	2b00      	cmp	r3, #0
 80001e8:	db0b      	blt.n	8000202 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80001ea:	79fb      	ldrb	r3, [r7, #7]
 80001ec:	f003 021f 	and.w	r2, r3, #31
 80001f0:	4907      	ldr	r1, [pc, #28]	; (8000210 <__NVIC_EnableIRQ+0x38>)
 80001f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001f6:	095b      	lsrs	r3, r3, #5
 80001f8:	2001      	movs	r0, #1
 80001fa:	fa00 f202 	lsl.w	r2, r0, r2
 80001fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000202:	bf00      	nop
 8000204:	370c      	adds	r7, #12
 8000206:	46bd      	mov	sp, r7
 8000208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800020c:	4770      	bx	lr
 800020e:	bf00      	nop
 8000210:	e000e100 	.word	0xe000e100

08000214 <delay>:



#include "main.h"

void delay(int T){
 8000214:	b480      	push	{r7}
 8000216:	b085      	sub	sp, #20
 8000218:	af00      	add	r7, sp, #0
 800021a:	6078      	str	r0, [r7, #4]
	while(T--){
 800021c:	e00a      	b.n	8000234 <delay+0x20>
		for(int i=0;i<3000;i++);}
 800021e:	2300      	movs	r3, #0
 8000220:	60fb      	str	r3, [r7, #12]
 8000222:	e002      	b.n	800022a <delay+0x16>
 8000224:	68fb      	ldr	r3, [r7, #12]
 8000226:	3301      	adds	r3, #1
 8000228:	60fb      	str	r3, [r7, #12]
 800022a:	68fb      	ldr	r3, [r7, #12]
 800022c:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8000230:	4293      	cmp	r3, r2
 8000232:	ddf7      	ble.n	8000224 <delay+0x10>
	while(T--){
 8000234:	687b      	ldr	r3, [r7, #4]
 8000236:	1e5a      	subs	r2, r3, #1
 8000238:	607a      	str	r2, [r7, #4]
 800023a:	2b00      	cmp	r3, #0
 800023c:	d1ef      	bne.n	800021e <delay+0xa>
}
 800023e:	bf00      	nop
 8000240:	bf00      	nop
 8000242:	3714      	adds	r7, #20
 8000244:	46bd      	mov	sp, r7
 8000246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800024a:	4770      	bx	lr

0800024c <LED_Init>:
void LED_Init()
{
 800024c:	b480      	push	{r7}
 800024e:	af00      	add	r7, sp, #0
	RCC->AHB1ENR  |=0x1;
 8000250:	4b08      	ldr	r3, [pc, #32]	; (8000274 <LED_Init+0x28>)
 8000252:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000254:	4a07      	ldr	r2, [pc, #28]	; (8000274 <LED_Init+0x28>)
 8000256:	f043 0301 	orr.w	r3, r3, #1
 800025a:	6313      	str	r3, [r2, #48]	; 0x30
	GPIOA->MODER   |= 0x400;
 800025c:	4b06      	ldr	r3, [pc, #24]	; (8000278 <LED_Init+0x2c>)
 800025e:	681b      	ldr	r3, [r3, #0]
 8000260:	4a05      	ldr	r2, [pc, #20]	; (8000278 <LED_Init+0x2c>)
 8000262:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000266:	6013      	str	r3, [r2, #0]
}
 8000268:	bf00      	nop
 800026a:	46bd      	mov	sp, r7
 800026c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000270:	4770      	bx	lr
 8000272:	bf00      	nop
 8000274:	40023800 	.word	0x40023800
 8000278:	40020000 	.word	0x40020000

0800027c <Button_Init>:
void Button_Init(){
 800027c:	b480      	push	{r7}
 800027e:	af00      	add	r7, sp, #0
		RCC->AHB1ENR  |=0x4;
 8000280:	4b07      	ldr	r3, [pc, #28]	; (80002a0 <Button_Init+0x24>)
 8000282:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000284:	4a06      	ldr	r2, [pc, #24]	; (80002a0 <Button_Init+0x24>)
 8000286:	f043 0304 	orr.w	r3, r3, #4
 800028a:	6313      	str	r3, [r2, #48]	; 0x30
		GPIOC->MODER   |= 0x0;
 800028c:	4b05      	ldr	r3, [pc, #20]	; (80002a4 <Button_Init+0x28>)
 800028e:	4a05      	ldr	r2, [pc, #20]	; (80002a4 <Button_Init+0x28>)
 8000290:	681b      	ldr	r3, [r3, #0]
 8000292:	6013      	str	r3, [r2, #0]
}
 8000294:	bf00      	nop
 8000296:	46bd      	mov	sp, r7
 8000298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop
 80002a0:	40023800 	.word	0x40023800
 80002a4:	40020800 	.word	0x40020800

080002a8 <EXTI_myirq>:
void Toggle_pin(){
	GPIOA->ODR ^=0x20;
	delay(100);
}
void EXTI_myirq(void){
 80002a8:	b580      	push	{r7, lr}
 80002aa:	af00      	add	r7, sp, #0
		GPIOA->ODR ^=0x20;
 80002ac:	4b08      	ldr	r3, [pc, #32]	; (80002d0 <EXTI_myirq+0x28>)
 80002ae:	695b      	ldr	r3, [r3, #20]
 80002b0:	4a07      	ldr	r2, [pc, #28]	; (80002d0 <EXTI_myirq+0x28>)
 80002b2:	f083 0320 	eor.w	r3, r3, #32
 80002b6:	6153      	str	r3, [r2, #20]
		delay(100);
 80002b8:	2064      	movs	r0, #100	; 0x64
 80002ba:	f7ff ffab 	bl	8000214 <delay>
		EXTI->PR |=0x2000;
 80002be:	4b05      	ldr	r3, [pc, #20]	; (80002d4 <EXTI_myirq+0x2c>)
 80002c0:	695b      	ldr	r3, [r3, #20]
 80002c2:	4a04      	ldr	r2, [pc, #16]	; (80002d4 <EXTI_myirq+0x2c>)
 80002c4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80002c8:	6153      	str	r3, [r2, #20]
	}
 80002ca:	bf00      	nop
 80002cc:	bd80      	pop	{r7, pc}
 80002ce:	bf00      	nop
 80002d0:	40020000 	.word	0x40020000
 80002d4:	40013c00 	.word	0x40013c00

080002d8 <main>:
int main(){
 80002d8:	b580      	push	{r7, lr}
 80002da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80002dc:	b672      	cpsid	i
}
 80002de:	bf00      	nop
	__disable_irq();
		LED_Init();
 80002e0:	f7ff ffb4 	bl	800024c <LED_Init>
		Button_Init();
 80002e4:	f7ff ffca 	bl	800027c <Button_Init>
	RCC->APB2ENR |=0x4000;
 80002e8:	4b0e      	ldr	r3, [pc, #56]	; (8000324 <main+0x4c>)
 80002ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80002ec:	4a0d      	ldr	r2, [pc, #52]	; (8000324 <main+0x4c>)
 80002ee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80002f2:	6453      	str	r3, [r2, #68]	; 0x44
	SYSCFG->EXTICR[3] |= 0x20;
 80002f4:	4b0c      	ldr	r3, [pc, #48]	; (8000328 <main+0x50>)
 80002f6:	695b      	ldr	r3, [r3, #20]
 80002f8:	4a0b      	ldr	r2, [pc, #44]	; (8000328 <main+0x50>)
 80002fa:	f043 0320 	orr.w	r3, r3, #32
 80002fe:	6153      	str	r3, [r2, #20]
	EXTI->IMR |=0x2000;
 8000300:	4b0a      	ldr	r3, [pc, #40]	; (800032c <main+0x54>)
 8000302:	681b      	ldr	r3, [r3, #0]
 8000304:	4a09      	ldr	r2, [pc, #36]	; (800032c <main+0x54>)
 8000306:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800030a:	6013      	str	r3, [r2, #0]
	EXTI->FTSR |=0x2000;
 800030c:	4b07      	ldr	r3, [pc, #28]	; (800032c <main+0x54>)
 800030e:	68db      	ldr	r3, [r3, #12]
 8000310:	4a06      	ldr	r2, [pc, #24]	; (800032c <main+0x54>)
 8000312:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000316:	60d3      	str	r3, [r2, #12]

	NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000318:	2028      	movs	r0, #40	; 0x28
 800031a:	f7ff ff5d 	bl	80001d8 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 800031e:	b662      	cpsie	i
}
 8000320:	bf00      	nop
	__enable_irq();


	while(1)
 8000322:	e7fe      	b.n	8000322 <main+0x4a>
 8000324:	40023800 	.word	0x40023800
 8000328:	40013800 	.word	0x40013800
 800032c:	40013c00 	.word	0x40013c00

08000330 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000330:	b480      	push	{r7}
 8000332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000334:	e7fe      	b.n	8000334 <NMI_Handler+0x4>

08000336 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000336:	b480      	push	{r7}
 8000338:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800033a:	e7fe      	b.n	800033a <HardFault_Handler+0x4>

0800033c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800033c:	b480      	push	{r7}
 800033e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000340:	e7fe      	b.n	8000340 <MemManage_Handler+0x4>

08000342 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000342:	b480      	push	{r7}
 8000344:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000346:	e7fe      	b.n	8000346 <BusFault_Handler+0x4>

08000348 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000348:	b480      	push	{r7}
 800034a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800034c:	e7fe      	b.n	800034c <UsageFault_Handler+0x4>

0800034e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800034e:	b480      	push	{r7}
 8000350:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000352:	bf00      	nop
 8000354:	46bd      	mov	sp, r7
 8000356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800035a:	4770      	bx	lr

0800035c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800035c:	b480      	push	{r7}
 800035e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000360:	bf00      	nop
 8000362:	46bd      	mov	sp, r7
 8000364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000368:	4770      	bx	lr

0800036a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800036a:	b480      	push	{r7}
 800036c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800036e:	bf00      	nop
 8000370:	46bd      	mov	sp, r7
 8000372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000376:	4770      	bx	lr

08000378 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000378:	b580      	push	{r7, lr}
 800037a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800037c:	f000 f83e 	bl	80003fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000380:	bf00      	nop
 8000382:	bd80      	pop	{r7, pc}

08000384 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000384:	b480      	push	{r7}
 8000386:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000388:	4b06      	ldr	r3, [pc, #24]	; (80003a4 <SystemInit+0x20>)
 800038a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800038e:	4a05      	ldr	r2, [pc, #20]	; (80003a4 <SystemInit+0x20>)
 8000390:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000394:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000398:	bf00      	nop
 800039a:	46bd      	mov	sp, r7
 800039c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a0:	4770      	bx	lr
 80003a2:	bf00      	nop
 80003a4:	e000ed00 	.word	0xe000ed00

080003a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80003a8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80003e0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80003ac:	480d      	ldr	r0, [pc, #52]	; (80003e4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80003ae:	490e      	ldr	r1, [pc, #56]	; (80003e8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80003b0:	4a0e      	ldr	r2, [pc, #56]	; (80003ec <LoopFillZerobss+0x1e>)
  movs r3, #0
 80003b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003b4:	e002      	b.n	80003bc <LoopCopyDataInit>

080003b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003ba:	3304      	adds	r3, #4

080003bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003c0:	d3f9      	bcc.n	80003b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003c2:	4a0b      	ldr	r2, [pc, #44]	; (80003f0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80003c4:	4c0b      	ldr	r4, [pc, #44]	; (80003f4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80003c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003c8:	e001      	b.n	80003ce <LoopFillZerobss>

080003ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003cc:	3204      	adds	r2, #4

080003ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003d0:	d3fb      	bcc.n	80003ca <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80003d2:	f7ff ffd7 	bl	8000384 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80003d6:	f000 f825 	bl	8000424 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80003da:	f7ff ff7d 	bl	80002d8 <main>
  bx  lr    
 80003de:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80003e0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80003e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003e8:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 80003ec:	0800048c 	.word	0x0800048c
  ldr r2, =_sbss
 80003f0:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 80003f4:	20000024 	.word	0x20000024

080003f8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80003f8:	e7fe      	b.n	80003f8 <ADC_IRQHandler>
	...

080003fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80003fc:	b480      	push	{r7}
 80003fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000400:	4b06      	ldr	r3, [pc, #24]	; (800041c <HAL_IncTick+0x20>)
 8000402:	781b      	ldrb	r3, [r3, #0]
 8000404:	461a      	mov	r2, r3
 8000406:	4b06      	ldr	r3, [pc, #24]	; (8000420 <HAL_IncTick+0x24>)
 8000408:	681b      	ldr	r3, [r3, #0]
 800040a:	4413      	add	r3, r2
 800040c:	4a04      	ldr	r2, [pc, #16]	; (8000420 <HAL_IncTick+0x24>)
 800040e:	6013      	str	r3, [r2, #0]
}
 8000410:	bf00      	nop
 8000412:	46bd      	mov	sp, r7
 8000414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000418:	4770      	bx	lr
 800041a:	bf00      	nop
 800041c:	20000000 	.word	0x20000000
 8000420:	20000020 	.word	0x20000020

08000424 <__libc_init_array>:
 8000424:	b570      	push	{r4, r5, r6, lr}
 8000426:	4d0d      	ldr	r5, [pc, #52]	; (800045c <__libc_init_array+0x38>)
 8000428:	4c0d      	ldr	r4, [pc, #52]	; (8000460 <__libc_init_array+0x3c>)
 800042a:	1b64      	subs	r4, r4, r5
 800042c:	10a4      	asrs	r4, r4, #2
 800042e:	2600      	movs	r6, #0
 8000430:	42a6      	cmp	r6, r4
 8000432:	d109      	bne.n	8000448 <__libc_init_array+0x24>
 8000434:	4d0b      	ldr	r5, [pc, #44]	; (8000464 <__libc_init_array+0x40>)
 8000436:	4c0c      	ldr	r4, [pc, #48]	; (8000468 <__libc_init_array+0x44>)
 8000438:	f000 f818 	bl	800046c <_init>
 800043c:	1b64      	subs	r4, r4, r5
 800043e:	10a4      	asrs	r4, r4, #2
 8000440:	2600      	movs	r6, #0
 8000442:	42a6      	cmp	r6, r4
 8000444:	d105      	bne.n	8000452 <__libc_init_array+0x2e>
 8000446:	bd70      	pop	{r4, r5, r6, pc}
 8000448:	f855 3b04 	ldr.w	r3, [r5], #4
 800044c:	4798      	blx	r3
 800044e:	3601      	adds	r6, #1
 8000450:	e7ee      	b.n	8000430 <__libc_init_array+0xc>
 8000452:	f855 3b04 	ldr.w	r3, [r5], #4
 8000456:	4798      	blx	r3
 8000458:	3601      	adds	r6, #1
 800045a:	e7f2      	b.n	8000442 <__libc_init_array+0x1e>
 800045c:	08000484 	.word	0x08000484
 8000460:	08000484 	.word	0x08000484
 8000464:	08000484 	.word	0x08000484
 8000468:	08000488 	.word	0x08000488

0800046c <_init>:
 800046c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800046e:	bf00      	nop
 8000470:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000472:	bc08      	pop	{r3}
 8000474:	469e      	mov	lr, r3
 8000476:	4770      	bx	lr

08000478 <_fini>:
 8000478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800047a:	bf00      	nop
 800047c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800047e:	bc08      	pop	{r3}
 8000480:	469e      	mov	lr, r3
 8000482:	4770      	bx	lr
