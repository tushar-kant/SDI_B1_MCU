
sevenseg-dis.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000548  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080006e0  080006e0  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080006e0  080006e0  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  080006e0  080006e0  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  080006e0  080006e0  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080006e0  080006e0  000106e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080006e4  080006e4  000106e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  080006e8  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000004  080006ec  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  080006ec  00020024  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001b2a  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000006db  00000000  00000000  00021b5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000220  00000000  00000000  00022240  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000001c8  00000000  00000000  00022460  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001407e  00000000  00000000  00022628  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002b30  00000000  00000000  000366a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00080630  00000000  00000000  000391d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000b9806  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000069c  00000000  00000000  000b9858  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000004 	.word	0x20000004
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080006c8 	.word	0x080006c8

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000008 	.word	0x20000008
 80001d4:	080006c8 	.word	0x080006c8

080001d8 <main>:
	{
		for(i=0;i<5000;i++);
	}
}
int main()
{
 80001d8:	b580      	push	{r7, lr}
 80001da:	af00      	add	r7, sp, #0
	int LED;
	RCC->AHB1ENR |= 4;
 80001dc:	4bc4      	ldr	r3, [pc, #784]	; (80004f0 <main+0x318>)
 80001de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80001e0:	4ac3      	ldr	r2, [pc, #780]	; (80004f0 <main+0x318>)
 80001e2:	f043 0304 	orr.w	r3, r3, #4
 80001e6:	6313      	str	r3, [r2, #48]	; 0x30
	GPIOC->MODER |= 0x400;
 80001e8:	4bc2      	ldr	r3, [pc, #776]	; (80004f4 <main+0x31c>)
 80001ea:	681b      	ldr	r3, [r3, #0]
 80001ec:	4ac1      	ldr	r2, [pc, #772]	; (80004f4 <main+0x31c>)
 80001ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80001f2:	6013      	str	r3, [r2, #0]
		//GPIOC->ODR |= 0x01010000;
		//delay(100);
//		GPIOA->ODR &= ~0x20;
//		delay(100);
		//FOR COUNT 0
			  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, 0);
 80001f4:	2200      	movs	r2, #0
 80001f6:	2101      	movs	r1, #1
 80001f8:	48be      	ldr	r0, [pc, #760]	; (80004f4 <main+0x31c>)
 80001fa:	f000 fa27 	bl	800064c <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, 0);
 80001fe:	2200      	movs	r2, #0
 8000200:	2102      	movs	r1, #2
 8000202:	48bc      	ldr	r0, [pc, #752]	; (80004f4 <main+0x31c>)
 8000204:	f000 fa22 	bl	800064c <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, 0);
 8000208:	2200      	movs	r2, #0
 800020a:	2104      	movs	r1, #4
 800020c:	48b9      	ldr	r0, [pc, #740]	; (80004f4 <main+0x31c>)
 800020e:	f000 fa1d 	bl	800064c <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, 0);
 8000212:	2200      	movs	r2, #0
 8000214:	2108      	movs	r1, #8
 8000216:	48b7      	ldr	r0, [pc, #732]	; (80004f4 <main+0x31c>)
 8000218:	f000 fa18 	bl	800064c <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, 0);
 800021c:	2200      	movs	r2, #0
 800021e:	2110      	movs	r1, #16
 8000220:	48b4      	ldr	r0, [pc, #720]	; (80004f4 <main+0x31c>)
 8000222:	f000 fa13 	bl	800064c <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, 0);
 8000226:	2200      	movs	r2, #0
 8000228:	2120      	movs	r1, #32
 800022a:	48b2      	ldr	r0, [pc, #712]	; (80004f4 <main+0x31c>)
 800022c:	f000 fa0e 	bl	800064c <HAL_GPIO_WritePin>
			  HAL_Delay(5000);
 8000230:	f241 3088 	movw	r0, #5000	; 0x1388
 8000234:	f000 f9e6 	bl	8000604 <HAL_Delay>
			  //FOR COUNT 1
			  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, 1);
 8000238:	2201      	movs	r2, #1
 800023a:	2101      	movs	r1, #1
 800023c:	48ad      	ldr	r0, [pc, #692]	; (80004f4 <main+0x31c>)
 800023e:	f000 fa05 	bl	800064c <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, 0);
 8000242:	2200      	movs	r2, #0
 8000244:	2102      	movs	r1, #2
 8000246:	48ab      	ldr	r0, [pc, #684]	; (80004f4 <main+0x31c>)
 8000248:	f000 fa00 	bl	800064c <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, 0);
 800024c:	2200      	movs	r2, #0
 800024e:	2104      	movs	r1, #4
 8000250:	48a8      	ldr	r0, [pc, #672]	; (80004f4 <main+0x31c>)
 8000252:	f000 f9fb 	bl	800064c <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, 1);
 8000256:	2201      	movs	r2, #1
 8000258:	2108      	movs	r1, #8
 800025a:	48a6      	ldr	r0, [pc, #664]	; (80004f4 <main+0x31c>)
 800025c:	f000 f9f6 	bl	800064c <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, 1);
 8000260:	2201      	movs	r2, #1
 8000262:	2110      	movs	r1, #16
 8000264:	48a3      	ldr	r0, [pc, #652]	; (80004f4 <main+0x31c>)
 8000266:	f000 f9f1 	bl	800064c <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, 1);
 800026a:	2201      	movs	r2, #1
 800026c:	2120      	movs	r1, #32
 800026e:	48a1      	ldr	r0, [pc, #644]	; (80004f4 <main+0x31c>)
 8000270:	f000 f9ec 	bl	800064c <HAL_GPIO_WritePin>
			  HAL_Delay(5000);
 8000274:	f241 3088 	movw	r0, #5000	; 0x1388
 8000278:	f000 f9c4 	bl	8000604 <HAL_Delay>
			  //FOR COUNT 2
			  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, 0);//A
 800027c:	2200      	movs	r2, #0
 800027e:	2101      	movs	r1, #1
 8000280:	489c      	ldr	r0, [pc, #624]	; (80004f4 <main+0x31c>)
 8000282:	f000 f9e3 	bl	800064c <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, 0);//B
 8000286:	2200      	movs	r2, #0
 8000288:	2102      	movs	r1, #2
 800028a:	489a      	ldr	r0, [pc, #616]	; (80004f4 <main+0x31c>)
 800028c:	f000 f9de 	bl	800064c <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, 1);//C
 8000290:	2201      	movs	r2, #1
 8000292:	2104      	movs	r1, #4
 8000294:	4897      	ldr	r0, [pc, #604]	; (80004f4 <main+0x31c>)
 8000296:	f000 f9d9 	bl	800064c <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, 0);//D
 800029a:	2200      	movs	r2, #0
 800029c:	2108      	movs	r1, #8
 800029e:	4895      	ldr	r0, [pc, #596]	; (80004f4 <main+0x31c>)
 80002a0:	f000 f9d4 	bl	800064c <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, 0);//E
 80002a4:	2200      	movs	r2, #0
 80002a6:	2110      	movs	r1, #16
 80002a8:	4892      	ldr	r0, [pc, #584]	; (80004f4 <main+0x31c>)
 80002aa:	f000 f9cf 	bl	800064c <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, 1);//F
 80002ae:	2201      	movs	r2, #1
 80002b0:	2120      	movs	r1, #32
 80002b2:	4890      	ldr	r0, [pc, #576]	; (80004f4 <main+0x31c>)
 80002b4:	f000 f9ca 	bl	800064c <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//G
 80002b8:	2200      	movs	r2, #0
 80002ba:	2140      	movs	r1, #64	; 0x40
 80002bc:	488d      	ldr	r0, [pc, #564]	; (80004f4 <main+0x31c>)
 80002be:	f000 f9c5 	bl	800064c <HAL_GPIO_WritePin>
			  HAL_Delay(5000);
 80002c2:	f241 3088 	movw	r0, #5000	; 0x1388
 80002c6:	f000 f99d 	bl	8000604 <HAL_Delay>
			  //FOR COUNT 3
			  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, 0);
 80002ca:	2200      	movs	r2, #0
 80002cc:	2101      	movs	r1, #1
 80002ce:	4889      	ldr	r0, [pc, #548]	; (80004f4 <main+0x31c>)
 80002d0:	f000 f9bc 	bl	800064c <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, 0);
 80002d4:	2200      	movs	r2, #0
 80002d6:	2102      	movs	r1, #2
 80002d8:	4886      	ldr	r0, [pc, #536]	; (80004f4 <main+0x31c>)
 80002da:	f000 f9b7 	bl	800064c <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, 0);
 80002de:	2200      	movs	r2, #0
 80002e0:	2104      	movs	r1, #4
 80002e2:	4884      	ldr	r0, [pc, #528]	; (80004f4 <main+0x31c>)
 80002e4:	f000 f9b2 	bl	800064c <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, 0);
 80002e8:	2200      	movs	r2, #0
 80002ea:	2108      	movs	r1, #8
 80002ec:	4881      	ldr	r0, [pc, #516]	; (80004f4 <main+0x31c>)
 80002ee:	f000 f9ad 	bl	800064c <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, 1);
 80002f2:	2201      	movs	r2, #1
 80002f4:	2110      	movs	r1, #16
 80002f6:	487f      	ldr	r0, [pc, #508]	; (80004f4 <main+0x31c>)
 80002f8:	f000 f9a8 	bl	800064c <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, 1);
 80002fc:	2201      	movs	r2, #1
 80002fe:	2120      	movs	r1, #32
 8000300:	487c      	ldr	r0, [pc, #496]	; (80004f4 <main+0x31c>)
 8000302:	f000 f9a3 	bl	800064c <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//G
 8000306:	2200      	movs	r2, #0
 8000308:	2140      	movs	r1, #64	; 0x40
 800030a:	487a      	ldr	r0, [pc, #488]	; (80004f4 <main+0x31c>)
 800030c:	f000 f99e 	bl	800064c <HAL_GPIO_WritePin>
			  HAL_Delay(5000);
 8000310:	f241 3088 	movw	r0, #5000	; 0x1388
 8000314:	f000 f976 	bl	8000604 <HAL_Delay>
			  //FOR COUNT 4
			  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, 1);
 8000318:	2201      	movs	r2, #1
 800031a:	2101      	movs	r1, #1
 800031c:	4875      	ldr	r0, [pc, #468]	; (80004f4 <main+0x31c>)
 800031e:	f000 f995 	bl	800064c <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, 0);
 8000322:	2200      	movs	r2, #0
 8000324:	2102      	movs	r1, #2
 8000326:	4873      	ldr	r0, [pc, #460]	; (80004f4 <main+0x31c>)
 8000328:	f000 f990 	bl	800064c <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, 0);
 800032c:	2200      	movs	r2, #0
 800032e:	2104      	movs	r1, #4
 8000330:	4870      	ldr	r0, [pc, #448]	; (80004f4 <main+0x31c>)
 8000332:	f000 f98b 	bl	800064c <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, 1);
 8000336:	2201      	movs	r2, #1
 8000338:	2108      	movs	r1, #8
 800033a:	486e      	ldr	r0, [pc, #440]	; (80004f4 <main+0x31c>)
 800033c:	f000 f986 	bl	800064c <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, 1);
 8000340:	2201      	movs	r2, #1
 8000342:	2110      	movs	r1, #16
 8000344:	486b      	ldr	r0, [pc, #428]	; (80004f4 <main+0x31c>)
 8000346:	f000 f981 	bl	800064c <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, 0);
 800034a:	2200      	movs	r2, #0
 800034c:	2120      	movs	r1, #32
 800034e:	4869      	ldr	r0, [pc, #420]	; (80004f4 <main+0x31c>)
 8000350:	f000 f97c 	bl	800064c <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//G
 8000354:	2200      	movs	r2, #0
 8000356:	2140      	movs	r1, #64	; 0x40
 8000358:	4866      	ldr	r0, [pc, #408]	; (80004f4 <main+0x31c>)
 800035a:	f000 f977 	bl	800064c <HAL_GPIO_WritePin>

			  HAL_Delay(5000);
 800035e:	f241 3088 	movw	r0, #5000	; 0x1388
 8000362:	f000 f94f 	bl	8000604 <HAL_Delay>
			  //FOR COUNT 5
			  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, 0);
 8000366:	2200      	movs	r2, #0
 8000368:	2101      	movs	r1, #1
 800036a:	4862      	ldr	r0, [pc, #392]	; (80004f4 <main+0x31c>)
 800036c:	f000 f96e 	bl	800064c <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, 1);
 8000370:	2201      	movs	r2, #1
 8000372:	2102      	movs	r1, #2
 8000374:	485f      	ldr	r0, [pc, #380]	; (80004f4 <main+0x31c>)
 8000376:	f000 f969 	bl	800064c <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, 0);
 800037a:	2200      	movs	r2, #0
 800037c:	2104      	movs	r1, #4
 800037e:	485d      	ldr	r0, [pc, #372]	; (80004f4 <main+0x31c>)
 8000380:	f000 f964 	bl	800064c <HAL_GPIO_WritePin>
	          HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, 0);
 8000384:	2200      	movs	r2, #0
 8000386:	2108      	movs	r1, #8
 8000388:	485a      	ldr	r0, [pc, #360]	; (80004f4 <main+0x31c>)
 800038a:	f000 f95f 	bl	800064c <HAL_GPIO_WritePin>
	          HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, 1);
 800038e:	2201      	movs	r2, #1
 8000390:	2110      	movs	r1, #16
 8000392:	4858      	ldr	r0, [pc, #352]	; (80004f4 <main+0x31c>)
 8000394:	f000 f95a 	bl	800064c <HAL_GPIO_WritePin>
	          HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, 0);
 8000398:	2200      	movs	r2, #0
 800039a:	2120      	movs	r1, #32
 800039c:	4855      	ldr	r0, [pc, #340]	; (80004f4 <main+0x31c>)
 800039e:	f000 f955 	bl	800064c <HAL_GPIO_WritePin>
	          HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//G
 80003a2:	2200      	movs	r2, #0
 80003a4:	2140      	movs	r1, #64	; 0x40
 80003a6:	4853      	ldr	r0, [pc, #332]	; (80004f4 <main+0x31c>)
 80003a8:	f000 f950 	bl	800064c <HAL_GPIO_WritePin>

	          HAL_Delay(5000);
 80003ac:	f241 3088 	movw	r0, #5000	; 0x1388
 80003b0:	f000 f928 	bl	8000604 <HAL_Delay>
	          //FOR COUNT 6
	          HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, 0);
 80003b4:	2200      	movs	r2, #0
 80003b6:	2101      	movs	r1, #1
 80003b8:	484e      	ldr	r0, [pc, #312]	; (80004f4 <main+0x31c>)
 80003ba:	f000 f947 	bl	800064c <HAL_GPIO_WritePin>
	          HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, 1);
 80003be:	2201      	movs	r2, #1
 80003c0:	2102      	movs	r1, #2
 80003c2:	484c      	ldr	r0, [pc, #304]	; (80004f4 <main+0x31c>)
 80003c4:	f000 f942 	bl	800064c <HAL_GPIO_WritePin>
	          HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, 0);
 80003c8:	2200      	movs	r2, #0
 80003ca:	2104      	movs	r1, #4
 80003cc:	4849      	ldr	r0, [pc, #292]	; (80004f4 <main+0x31c>)
 80003ce:	f000 f93d 	bl	800064c <HAL_GPIO_WritePin>
	          HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, 0);
 80003d2:	2200      	movs	r2, #0
 80003d4:	2108      	movs	r1, #8
 80003d6:	4847      	ldr	r0, [pc, #284]	; (80004f4 <main+0x31c>)
 80003d8:	f000 f938 	bl	800064c <HAL_GPIO_WritePin>
	          HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, 0);
 80003dc:	2200      	movs	r2, #0
 80003de:	2110      	movs	r1, #16
 80003e0:	4844      	ldr	r0, [pc, #272]	; (80004f4 <main+0x31c>)
 80003e2:	f000 f933 	bl	800064c <HAL_GPIO_WritePin>
	          HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, 0);
 80003e6:	2200      	movs	r2, #0
 80003e8:	2120      	movs	r1, #32
 80003ea:	4842      	ldr	r0, [pc, #264]	; (80004f4 <main+0x31c>)
 80003ec:	f000 f92e 	bl	800064c <HAL_GPIO_WritePin>
	          HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//G
 80003f0:	2200      	movs	r2, #0
 80003f2:	2140      	movs	r1, #64	; 0x40
 80003f4:	483f      	ldr	r0, [pc, #252]	; (80004f4 <main+0x31c>)
 80003f6:	f000 f929 	bl	800064c <HAL_GPIO_WritePin>

	          HAL_Delay(5000);
 80003fa:	f241 3088 	movw	r0, #5000	; 0x1388
 80003fe:	f000 f901 	bl	8000604 <HAL_Delay>
	          //FOR COUNT 7
	          HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, 0);
 8000402:	2200      	movs	r2, #0
 8000404:	2101      	movs	r1, #1
 8000406:	483b      	ldr	r0, [pc, #236]	; (80004f4 <main+0x31c>)
 8000408:	f000 f920 	bl	800064c <HAL_GPIO_WritePin>
	          HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, 0);
 800040c:	2200      	movs	r2, #0
 800040e:	2102      	movs	r1, #2
 8000410:	4838      	ldr	r0, [pc, #224]	; (80004f4 <main+0x31c>)
 8000412:	f000 f91b 	bl	800064c <HAL_GPIO_WritePin>
	          HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, 0);
 8000416:	2200      	movs	r2, #0
 8000418:	2104      	movs	r1, #4
 800041a:	4836      	ldr	r0, [pc, #216]	; (80004f4 <main+0x31c>)
 800041c:	f000 f916 	bl	800064c <HAL_GPIO_WritePin>
	          HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, 1);
 8000420:	2201      	movs	r2, #1
 8000422:	2108      	movs	r1, #8
 8000424:	4833      	ldr	r0, [pc, #204]	; (80004f4 <main+0x31c>)
 8000426:	f000 f911 	bl	800064c <HAL_GPIO_WritePin>
	          HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, 1);
 800042a:	2201      	movs	r2, #1
 800042c:	2110      	movs	r1, #16
 800042e:	4831      	ldr	r0, [pc, #196]	; (80004f4 <main+0x31c>)
 8000430:	f000 f90c 	bl	800064c <HAL_GPIO_WritePin>
	          HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, 1);
 8000434:	2201      	movs	r2, #1
 8000436:	2120      	movs	r1, #32
 8000438:	482e      	ldr	r0, [pc, #184]	; (80004f4 <main+0x31c>)
 800043a:	f000 f907 	bl	800064c <HAL_GPIO_WritePin>
	          HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//G
 800043e:	2200      	movs	r2, #0
 8000440:	2140      	movs	r1, #64	; 0x40
 8000442:	482c      	ldr	r0, [pc, #176]	; (80004f4 <main+0x31c>)
 8000444:	f000 f902 	bl	800064c <HAL_GPIO_WritePin>

	          HAL_Delay(5000);
 8000448:	f241 3088 	movw	r0, #5000	; 0x1388
 800044c:	f000 f8da 	bl	8000604 <HAL_Delay>
	          //FOR COUNT 8
	          HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, 0);
 8000450:	2200      	movs	r2, #0
 8000452:	2101      	movs	r1, #1
 8000454:	4827      	ldr	r0, [pc, #156]	; (80004f4 <main+0x31c>)
 8000456:	f000 f8f9 	bl	800064c <HAL_GPIO_WritePin>
	          HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, 0);
 800045a:	2200      	movs	r2, #0
 800045c:	2102      	movs	r1, #2
 800045e:	4825      	ldr	r0, [pc, #148]	; (80004f4 <main+0x31c>)
 8000460:	f000 f8f4 	bl	800064c <HAL_GPIO_WritePin>
	          HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, 0);
 8000464:	2200      	movs	r2, #0
 8000466:	2104      	movs	r1, #4
 8000468:	4822      	ldr	r0, [pc, #136]	; (80004f4 <main+0x31c>)
 800046a:	f000 f8ef 	bl	800064c <HAL_GPIO_WritePin>
	          HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, 0);
 800046e:	2200      	movs	r2, #0
 8000470:	2108      	movs	r1, #8
 8000472:	4820      	ldr	r0, [pc, #128]	; (80004f4 <main+0x31c>)
 8000474:	f000 f8ea 	bl	800064c <HAL_GPIO_WritePin>
	          HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, 0);
 8000478:	2200      	movs	r2, #0
 800047a:	2110      	movs	r1, #16
 800047c:	481d      	ldr	r0, [pc, #116]	; (80004f4 <main+0x31c>)
 800047e:	f000 f8e5 	bl	800064c <HAL_GPIO_WritePin>
	          HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, 0);
 8000482:	2200      	movs	r2, #0
 8000484:	2120      	movs	r1, #32
 8000486:	481b      	ldr	r0, [pc, #108]	; (80004f4 <main+0x31c>)
 8000488:	f000 f8e0 	bl	800064c <HAL_GPIO_WritePin>
	          HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//G
 800048c:	2200      	movs	r2, #0
 800048e:	2140      	movs	r1, #64	; 0x40
 8000490:	4818      	ldr	r0, [pc, #96]	; (80004f4 <main+0x31c>)
 8000492:	f000 f8db 	bl	800064c <HAL_GPIO_WritePin>

	          HAL_Delay(5000);
 8000496:	f241 3088 	movw	r0, #5000	; 0x1388
 800049a:	f000 f8b3 	bl	8000604 <HAL_Delay>
	          //FOR COUNT 9
	          HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, 0);
 800049e:	2200      	movs	r2, #0
 80004a0:	2101      	movs	r1, #1
 80004a2:	4814      	ldr	r0, [pc, #80]	; (80004f4 <main+0x31c>)
 80004a4:	f000 f8d2 	bl	800064c <HAL_GPIO_WritePin>
	          HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, 0);
 80004a8:	2200      	movs	r2, #0
 80004aa:	2102      	movs	r1, #2
 80004ac:	4811      	ldr	r0, [pc, #68]	; (80004f4 <main+0x31c>)
 80004ae:	f000 f8cd 	bl	800064c <HAL_GPIO_WritePin>
	          HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, 0);
 80004b2:	2200      	movs	r2, #0
 80004b4:	2104      	movs	r1, #4
 80004b6:	480f      	ldr	r0, [pc, #60]	; (80004f4 <main+0x31c>)
 80004b8:	f000 f8c8 	bl	800064c <HAL_GPIO_WritePin>
	          HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, 0);
 80004bc:	2200      	movs	r2, #0
 80004be:	2108      	movs	r1, #8
 80004c0:	480c      	ldr	r0, [pc, #48]	; (80004f4 <main+0x31c>)
 80004c2:	f000 f8c3 	bl	800064c <HAL_GPIO_WritePin>
	          HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, 1);
 80004c6:	2201      	movs	r2, #1
 80004c8:	2110      	movs	r1, #16
 80004ca:	480a      	ldr	r0, [pc, #40]	; (80004f4 <main+0x31c>)
 80004cc:	f000 f8be 	bl	800064c <HAL_GPIO_WritePin>
	          HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, 0);
 80004d0:	2200      	movs	r2, #0
 80004d2:	2120      	movs	r1, #32
 80004d4:	4807      	ldr	r0, [pc, #28]	; (80004f4 <main+0x31c>)
 80004d6:	f000 f8b9 	bl	800064c <HAL_GPIO_WritePin>
	          HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//G
 80004da:	2200      	movs	r2, #0
 80004dc:	2140      	movs	r1, #64	; 0x40
 80004de:	4805      	ldr	r0, [pc, #20]	; (80004f4 <main+0x31c>)
 80004e0:	f000 f8b4 	bl	800064c <HAL_GPIO_WritePin>
	          HAL_Delay(5000);
 80004e4:	f241 3088 	movw	r0, #5000	; 0x1388
 80004e8:	f000 f88c 	bl	8000604 <HAL_Delay>
			  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, 0);
 80004ec:	e682      	b.n	80001f4 <main+0x1c>
 80004ee:	bf00      	nop
 80004f0:	40023800 	.word	0x40023800
 80004f4:	40020800 	.word	0x40020800

080004f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004f8:	b480      	push	{r7}
 80004fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80004fc:	e7fe      	b.n	80004fc <NMI_Handler+0x4>

080004fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004fe:	b480      	push	{r7}
 8000500:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000502:	e7fe      	b.n	8000502 <HardFault_Handler+0x4>

08000504 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000504:	b480      	push	{r7}
 8000506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000508:	e7fe      	b.n	8000508 <MemManage_Handler+0x4>

0800050a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800050a:	b480      	push	{r7}
 800050c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800050e:	e7fe      	b.n	800050e <BusFault_Handler+0x4>

08000510 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000510:	b480      	push	{r7}
 8000512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000514:	e7fe      	b.n	8000514 <UsageFault_Handler+0x4>

08000516 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000516:	b480      	push	{r7}
 8000518:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800051a:	bf00      	nop
 800051c:	46bd      	mov	sp, r7
 800051e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000522:	4770      	bx	lr

08000524 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000524:	b480      	push	{r7}
 8000526:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000528:	bf00      	nop
 800052a:	46bd      	mov	sp, r7
 800052c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000530:	4770      	bx	lr

08000532 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000532:	b480      	push	{r7}
 8000534:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000536:	bf00      	nop
 8000538:	46bd      	mov	sp, r7
 800053a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800053e:	4770      	bx	lr

08000540 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000544:	f000 f83e 	bl	80005c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000548:	bf00      	nop
 800054a:	bd80      	pop	{r7, pc}

0800054c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800054c:	b480      	push	{r7}
 800054e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000550:	4b06      	ldr	r3, [pc, #24]	; (800056c <SystemInit+0x20>)
 8000552:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000556:	4a05      	ldr	r2, [pc, #20]	; (800056c <SystemInit+0x20>)
 8000558:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800055c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000560:	bf00      	nop
 8000562:	46bd      	mov	sp, r7
 8000564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop
 800056c:	e000ed00 	.word	0xe000ed00

08000570 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000570:	f8df d034 	ldr.w	sp, [pc, #52]	; 80005a8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000574:	480d      	ldr	r0, [pc, #52]	; (80005ac <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000576:	490e      	ldr	r1, [pc, #56]	; (80005b0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000578:	4a0e      	ldr	r2, [pc, #56]	; (80005b4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800057a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800057c:	e002      	b.n	8000584 <LoopCopyDataInit>

0800057e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800057e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000580:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000582:	3304      	adds	r3, #4

08000584 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000584:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000586:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000588:	d3f9      	bcc.n	800057e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800058a:	4a0b      	ldr	r2, [pc, #44]	; (80005b8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800058c:	4c0b      	ldr	r4, [pc, #44]	; (80005bc <LoopFillZerobss+0x26>)
  movs r3, #0
 800058e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000590:	e001      	b.n	8000596 <LoopFillZerobss>

08000592 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000592:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000594:	3204      	adds	r2, #4

08000596 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000596:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000598:	d3fb      	bcc.n	8000592 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800059a:	f7ff ffd7 	bl	800054c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800059e:	f000 f86f 	bl	8000680 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80005a2:	f7ff fe19 	bl	80001d8 <main>
  bx  lr    
 80005a6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80005a8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80005ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005b0:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 80005b4:	080006e8 	.word	0x080006e8
  ldr r2, =_sbss
 80005b8:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 80005bc:	20000024 	.word	0x20000024

080005c0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80005c0:	e7fe      	b.n	80005c0 <ADC_IRQHandler>
	...

080005c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005c4:	b480      	push	{r7}
 80005c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80005c8:	4b06      	ldr	r3, [pc, #24]	; (80005e4 <HAL_IncTick+0x20>)
 80005ca:	781b      	ldrb	r3, [r3, #0]
 80005cc:	461a      	mov	r2, r3
 80005ce:	4b06      	ldr	r3, [pc, #24]	; (80005e8 <HAL_IncTick+0x24>)
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	4413      	add	r3, r2
 80005d4:	4a04      	ldr	r2, [pc, #16]	; (80005e8 <HAL_IncTick+0x24>)
 80005d6:	6013      	str	r3, [r2, #0]
}
 80005d8:	bf00      	nop
 80005da:	46bd      	mov	sp, r7
 80005dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop
 80005e4:	20000000 	.word	0x20000000
 80005e8:	20000020 	.word	0x20000020

080005ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005ec:	b480      	push	{r7}
 80005ee:	af00      	add	r7, sp, #0
  return uwTick;
 80005f0:	4b03      	ldr	r3, [pc, #12]	; (8000600 <HAL_GetTick+0x14>)
 80005f2:	681b      	ldr	r3, [r3, #0]
}
 80005f4:	4618      	mov	r0, r3
 80005f6:	46bd      	mov	sp, r7
 80005f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fc:	4770      	bx	lr
 80005fe:	bf00      	nop
 8000600:	20000020 	.word	0x20000020

08000604 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b084      	sub	sp, #16
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800060c:	f7ff ffee 	bl	80005ec <HAL_GetTick>
 8000610:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000616:	68fb      	ldr	r3, [r7, #12]
 8000618:	f1b3 3fff 	cmp.w	r3, #4294967295
 800061c:	d005      	beq.n	800062a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800061e:	4b0a      	ldr	r3, [pc, #40]	; (8000648 <HAL_Delay+0x44>)
 8000620:	781b      	ldrb	r3, [r3, #0]
 8000622:	461a      	mov	r2, r3
 8000624:	68fb      	ldr	r3, [r7, #12]
 8000626:	4413      	add	r3, r2
 8000628:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800062a:	bf00      	nop
 800062c:	f7ff ffde 	bl	80005ec <HAL_GetTick>
 8000630:	4602      	mov	r2, r0
 8000632:	68bb      	ldr	r3, [r7, #8]
 8000634:	1ad3      	subs	r3, r2, r3
 8000636:	68fa      	ldr	r2, [r7, #12]
 8000638:	429a      	cmp	r2, r3
 800063a:	d8f7      	bhi.n	800062c <HAL_Delay+0x28>
  {
  }
}
 800063c:	bf00      	nop
 800063e:	bf00      	nop
 8000640:	3710      	adds	r7, #16
 8000642:	46bd      	mov	sp, r7
 8000644:	bd80      	pop	{r7, pc}
 8000646:	bf00      	nop
 8000648:	20000000 	.word	0x20000000

0800064c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800064c:	b480      	push	{r7}
 800064e:	b083      	sub	sp, #12
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
 8000654:	460b      	mov	r3, r1
 8000656:	807b      	strh	r3, [r7, #2]
 8000658:	4613      	mov	r3, r2
 800065a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800065c:	787b      	ldrb	r3, [r7, #1]
 800065e:	2b00      	cmp	r3, #0
 8000660:	d003      	beq.n	800066a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000662:	887a      	ldrh	r2, [r7, #2]
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000668:	e003      	b.n	8000672 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800066a:	887b      	ldrh	r3, [r7, #2]
 800066c:	041a      	lsls	r2, r3, #16
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	619a      	str	r2, [r3, #24]
}
 8000672:	bf00      	nop
 8000674:	370c      	adds	r7, #12
 8000676:	46bd      	mov	sp, r7
 8000678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067c:	4770      	bx	lr
	...

08000680 <__libc_init_array>:
 8000680:	b570      	push	{r4, r5, r6, lr}
 8000682:	4d0d      	ldr	r5, [pc, #52]	; (80006b8 <__libc_init_array+0x38>)
 8000684:	4c0d      	ldr	r4, [pc, #52]	; (80006bc <__libc_init_array+0x3c>)
 8000686:	1b64      	subs	r4, r4, r5
 8000688:	10a4      	asrs	r4, r4, #2
 800068a:	2600      	movs	r6, #0
 800068c:	42a6      	cmp	r6, r4
 800068e:	d109      	bne.n	80006a4 <__libc_init_array+0x24>
 8000690:	4d0b      	ldr	r5, [pc, #44]	; (80006c0 <__libc_init_array+0x40>)
 8000692:	4c0c      	ldr	r4, [pc, #48]	; (80006c4 <__libc_init_array+0x44>)
 8000694:	f000 f818 	bl	80006c8 <_init>
 8000698:	1b64      	subs	r4, r4, r5
 800069a:	10a4      	asrs	r4, r4, #2
 800069c:	2600      	movs	r6, #0
 800069e:	42a6      	cmp	r6, r4
 80006a0:	d105      	bne.n	80006ae <__libc_init_array+0x2e>
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80006a8:	4798      	blx	r3
 80006aa:	3601      	adds	r6, #1
 80006ac:	e7ee      	b.n	800068c <__libc_init_array+0xc>
 80006ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80006b2:	4798      	blx	r3
 80006b4:	3601      	adds	r6, #1
 80006b6:	e7f2      	b.n	800069e <__libc_init_array+0x1e>
 80006b8:	080006e0 	.word	0x080006e0
 80006bc:	080006e0 	.word	0x080006e0
 80006c0:	080006e0 	.word	0x080006e0
 80006c4:	080006e4 	.word	0x080006e4

080006c8 <_init>:
 80006c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80006ca:	bf00      	nop
 80006cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80006ce:	bc08      	pop	{r3}
 80006d0:	469e      	mov	lr, r3
 80006d2:	4770      	bx	lr

080006d4 <_fini>:
 80006d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80006d6:	bf00      	nop
 80006d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80006da:	bc08      	pop	{r3}
 80006dc:	469e      	mov	lr, r3
 80006de:	4770      	bx	lr
