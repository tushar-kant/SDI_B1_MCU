
01_ADC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002168  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08002300  08002300  00012300  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002310  08002310  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08002310  08002310  00012310  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002318  08002318  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002318  08002318  00012318  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800231c  0800231c  0001231c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002320  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000006c  2000000c  0800232c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000078  0800232c  00020078  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000065ba  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000141c  00000000  00000000  000265f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000590  00000000  00000000  00027a18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000004e8  00000000  00000000  00027fa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015804  00000000  00000000  00028490  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00006bd8  00000000  00000000  0003dc94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b0e9  00000000  00000000  0004486c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000cf955  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000150c  00000000  00000000  000cf9a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000000c 	.word	0x2000000c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080022e8 	.word	0x080022e8

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000010 	.word	0x20000010
 80001d4:	080022e8 	.word	0x080022e8

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b974 	b.w	80004d8 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468e      	mov	lr, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14d      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000216:	428a      	cmp	r2, r1
 8000218:	4694      	mov	ip, r2
 800021a:	d969      	bls.n	80002f0 <__udivmoddi4+0xe8>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b152      	cbz	r2, 8000238 <__udivmoddi4+0x30>
 8000222:	fa01 f302 	lsl.w	r3, r1, r2
 8000226:	f1c2 0120 	rsb	r1, r2, #32
 800022a:	fa20 f101 	lsr.w	r1, r0, r1
 800022e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000232:	ea41 0e03 	orr.w	lr, r1, r3
 8000236:	4094      	lsls	r4, r2
 8000238:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800023c:	0c21      	lsrs	r1, r4, #16
 800023e:	fbbe f6f8 	udiv	r6, lr, r8
 8000242:	fa1f f78c 	uxth.w	r7, ip
 8000246:	fb08 e316 	mls	r3, r8, r6, lr
 800024a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024e:	fb06 f107 	mul.w	r1, r6, r7
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f106 30ff 	add.w	r0, r6, #4294967295
 800025e:	f080 811f 	bcs.w	80004a0 <__udivmoddi4+0x298>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 811c 	bls.w	80004a0 <__udivmoddi4+0x298>
 8000268:	3e02      	subs	r6, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a5b      	subs	r3, r3, r1
 800026e:	b2a4      	uxth	r4, r4
 8000270:	fbb3 f0f8 	udiv	r0, r3, r8
 8000274:	fb08 3310 	mls	r3, r8, r0, r3
 8000278:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800027c:	fb00 f707 	mul.w	r7, r0, r7
 8000280:	42a7      	cmp	r7, r4
 8000282:	d90a      	bls.n	800029a <__udivmoddi4+0x92>
 8000284:	eb1c 0404 	adds.w	r4, ip, r4
 8000288:	f100 33ff 	add.w	r3, r0, #4294967295
 800028c:	f080 810a 	bcs.w	80004a4 <__udivmoddi4+0x29c>
 8000290:	42a7      	cmp	r7, r4
 8000292:	f240 8107 	bls.w	80004a4 <__udivmoddi4+0x29c>
 8000296:	4464      	add	r4, ip
 8000298:	3802      	subs	r0, #2
 800029a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029e:	1be4      	subs	r4, r4, r7
 80002a0:	2600      	movs	r6, #0
 80002a2:	b11d      	cbz	r5, 80002ac <__udivmoddi4+0xa4>
 80002a4:	40d4      	lsrs	r4, r2
 80002a6:	2300      	movs	r3, #0
 80002a8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ac:	4631      	mov	r1, r6
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d909      	bls.n	80002ca <__udivmoddi4+0xc2>
 80002b6:	2d00      	cmp	r5, #0
 80002b8:	f000 80ef 	beq.w	800049a <__udivmoddi4+0x292>
 80002bc:	2600      	movs	r6, #0
 80002be:	e9c5 0100 	strd	r0, r1, [r5]
 80002c2:	4630      	mov	r0, r6
 80002c4:	4631      	mov	r1, r6
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	fab3 f683 	clz	r6, r3
 80002ce:	2e00      	cmp	r6, #0
 80002d0:	d14a      	bne.n	8000368 <__udivmoddi4+0x160>
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xd4>
 80002d6:	4282      	cmp	r2, r0
 80002d8:	f200 80f9 	bhi.w	80004ce <__udivmoddi4+0x2c6>
 80002dc:	1a84      	subs	r4, r0, r2
 80002de:	eb61 0303 	sbc.w	r3, r1, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	469e      	mov	lr, r3
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	d0e0      	beq.n	80002ac <__udivmoddi4+0xa4>
 80002ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ee:	e7dd      	b.n	80002ac <__udivmoddi4+0xa4>
 80002f0:	b902      	cbnz	r2, 80002f4 <__udivmoddi4+0xec>
 80002f2:	deff      	udf	#255	; 0xff
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f040 8092 	bne.w	8000422 <__udivmoddi4+0x21a>
 80002fe:	eba1 010c 	sub.w	r1, r1, ip
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2601      	movs	r6, #1
 800030c:	0c20      	lsrs	r0, r4, #16
 800030e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000312:	fb07 1113 	mls	r1, r7, r3, r1
 8000316:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800031a:	fb0e f003 	mul.w	r0, lr, r3
 800031e:	4288      	cmp	r0, r1
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x12c>
 8000322:	eb1c 0101 	adds.w	r1, ip, r1
 8000326:	f103 38ff 	add.w	r8, r3, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x12a>
 800032c:	4288      	cmp	r0, r1
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2c0>
 8000332:	4643      	mov	r3, r8
 8000334:	1a09      	subs	r1, r1, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb1 f0f7 	udiv	r0, r1, r7
 800033c:	fb07 1110 	mls	r1, r7, r0, r1
 8000340:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x156>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 31ff 	add.w	r1, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x154>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2ca>
 800035c:	4608      	mov	r0, r1
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000366:	e79c      	b.n	80002a2 <__udivmoddi4+0x9a>
 8000368:	f1c6 0720 	rsb	r7, r6, #32
 800036c:	40b3      	lsls	r3, r6
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa20 f407 	lsr.w	r4, r0, r7
 800037a:	fa01 f306 	lsl.w	r3, r1, r6
 800037e:	431c      	orrs	r4, r3
 8000380:	40f9      	lsrs	r1, r7
 8000382:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000386:	fa00 f306 	lsl.w	r3, r0, r6
 800038a:	fbb1 f8f9 	udiv	r8, r1, r9
 800038e:	0c20      	lsrs	r0, r4, #16
 8000390:	fa1f fe8c 	uxth.w	lr, ip
 8000394:	fb09 1118 	mls	r1, r9, r8, r1
 8000398:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800039c:	fb08 f00e 	mul.w	r0, r8, lr
 80003a0:	4288      	cmp	r0, r1
 80003a2:	fa02 f206 	lsl.w	r2, r2, r6
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b8>
 80003a8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2bc>
 80003b4:	4288      	cmp	r0, r1
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2bc>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4461      	add	r1, ip
 80003c0:	1a09      	subs	r1, r1, r0
 80003c2:	b2a4      	uxth	r4, r4
 80003c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c8:	fb09 1110 	mls	r1, r9, r0, r1
 80003cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d4:	458e      	cmp	lr, r1
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1e2>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2b4>
 80003e2:	458e      	cmp	lr, r1
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2b4>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4461      	add	r1, ip
 80003ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ee:	fba0 9402 	umull	r9, r4, r0, r2
 80003f2:	eba1 010e 	sub.w	r1, r1, lr
 80003f6:	42a1      	cmp	r1, r4
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46a6      	mov	lr, r4
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x2a4>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x2a0>
 8000400:	b15d      	cbz	r5, 800041a <__udivmoddi4+0x212>
 8000402:	ebb3 0208 	subs.w	r2, r3, r8
 8000406:	eb61 010e 	sbc.w	r1, r1, lr
 800040a:	fa01 f707 	lsl.w	r7, r1, r7
 800040e:	fa22 f306 	lsr.w	r3, r2, r6
 8000412:	40f1      	lsrs	r1, r6
 8000414:	431f      	orrs	r7, r3
 8000416:	e9c5 7100 	strd	r7, r1, [r5]
 800041a:	2600      	movs	r6, #0
 800041c:	4631      	mov	r1, r6
 800041e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000422:	f1c2 0320 	rsb	r3, r2, #32
 8000426:	40d8      	lsrs	r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa21 f303 	lsr.w	r3, r1, r3
 8000430:	4091      	lsls	r1, r2
 8000432:	4301      	orrs	r1, r0
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000440:	fb07 3610 	mls	r6, r7, r0, r3
 8000444:	0c0b      	lsrs	r3, r1, #16
 8000446:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800044a:	fb00 f60e 	mul.w	r6, r0, lr
 800044e:	429e      	cmp	r6, r3
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x260>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b8>
 8000460:	429e      	cmp	r6, r3
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b8>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1b9b      	subs	r3, r3, r6
 800046a:	b289      	uxth	r1, r1
 800046c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000470:	fb07 3316 	mls	r3, r7, r6, r3
 8000474:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000478:	fb06 f30e 	mul.w	r3, r6, lr
 800047c:	428b      	cmp	r3, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x28a>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f106 38ff 	add.w	r8, r6, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 800048a:	428b      	cmp	r3, r1
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800048e:	3e02      	subs	r6, #2
 8000490:	4461      	add	r1, ip
 8000492:	1ac9      	subs	r1, r1, r3
 8000494:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0x104>
 800049a:	462e      	mov	r6, r5
 800049c:	4628      	mov	r0, r5
 800049e:	e705      	b.n	80002ac <__udivmoddi4+0xa4>
 80004a0:	4606      	mov	r6, r0
 80004a2:	e6e3      	b.n	800026c <__udivmoddi4+0x64>
 80004a4:	4618      	mov	r0, r3
 80004a6:	e6f8      	b.n	800029a <__udivmoddi4+0x92>
 80004a8:	454b      	cmp	r3, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f8>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b4:	3801      	subs	r0, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f8>
 80004b8:	4646      	mov	r6, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x28a>
 80004bc:	4620      	mov	r0, r4
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1e2>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x260>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b8>
 80004c8:	3b02      	subs	r3, #2
 80004ca:	4461      	add	r1, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x12c>
 80004ce:	4630      	mov	r0, r6
 80004d0:	e709      	b.n	80002e6 <__udivmoddi4+0xde>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x156>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004e0:	f000 fa30 	bl	8000944 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e4:	f000 f836 	bl	8000554 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e8:	f000 f8e4 	bl	80006b4 <MX_GPIO_Init>
  MX_ADC1_Init();
 80004ec:	f000 f890 	bl	8000610 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_IT(&hadc1);
 80004f0:	4806      	ldr	r0, [pc, #24]	; (800050c <main+0x30>)
 80004f2:	f000 fb91 	bl	8000c18 <HAL_ADC_Start_IT>
			while (1)
			  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
				HAL_ADC_Start(&hadc1);
 80004f6:	4805      	ldr	r0, [pc, #20]	; (800050c <main+0x30>)
 80004f8:	f000 fada 	bl	8000ab0 <HAL_ADC_Start>

				adc_value = HAL_ADC_GetValue(&hadc1);
 80004fc:	4803      	ldr	r0, [pc, #12]	; (800050c <main+0x30>)
 80004fe:	f000 fd59 	bl	8000fb4 <HAL_ADC_GetValue>
 8000502:	4603      	mov	r3, r0
 8000504:	b29a      	uxth	r2, r3
 8000506:	4b02      	ldr	r3, [pc, #8]	; (8000510 <main+0x34>)
 8000508:	801a      	strh	r2, [r3, #0]
				HAL_ADC_Start(&hadc1);
 800050a:	e7f4      	b.n	80004f6 <main+0x1a>
 800050c:	20000028 	.word	0x20000028
 8000510:	20000070 	.word	0x20000070

08000514 <HAL_ADC_ConvCpltCallback>:

			  }
  /* USER CODE END 3 */
}
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b084      	sub	sp, #16
 8000518:	af00      	add	r7, sp, #0
 800051a:	6078      	str	r0, [r7, #4]
 uint16_t adcVal = HAL_ADC_GetValue(&hadc1);
 800051c:	480b      	ldr	r0, [pc, #44]	; (800054c <HAL_ADC_ConvCpltCallback+0x38>)
 800051e:	f000 fd49 	bl	8000fb4 <HAL_ADC_GetValue>
 8000522:	4603      	mov	r3, r0
 8000524:	81fb      	strh	r3, [r7, #14]
 if(adcVal > 2040)
 8000526:	89fb      	ldrh	r3, [r7, #14]
 8000528:	f5b3 6fff 	cmp.w	r3, #2040	; 0x7f8
 800052c:	d905      	bls.n	800053a <HAL_ADC_ConvCpltCallback+0x26>
 {
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1);
 800052e:	2201      	movs	r2, #1
 8000530:	2120      	movs	r1, #32
 8000532:	4807      	ldr	r0, [pc, #28]	; (8000550 <HAL_ADC_ConvCpltCallback+0x3c>)
 8000534:	f001 fa2e 	bl	8001994 <HAL_GPIO_WritePin>
 }
 else{
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
 }
}
 8000538:	e004      	b.n	8000544 <HAL_ADC_ConvCpltCallback+0x30>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
 800053a:	2200      	movs	r2, #0
 800053c:	2120      	movs	r1, #32
 800053e:	4804      	ldr	r0, [pc, #16]	; (8000550 <HAL_ADC_ConvCpltCallback+0x3c>)
 8000540:	f001 fa28 	bl	8001994 <HAL_GPIO_WritePin>
}
 8000544:	bf00      	nop
 8000546:	3710      	adds	r7, #16
 8000548:	46bd      	mov	sp, r7
 800054a:	bd80      	pop	{r7, pc}
 800054c:	20000028 	.word	0x20000028
 8000550:	40020000 	.word	0x40020000

08000554 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b094      	sub	sp, #80	; 0x50
 8000558:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800055a:	f107 0320 	add.w	r3, r7, #32
 800055e:	2230      	movs	r2, #48	; 0x30
 8000560:	2100      	movs	r1, #0
 8000562:	4618      	mov	r0, r3
 8000564:	f001 feb8 	bl	80022d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000568:	f107 030c 	add.w	r3, r7, #12
 800056c:	2200      	movs	r2, #0
 800056e:	601a      	str	r2, [r3, #0]
 8000570:	605a      	str	r2, [r3, #4]
 8000572:	609a      	str	r2, [r3, #8]
 8000574:	60da      	str	r2, [r3, #12]
 8000576:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000578:	2300      	movs	r3, #0
 800057a:	60bb      	str	r3, [r7, #8]
 800057c:	4b22      	ldr	r3, [pc, #136]	; (8000608 <SystemClock_Config+0xb4>)
 800057e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000580:	4a21      	ldr	r2, [pc, #132]	; (8000608 <SystemClock_Config+0xb4>)
 8000582:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000586:	6413      	str	r3, [r2, #64]	; 0x40
 8000588:	4b1f      	ldr	r3, [pc, #124]	; (8000608 <SystemClock_Config+0xb4>)
 800058a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800058c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000590:	60bb      	str	r3, [r7, #8]
 8000592:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000594:	2300      	movs	r3, #0
 8000596:	607b      	str	r3, [r7, #4]
 8000598:	4b1c      	ldr	r3, [pc, #112]	; (800060c <SystemClock_Config+0xb8>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	4a1b      	ldr	r2, [pc, #108]	; (800060c <SystemClock_Config+0xb8>)
 800059e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80005a2:	6013      	str	r3, [r2, #0]
 80005a4:	4b19      	ldr	r3, [pc, #100]	; (800060c <SystemClock_Config+0xb8>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005ac:	607b      	str	r3, [r7, #4]
 80005ae:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005b0:	2302      	movs	r3, #2
 80005b2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005b4:	2301      	movs	r3, #1
 80005b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005b8:	2310      	movs	r3, #16
 80005ba:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005bc:	2300      	movs	r3, #0
 80005be:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005c0:	f107 0320 	add.w	r3, r7, #32
 80005c4:	4618      	mov	r0, r3
 80005c6:	f001 f9ff 	bl	80019c8 <HAL_RCC_OscConfig>
 80005ca:	4603      	mov	r3, r0
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d001      	beq.n	80005d4 <SystemClock_Config+0x80>
  {
    Error_Handler();
 80005d0:	f000 f8ce 	bl	8000770 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005d4:	230f      	movs	r3, #15
 80005d6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80005d8:	2300      	movs	r3, #0
 80005da:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005dc:	2300      	movs	r3, #0
 80005de:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005e4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005e6:	2300      	movs	r3, #0
 80005e8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005ea:	f107 030c 	add.w	r3, r7, #12
 80005ee:	2100      	movs	r1, #0
 80005f0:	4618      	mov	r0, r3
 80005f2:	f001 fc61 	bl	8001eb8 <HAL_RCC_ClockConfig>
 80005f6:	4603      	mov	r3, r0
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d001      	beq.n	8000600 <SystemClock_Config+0xac>
  {
    Error_Handler();
 80005fc:	f000 f8b8 	bl	8000770 <Error_Handler>
  }
}
 8000600:	bf00      	nop
 8000602:	3750      	adds	r7, #80	; 0x50
 8000604:	46bd      	mov	sp, r7
 8000606:	bd80      	pop	{r7, pc}
 8000608:	40023800 	.word	0x40023800
 800060c:	40007000 	.word	0x40007000

08000610 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b084      	sub	sp, #16
 8000614:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000616:	463b      	mov	r3, r7
 8000618:	2200      	movs	r2, #0
 800061a:	601a      	str	r2, [r3, #0]
 800061c:	605a      	str	r2, [r3, #4]
 800061e:	609a      	str	r2, [r3, #8]
 8000620:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000622:	4b21      	ldr	r3, [pc, #132]	; (80006a8 <MX_ADC1_Init+0x98>)
 8000624:	4a21      	ldr	r2, [pc, #132]	; (80006ac <MX_ADC1_Init+0x9c>)
 8000626:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000628:	4b1f      	ldr	r3, [pc, #124]	; (80006a8 <MX_ADC1_Init+0x98>)
 800062a:	2200      	movs	r2, #0
 800062c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800062e:	4b1e      	ldr	r3, [pc, #120]	; (80006a8 <MX_ADC1_Init+0x98>)
 8000630:	2200      	movs	r2, #0
 8000632:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000634:	4b1c      	ldr	r3, [pc, #112]	; (80006a8 <MX_ADC1_Init+0x98>)
 8000636:	2200      	movs	r2, #0
 8000638:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800063a:	4b1b      	ldr	r3, [pc, #108]	; (80006a8 <MX_ADC1_Init+0x98>)
 800063c:	2201      	movs	r2, #1
 800063e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000640:	4b19      	ldr	r3, [pc, #100]	; (80006a8 <MX_ADC1_Init+0x98>)
 8000642:	2200      	movs	r2, #0
 8000644:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000648:	4b17      	ldr	r3, [pc, #92]	; (80006a8 <MX_ADC1_Init+0x98>)
 800064a:	2200      	movs	r2, #0
 800064c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800064e:	4b16      	ldr	r3, [pc, #88]	; (80006a8 <MX_ADC1_Init+0x98>)
 8000650:	4a17      	ldr	r2, [pc, #92]	; (80006b0 <MX_ADC1_Init+0xa0>)
 8000652:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000654:	4b14      	ldr	r3, [pc, #80]	; (80006a8 <MX_ADC1_Init+0x98>)
 8000656:	2200      	movs	r2, #0
 8000658:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800065a:	4b13      	ldr	r3, [pc, #76]	; (80006a8 <MX_ADC1_Init+0x98>)
 800065c:	2201      	movs	r2, #1
 800065e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000660:	4b11      	ldr	r3, [pc, #68]	; (80006a8 <MX_ADC1_Init+0x98>)
 8000662:	2200      	movs	r2, #0
 8000664:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000668:	4b0f      	ldr	r3, [pc, #60]	; (80006a8 <MX_ADC1_Init+0x98>)
 800066a:	2201      	movs	r2, #1
 800066c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800066e:	480e      	ldr	r0, [pc, #56]	; (80006a8 <MX_ADC1_Init+0x98>)
 8000670:	f000 f9da 	bl	8000a28 <HAL_ADC_Init>
 8000674:	4603      	mov	r3, r0
 8000676:	2b00      	cmp	r3, #0
 8000678:	d001      	beq.n	800067e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800067a:	f000 f879 	bl	8000770 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800067e:	2300      	movs	r3, #0
 8000680:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000682:	2301      	movs	r3, #1
 8000684:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8000686:	2307      	movs	r3, #7
 8000688:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800068a:	463b      	mov	r3, r7
 800068c:	4619      	mov	r1, r3
 800068e:	4806      	ldr	r0, [pc, #24]	; (80006a8 <MX_ADC1_Init+0x98>)
 8000690:	f000 fcb2 	bl	8000ff8 <HAL_ADC_ConfigChannel>
 8000694:	4603      	mov	r3, r0
 8000696:	2b00      	cmp	r3, #0
 8000698:	d001      	beq.n	800069e <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800069a:	f000 f869 	bl	8000770 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800069e:	bf00      	nop
 80006a0:	3710      	adds	r7, #16
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}
 80006a6:	bf00      	nop
 80006a8:	20000028 	.word	0x20000028
 80006ac:	40012000 	.word	0x40012000
 80006b0:	0f000001 	.word	0x0f000001

080006b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b08a      	sub	sp, #40	; 0x28
 80006b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ba:	f107 0314 	add.w	r3, r7, #20
 80006be:	2200      	movs	r2, #0
 80006c0:	601a      	str	r2, [r3, #0]
 80006c2:	605a      	str	r2, [r3, #4]
 80006c4:	609a      	str	r2, [r3, #8]
 80006c6:	60da      	str	r2, [r3, #12]
 80006c8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006ca:	2300      	movs	r3, #0
 80006cc:	613b      	str	r3, [r7, #16]
 80006ce:	4b26      	ldr	r3, [pc, #152]	; (8000768 <MX_GPIO_Init+0xb4>)
 80006d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d2:	4a25      	ldr	r2, [pc, #148]	; (8000768 <MX_GPIO_Init+0xb4>)
 80006d4:	f043 0304 	orr.w	r3, r3, #4
 80006d8:	6313      	str	r3, [r2, #48]	; 0x30
 80006da:	4b23      	ldr	r3, [pc, #140]	; (8000768 <MX_GPIO_Init+0xb4>)
 80006dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006de:	f003 0304 	and.w	r3, r3, #4
 80006e2:	613b      	str	r3, [r7, #16]
 80006e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006e6:	2300      	movs	r3, #0
 80006e8:	60fb      	str	r3, [r7, #12]
 80006ea:	4b1f      	ldr	r3, [pc, #124]	; (8000768 <MX_GPIO_Init+0xb4>)
 80006ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ee:	4a1e      	ldr	r2, [pc, #120]	; (8000768 <MX_GPIO_Init+0xb4>)
 80006f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006f4:	6313      	str	r3, [r2, #48]	; 0x30
 80006f6:	4b1c      	ldr	r3, [pc, #112]	; (8000768 <MX_GPIO_Init+0xb4>)
 80006f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006fe:	60fb      	str	r3, [r7, #12]
 8000700:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000702:	2300      	movs	r3, #0
 8000704:	60bb      	str	r3, [r7, #8]
 8000706:	4b18      	ldr	r3, [pc, #96]	; (8000768 <MX_GPIO_Init+0xb4>)
 8000708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070a:	4a17      	ldr	r2, [pc, #92]	; (8000768 <MX_GPIO_Init+0xb4>)
 800070c:	f043 0301 	orr.w	r3, r3, #1
 8000710:	6313      	str	r3, [r2, #48]	; 0x30
 8000712:	4b15      	ldr	r3, [pc, #84]	; (8000768 <MX_GPIO_Init+0xb4>)
 8000714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000716:	f003 0301 	and.w	r3, r3, #1
 800071a:	60bb      	str	r3, [r7, #8]
 800071c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800071e:	2300      	movs	r3, #0
 8000720:	607b      	str	r3, [r7, #4]
 8000722:	4b11      	ldr	r3, [pc, #68]	; (8000768 <MX_GPIO_Init+0xb4>)
 8000724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000726:	4a10      	ldr	r2, [pc, #64]	; (8000768 <MX_GPIO_Init+0xb4>)
 8000728:	f043 0302 	orr.w	r3, r3, #2
 800072c:	6313      	str	r3, [r2, #48]	; 0x30
 800072e:	4b0e      	ldr	r3, [pc, #56]	; (8000768 <MX_GPIO_Init+0xb4>)
 8000730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000732:	f003 0302 	and.w	r3, r3, #2
 8000736:	607b      	str	r3, [r7, #4]
 8000738:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800073a:	2200      	movs	r2, #0
 800073c:	2120      	movs	r1, #32
 800073e:	480b      	ldr	r0, [pc, #44]	; (800076c <MX_GPIO_Init+0xb8>)
 8000740:	f001 f928 	bl	8001994 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000744:	2320      	movs	r3, #32
 8000746:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000748:	2301      	movs	r3, #1
 800074a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800074c:	2300      	movs	r3, #0
 800074e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000750:	2300      	movs	r3, #0
 8000752:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000754:	f107 0314 	add.w	r3, r7, #20
 8000758:	4619      	mov	r1, r3
 800075a:	4804      	ldr	r0, [pc, #16]	; (800076c <MX_GPIO_Init+0xb8>)
 800075c:	f000 ff96 	bl	800168c <HAL_GPIO_Init>

}
 8000760:	bf00      	nop
 8000762:	3728      	adds	r7, #40	; 0x28
 8000764:	46bd      	mov	sp, r7
 8000766:	bd80      	pop	{r7, pc}
 8000768:	40023800 	.word	0x40023800
 800076c:	40020000 	.word	0x40020000

08000770 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000770:	b480      	push	{r7}
 8000772:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000774:	b672      	cpsid	i
}
 8000776:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000778:	e7fe      	b.n	8000778 <Error_Handler+0x8>
	...

0800077c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b082      	sub	sp, #8
 8000780:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000782:	2300      	movs	r3, #0
 8000784:	607b      	str	r3, [r7, #4]
 8000786:	4b10      	ldr	r3, [pc, #64]	; (80007c8 <HAL_MspInit+0x4c>)
 8000788:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800078a:	4a0f      	ldr	r2, [pc, #60]	; (80007c8 <HAL_MspInit+0x4c>)
 800078c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000790:	6453      	str	r3, [r2, #68]	; 0x44
 8000792:	4b0d      	ldr	r3, [pc, #52]	; (80007c8 <HAL_MspInit+0x4c>)
 8000794:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000796:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800079a:	607b      	str	r3, [r7, #4]
 800079c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800079e:	2300      	movs	r3, #0
 80007a0:	603b      	str	r3, [r7, #0]
 80007a2:	4b09      	ldr	r3, [pc, #36]	; (80007c8 <HAL_MspInit+0x4c>)
 80007a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007a6:	4a08      	ldr	r2, [pc, #32]	; (80007c8 <HAL_MspInit+0x4c>)
 80007a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007ac:	6413      	str	r3, [r2, #64]	; 0x40
 80007ae:	4b06      	ldr	r3, [pc, #24]	; (80007c8 <HAL_MspInit+0x4c>)
 80007b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007b6:	603b      	str	r3, [r7, #0]
 80007b8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80007ba:	2007      	movs	r0, #7
 80007bc:	f000 ff24 	bl	8001608 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007c0:	bf00      	nop
 80007c2:	3708      	adds	r7, #8
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bd80      	pop	{r7, pc}
 80007c8:	40023800 	.word	0x40023800

080007cc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b08a      	sub	sp, #40	; 0x28
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007d4:	f107 0314 	add.w	r3, r7, #20
 80007d8:	2200      	movs	r2, #0
 80007da:	601a      	str	r2, [r3, #0]
 80007dc:	605a      	str	r2, [r3, #4]
 80007de:	609a      	str	r2, [r3, #8]
 80007e0:	60da      	str	r2, [r3, #12]
 80007e2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	4a1b      	ldr	r2, [pc, #108]	; (8000858 <HAL_ADC_MspInit+0x8c>)
 80007ea:	4293      	cmp	r3, r2
 80007ec:	d12f      	bne.n	800084e <HAL_ADC_MspInit+0x82>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80007ee:	2300      	movs	r3, #0
 80007f0:	613b      	str	r3, [r7, #16]
 80007f2:	4b1a      	ldr	r3, [pc, #104]	; (800085c <HAL_ADC_MspInit+0x90>)
 80007f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007f6:	4a19      	ldr	r2, [pc, #100]	; (800085c <HAL_ADC_MspInit+0x90>)
 80007f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80007fc:	6453      	str	r3, [r2, #68]	; 0x44
 80007fe:	4b17      	ldr	r3, [pc, #92]	; (800085c <HAL_ADC_MspInit+0x90>)
 8000800:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000802:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000806:	613b      	str	r3, [r7, #16]
 8000808:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800080a:	2300      	movs	r3, #0
 800080c:	60fb      	str	r3, [r7, #12]
 800080e:	4b13      	ldr	r3, [pc, #76]	; (800085c <HAL_ADC_MspInit+0x90>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000812:	4a12      	ldr	r2, [pc, #72]	; (800085c <HAL_ADC_MspInit+0x90>)
 8000814:	f043 0301 	orr.w	r3, r3, #1
 8000818:	6313      	str	r3, [r2, #48]	; 0x30
 800081a:	4b10      	ldr	r3, [pc, #64]	; (800085c <HAL_ADC_MspInit+0x90>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081e:	f003 0301 	and.w	r3, r3, #1
 8000822:	60fb      	str	r3, [r7, #12]
 8000824:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000826:	2301      	movs	r3, #1
 8000828:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800082a:	2303      	movs	r3, #3
 800082c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082e:	2300      	movs	r3, #0
 8000830:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000832:	f107 0314 	add.w	r3, r7, #20
 8000836:	4619      	mov	r1, r3
 8000838:	4809      	ldr	r0, [pc, #36]	; (8000860 <HAL_ADC_MspInit+0x94>)
 800083a:	f000 ff27 	bl	800168c <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800083e:	2200      	movs	r2, #0
 8000840:	2100      	movs	r1, #0
 8000842:	2012      	movs	r0, #18
 8000844:	f000 feeb 	bl	800161e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000848:	2012      	movs	r0, #18
 800084a:	f000 ff04 	bl	8001656 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800084e:	bf00      	nop
 8000850:	3728      	adds	r7, #40	; 0x28
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}
 8000856:	bf00      	nop
 8000858:	40012000 	.word	0x40012000
 800085c:	40023800 	.word	0x40023800
 8000860:	40020000 	.word	0x40020000

08000864 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000864:	b480      	push	{r7}
 8000866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000868:	e7fe      	b.n	8000868 <NMI_Handler+0x4>

0800086a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800086a:	b480      	push	{r7}
 800086c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800086e:	e7fe      	b.n	800086e <HardFault_Handler+0x4>

08000870 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000870:	b480      	push	{r7}
 8000872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000874:	e7fe      	b.n	8000874 <MemManage_Handler+0x4>

08000876 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000876:	b480      	push	{r7}
 8000878:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800087a:	e7fe      	b.n	800087a <BusFault_Handler+0x4>

0800087c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800087c:	b480      	push	{r7}
 800087e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000880:	e7fe      	b.n	8000880 <UsageFault_Handler+0x4>

08000882 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000882:	b480      	push	{r7}
 8000884:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000886:	bf00      	nop
 8000888:	46bd      	mov	sp, r7
 800088a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088e:	4770      	bx	lr

08000890 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000890:	b480      	push	{r7}
 8000892:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000894:	bf00      	nop
 8000896:	46bd      	mov	sp, r7
 8000898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089c:	4770      	bx	lr

0800089e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800089e:	b480      	push	{r7}
 80008a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008a2:	bf00      	nop
 80008a4:	46bd      	mov	sp, r7
 80008a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008aa:	4770      	bx	lr

080008ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008b0:	f000 f89a 	bl	80009e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008b4:	bf00      	nop
 80008b6:	bd80      	pop	{r7, pc}

080008b8 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80008bc:	4802      	ldr	r0, [pc, #8]	; (80008c8 <ADC_IRQHandler+0x10>)
 80008be:	f000 fa69 	bl	8000d94 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80008c2:	bf00      	nop
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	20000028 	.word	0x20000028

080008cc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008cc:	b480      	push	{r7}
 80008ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80008d0:	4b06      	ldr	r3, [pc, #24]	; (80008ec <SystemInit+0x20>)
 80008d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80008d6:	4a05      	ldr	r2, [pc, #20]	; (80008ec <SystemInit+0x20>)
 80008d8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80008dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008e0:	bf00      	nop
 80008e2:	46bd      	mov	sp, r7
 80008e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e8:	4770      	bx	lr
 80008ea:	bf00      	nop
 80008ec:	e000ed00 	.word	0xe000ed00

080008f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80008f0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000928 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80008f4:	480d      	ldr	r0, [pc, #52]	; (800092c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80008f6:	490e      	ldr	r1, [pc, #56]	; (8000930 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80008f8:	4a0e      	ldr	r2, [pc, #56]	; (8000934 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80008fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008fc:	e002      	b.n	8000904 <LoopCopyDataInit>

080008fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000900:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000902:	3304      	adds	r3, #4

08000904 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000904:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000906:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000908:	d3f9      	bcc.n	80008fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800090a:	4a0b      	ldr	r2, [pc, #44]	; (8000938 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800090c:	4c0b      	ldr	r4, [pc, #44]	; (800093c <LoopFillZerobss+0x26>)
  movs r3, #0
 800090e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000910:	e001      	b.n	8000916 <LoopFillZerobss>

08000912 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000912:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000914:	3204      	adds	r2, #4

08000916 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000916:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000918:	d3fb      	bcc.n	8000912 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800091a:	f7ff ffd7 	bl	80008cc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800091e:	f001 fcb7 	bl	8002290 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000922:	f7ff fddb 	bl	80004dc <main>
  bx  lr    
 8000926:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000928:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800092c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000930:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000934:	08002320 	.word	0x08002320
  ldr r2, =_sbss
 8000938:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800093c:	20000078 	.word	0x20000078

08000940 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000940:	e7fe      	b.n	8000940 <DMA1_Stream0_IRQHandler>
	...

08000944 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000948:	4b0e      	ldr	r3, [pc, #56]	; (8000984 <HAL_Init+0x40>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	4a0d      	ldr	r2, [pc, #52]	; (8000984 <HAL_Init+0x40>)
 800094e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000952:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000954:	4b0b      	ldr	r3, [pc, #44]	; (8000984 <HAL_Init+0x40>)
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	4a0a      	ldr	r2, [pc, #40]	; (8000984 <HAL_Init+0x40>)
 800095a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800095e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000960:	4b08      	ldr	r3, [pc, #32]	; (8000984 <HAL_Init+0x40>)
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	4a07      	ldr	r2, [pc, #28]	; (8000984 <HAL_Init+0x40>)
 8000966:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800096a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800096c:	2003      	movs	r0, #3
 800096e:	f000 fe4b 	bl	8001608 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000972:	2000      	movs	r0, #0
 8000974:	f000 f808 	bl	8000988 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000978:	f7ff ff00 	bl	800077c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800097c:	2300      	movs	r3, #0
}
 800097e:	4618      	mov	r0, r3
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop
 8000984:	40023c00 	.word	0x40023c00

08000988 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b082      	sub	sp, #8
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000990:	4b12      	ldr	r3, [pc, #72]	; (80009dc <HAL_InitTick+0x54>)
 8000992:	681a      	ldr	r2, [r3, #0]
 8000994:	4b12      	ldr	r3, [pc, #72]	; (80009e0 <HAL_InitTick+0x58>)
 8000996:	781b      	ldrb	r3, [r3, #0]
 8000998:	4619      	mov	r1, r3
 800099a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800099e:	fbb3 f3f1 	udiv	r3, r3, r1
 80009a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80009a6:	4618      	mov	r0, r3
 80009a8:	f000 fe63 	bl	8001672 <HAL_SYSTICK_Config>
 80009ac:	4603      	mov	r3, r0
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d001      	beq.n	80009b6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80009b2:	2301      	movs	r3, #1
 80009b4:	e00e      	b.n	80009d4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	2b0f      	cmp	r3, #15
 80009ba:	d80a      	bhi.n	80009d2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009bc:	2200      	movs	r2, #0
 80009be:	6879      	ldr	r1, [r7, #4]
 80009c0:	f04f 30ff 	mov.w	r0, #4294967295
 80009c4:	f000 fe2b 	bl	800161e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009c8:	4a06      	ldr	r2, [pc, #24]	; (80009e4 <HAL_InitTick+0x5c>)
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80009ce:	2300      	movs	r3, #0
 80009d0:	e000      	b.n	80009d4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80009d2:	2301      	movs	r3, #1
}
 80009d4:	4618      	mov	r0, r3
 80009d6:	3708      	adds	r7, #8
 80009d8:	46bd      	mov	sp, r7
 80009da:	bd80      	pop	{r7, pc}
 80009dc:	20000000 	.word	0x20000000
 80009e0:	20000008 	.word	0x20000008
 80009e4:	20000004 	.word	0x20000004

080009e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009ec:	4b06      	ldr	r3, [pc, #24]	; (8000a08 <HAL_IncTick+0x20>)
 80009ee:	781b      	ldrb	r3, [r3, #0]
 80009f0:	461a      	mov	r2, r3
 80009f2:	4b06      	ldr	r3, [pc, #24]	; (8000a0c <HAL_IncTick+0x24>)
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	4413      	add	r3, r2
 80009f8:	4a04      	ldr	r2, [pc, #16]	; (8000a0c <HAL_IncTick+0x24>)
 80009fa:	6013      	str	r3, [r2, #0]
}
 80009fc:	bf00      	nop
 80009fe:	46bd      	mov	sp, r7
 8000a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a04:	4770      	bx	lr
 8000a06:	bf00      	nop
 8000a08:	20000008 	.word	0x20000008
 8000a0c:	20000074 	.word	0x20000074

08000a10 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	af00      	add	r7, sp, #0
  return uwTick;
 8000a14:	4b03      	ldr	r3, [pc, #12]	; (8000a24 <HAL_GetTick+0x14>)
 8000a16:	681b      	ldr	r3, [r3, #0]
}
 8000a18:	4618      	mov	r0, r3
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a20:	4770      	bx	lr
 8000a22:	bf00      	nop
 8000a24:	20000074 	.word	0x20000074

08000a28 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b084      	sub	sp, #16
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000a30:	2300      	movs	r3, #0
 8000a32:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d101      	bne.n	8000a3e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000a3a:	2301      	movs	r3, #1
 8000a3c:	e033      	b.n	8000aa6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d109      	bne.n	8000a5a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000a46:	6878      	ldr	r0, [r7, #4]
 8000a48:	f7ff fec0 	bl	80007cc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	2200      	movs	r2, #0
 8000a50:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	2200      	movs	r2, #0
 8000a56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a5e:	f003 0310 	and.w	r3, r3, #16
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d118      	bne.n	8000a98 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a6a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000a6e:	f023 0302 	bic.w	r3, r3, #2
 8000a72:	f043 0202 	orr.w	r2, r3, #2
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8000a7a:	6878      	ldr	r0, [r7, #4]
 8000a7c:	f000 fbee 	bl	800125c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	2200      	movs	r2, #0
 8000a84:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a8a:	f023 0303 	bic.w	r3, r3, #3
 8000a8e:	f043 0201 	orr.w	r2, r3, #1
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	641a      	str	r2, [r3, #64]	; 0x40
 8000a96:	e001      	b.n	8000a9c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000a98:	2301      	movs	r3, #1
 8000a9a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000aa4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	3710      	adds	r7, #16
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}
	...

08000ab0 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	b085      	sub	sp, #20
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000ac2:	2b01      	cmp	r3, #1
 8000ac4:	d101      	bne.n	8000aca <HAL_ADC_Start+0x1a>
 8000ac6:	2302      	movs	r3, #2
 8000ac8:	e097      	b.n	8000bfa <HAL_ADC_Start+0x14a>
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	2201      	movs	r2, #1
 8000ace:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	689b      	ldr	r3, [r3, #8]
 8000ad8:	f003 0301 	and.w	r3, r3, #1
 8000adc:	2b01      	cmp	r3, #1
 8000ade:	d018      	beq.n	8000b12 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	689a      	ldr	r2, [r3, #8]
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	f042 0201 	orr.w	r2, r2, #1
 8000aee:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000af0:	4b45      	ldr	r3, [pc, #276]	; (8000c08 <HAL_ADC_Start+0x158>)
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	4a45      	ldr	r2, [pc, #276]	; (8000c0c <HAL_ADC_Start+0x15c>)
 8000af6:	fba2 2303 	umull	r2, r3, r2, r3
 8000afa:	0c9a      	lsrs	r2, r3, #18
 8000afc:	4613      	mov	r3, r2
 8000afe:	005b      	lsls	r3, r3, #1
 8000b00:	4413      	add	r3, r2
 8000b02:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8000b04:	e002      	b.n	8000b0c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8000b06:	68bb      	ldr	r3, [r7, #8]
 8000b08:	3b01      	subs	r3, #1
 8000b0a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8000b0c:	68bb      	ldr	r3, [r7, #8]
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d1f9      	bne.n	8000b06 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	689b      	ldr	r3, [r3, #8]
 8000b18:	f003 0301 	and.w	r3, r3, #1
 8000b1c:	2b01      	cmp	r3, #1
 8000b1e:	d15f      	bne.n	8000be0 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b24:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000b28:	f023 0301 	bic.w	r3, r3, #1
 8000b2c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	685b      	ldr	r3, [r3, #4]
 8000b3a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d007      	beq.n	8000b52 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b46:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000b4a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b56:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000b5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000b5e:	d106      	bne.n	8000b6e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b64:	f023 0206 	bic.w	r2, r3, #6
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	645a      	str	r2, [r3, #68]	; 0x44
 8000b6c:	e002      	b.n	8000b74 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	2200      	movs	r2, #0
 8000b72:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	2200      	movs	r2, #0
 8000b78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000b7c:	4b24      	ldr	r3, [pc, #144]	; (8000c10 <HAL_ADC_Start+0x160>)
 8000b7e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8000b88:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8000b8a:	68fb      	ldr	r3, [r7, #12]
 8000b8c:	685b      	ldr	r3, [r3, #4]
 8000b8e:	f003 031f 	and.w	r3, r3, #31
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d10f      	bne.n	8000bb6 <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	689b      	ldr	r3, [r3, #8]
 8000b9c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d129      	bne.n	8000bf8 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	689a      	ldr	r2, [r3, #8]
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000bb2:	609a      	str	r2, [r3, #8]
 8000bb4:	e020      	b.n	8000bf8 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	4a16      	ldr	r2, [pc, #88]	; (8000c14 <HAL_ADC_Start+0x164>)
 8000bbc:	4293      	cmp	r3, r2
 8000bbe:	d11b      	bne.n	8000bf8 <HAL_ADC_Start+0x148>
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	689b      	ldr	r3, [r3, #8]
 8000bc6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d114      	bne.n	8000bf8 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	689a      	ldr	r2, [r3, #8]
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000bdc:	609a      	str	r2, [r3, #8]
 8000bde:	e00b      	b.n	8000bf8 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000be4:	f043 0210 	orr.w	r2, r3, #16
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bf0:	f043 0201 	orr.w	r2, r3, #1
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8000bf8:	2300      	movs	r3, #0
}
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	3714      	adds	r7, #20
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop
 8000c08:	20000000 	.word	0x20000000
 8000c0c:	431bde83 	.word	0x431bde83
 8000c10:	40012300 	.word	0x40012300
 8000c14:	40012000 	.word	0x40012000

08000c18 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	b085      	sub	sp, #20
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8000c20:	2300      	movs	r3, #0
 8000c22:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000c2a:	2b01      	cmp	r3, #1
 8000c2c:	d101      	bne.n	8000c32 <HAL_ADC_Start_IT+0x1a>
 8000c2e:	2302      	movs	r3, #2
 8000c30:	e0a1      	b.n	8000d76 <HAL_ADC_Start_IT+0x15e>
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	2201      	movs	r2, #1
 8000c36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	689b      	ldr	r3, [r3, #8]
 8000c40:	f003 0301 	and.w	r3, r3, #1
 8000c44:	2b01      	cmp	r3, #1
 8000c46:	d018      	beq.n	8000c7a <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	689a      	ldr	r2, [r3, #8]
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	f042 0201 	orr.w	r2, r2, #1
 8000c56:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000c58:	4b4a      	ldr	r3, [pc, #296]	; (8000d84 <HAL_ADC_Start_IT+0x16c>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	4a4a      	ldr	r2, [pc, #296]	; (8000d88 <HAL_ADC_Start_IT+0x170>)
 8000c5e:	fba2 2303 	umull	r2, r3, r2, r3
 8000c62:	0c9a      	lsrs	r2, r3, #18
 8000c64:	4613      	mov	r3, r2
 8000c66:	005b      	lsls	r3, r3, #1
 8000c68:	4413      	add	r3, r2
 8000c6a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8000c6c:	e002      	b.n	8000c74 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 8000c6e:	68bb      	ldr	r3, [r7, #8]
 8000c70:	3b01      	subs	r3, #1
 8000c72:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8000c74:	68bb      	ldr	r3, [r7, #8]
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d1f9      	bne.n	8000c6e <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	689b      	ldr	r3, [r3, #8]
 8000c80:	f003 0301 	and.w	r3, r3, #1
 8000c84:	2b01      	cmp	r3, #1
 8000c86:	d169      	bne.n	8000d5c <HAL_ADC_Start_IT+0x144>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c8c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000c90:	f023 0301 	bic.w	r3, r3, #1
 8000c94:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	685b      	ldr	r3, [r3, #4]
 8000ca2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d007      	beq.n	8000cba <HAL_ADC_Start_IT+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cae:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000cb2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cbe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000cc2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000cc6:	d106      	bne.n	8000cd6 <HAL_ADC_Start_IT+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ccc:	f023 0206 	bic.w	r2, r3, #6
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	645a      	str	r2, [r3, #68]	; 0x44
 8000cd4:	e002      	b.n	8000cdc <HAL_ADC_Start_IT+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	2200      	movs	r2, #0
 8000cda:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	2200      	movs	r2, #0
 8000ce0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000ce4:	4b29      	ldr	r3, [pc, #164]	; (8000d8c <HAL_ADC_Start_IT+0x174>)
 8000ce6:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8000cf0:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	685b      	ldr	r3, [r3, #4]
 8000cf8:	687a      	ldr	r2, [r7, #4]
 8000cfa:	6812      	ldr	r2, [r2, #0]
 8000cfc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000d00:	f043 0320 	orr.w	r3, r3, #32
 8000d04:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8000d06:	68fb      	ldr	r3, [r7, #12]
 8000d08:	685b      	ldr	r3, [r3, #4]
 8000d0a:	f003 031f 	and.w	r3, r3, #31
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d10f      	bne.n	8000d32 <HAL_ADC_Start_IT+0x11a>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	689b      	ldr	r3, [r3, #8]
 8000d18:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d129      	bne.n	8000d74 <HAL_ADC_Start_IT+0x15c>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	689a      	ldr	r2, [r3, #8]
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000d2e:	609a      	str	r2, [r3, #8]
 8000d30:	e020      	b.n	8000d74 <HAL_ADC_Start_IT+0x15c>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	4a16      	ldr	r2, [pc, #88]	; (8000d90 <HAL_ADC_Start_IT+0x178>)
 8000d38:	4293      	cmp	r3, r2
 8000d3a:	d11b      	bne.n	8000d74 <HAL_ADC_Start_IT+0x15c>
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	689b      	ldr	r3, [r3, #8]
 8000d42:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d114      	bne.n	8000d74 <HAL_ADC_Start_IT+0x15c>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	689a      	ldr	r2, [r3, #8]
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000d58:	609a      	str	r2, [r3, #8]
 8000d5a:	e00b      	b.n	8000d74 <HAL_ADC_Start_IT+0x15c>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d60:	f043 0210 	orr.w	r2, r3, #16
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d6c:	f043 0201 	orr.w	r2, r3, #1
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8000d74:	2300      	movs	r3, #0
}
 8000d76:	4618      	mov	r0, r3
 8000d78:	3714      	adds	r7, #20
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d80:	4770      	bx	lr
 8000d82:	bf00      	nop
 8000d84:	20000000 	.word	0x20000000
 8000d88:	431bde83 	.word	0x431bde83
 8000d8c:	40012300 	.word	0x40012300
 8000d90:	40012000 	.word	0x40012000

08000d94 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b086      	sub	sp, #24
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	617b      	str	r3, [r7, #20]
 8000da0:	2300      	movs	r3, #0
 8000da2:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	685b      	ldr	r3, [r3, #4]
 8000db2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	f003 0302 	and.w	r3, r3, #2
 8000dba:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8000dbc:	68bb      	ldr	r3, [r7, #8]
 8000dbe:	f003 0320 	and.w	r3, r3, #32
 8000dc2:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8000dc4:	697b      	ldr	r3, [r7, #20]
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d049      	beq.n	8000e5e <HAL_ADC_IRQHandler+0xca>
 8000dca:	693b      	ldr	r3, [r7, #16]
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d046      	beq.n	8000e5e <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dd4:	f003 0310 	and.w	r3, r3, #16
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d105      	bne.n	8000de8 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000de0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	689b      	ldr	r3, [r3, #8]
 8000dee:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d12b      	bne.n	8000e4e <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d127      	bne.n	8000e4e <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e04:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d006      	beq.n	8000e1a <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	689b      	ldr	r3, [r3, #8]
 8000e12:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d119      	bne.n	8000e4e <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	685a      	ldr	r2, [r3, #4]
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	f022 0220 	bic.w	r2, r2, #32
 8000e28:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e2e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e3a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d105      	bne.n	8000e4e <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e46:	f043 0201 	orr.w	r2, r3, #1
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8000e4e:	6878      	ldr	r0, [r7, #4]
 8000e50:	f7ff fb60 	bl	8000514 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	f06f 0212 	mvn.w	r2, #18
 8000e5c:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8000e5e:	68fb      	ldr	r3, [r7, #12]
 8000e60:	f003 0304 	and.w	r3, r3, #4
 8000e64:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8000e66:	68bb      	ldr	r3, [r7, #8]
 8000e68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e6c:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8000e6e:	697b      	ldr	r3, [r7, #20]
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d057      	beq.n	8000f24 <HAL_ADC_IRQHandler+0x190>
 8000e74:	693b      	ldr	r3, [r7, #16]
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d054      	beq.n	8000f24 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e7e:	f003 0310 	and.w	r3, r3, #16
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d105      	bne.n	8000e92 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e8a:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	689b      	ldr	r3, [r3, #8]
 8000e98:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d139      	bne.n	8000f14 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000ea6:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d006      	beq.n	8000ebc <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	689b      	ldr	r3, [r3, #8]
 8000eb4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d12b      	bne.n	8000f14 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	685b      	ldr	r3, [r3, #4]
 8000ec2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d124      	bne.n	8000f14 <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	689b      	ldr	r3, [r3, #8]
 8000ed0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d11d      	bne.n	8000f14 <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d119      	bne.n	8000f14 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	685a      	ldr	r2, [r3, #4]
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000eee:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ef4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d105      	bne.n	8000f14 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f0c:	f043 0201 	orr.w	r2, r3, #1
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8000f14:	6878      	ldr	r0, [r7, #4]
 8000f16:	f000 fa9d 	bl	8001454 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	f06f 020c 	mvn.w	r2, #12
 8000f22:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	f003 0301 	and.w	r3, r3, #1
 8000f2a:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8000f2c:	68bb      	ldr	r3, [r7, #8]
 8000f2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f32:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8000f34:	697b      	ldr	r3, [r7, #20]
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d017      	beq.n	8000f6a <HAL_ADC_IRQHandler+0x1d6>
 8000f3a:	693b      	ldr	r3, [r7, #16]
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d014      	beq.n	8000f6a <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	f003 0301 	and.w	r3, r3, #1
 8000f4a:	2b01      	cmp	r3, #1
 8000f4c:	d10d      	bne.n	8000f6a <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f52:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8000f5a:	6878      	ldr	r0, [r7, #4]
 8000f5c:	f000 f837 	bl	8000fce <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	f06f 0201 	mvn.w	r2, #1
 8000f68:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	f003 0320 	and.w	r3, r3, #32
 8000f70:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8000f72:	68bb      	ldr	r3, [r7, #8]
 8000f74:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000f78:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8000f7a:	697b      	ldr	r3, [r7, #20]
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d015      	beq.n	8000fac <HAL_ADC_IRQHandler+0x218>
 8000f80:	693b      	ldr	r3, [r7, #16]
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d012      	beq.n	8000fac <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f8a:	f043 0202 	orr.w	r2, r3, #2
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	f06f 0220 	mvn.w	r2, #32
 8000f9a:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8000f9c:	6878      	ldr	r0, [r7, #4]
 8000f9e:	f000 f820 	bl	8000fe2 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	f06f 0220 	mvn.w	r2, #32
 8000faa:	601a      	str	r2, [r3, #0]
  }
}
 8000fac:	bf00      	nop
 8000fae:	3718      	adds	r7, #24
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}

08000fb4 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8000fb4:	b480      	push	{r7}
 8000fb6:	b083      	sub	sp, #12
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	370c      	adds	r7, #12
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fcc:	4770      	bx	lr

08000fce <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8000fce:	b480      	push	{r7}
 8000fd0:	b083      	sub	sp, #12
 8000fd2:	af00      	add	r7, sp, #0
 8000fd4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8000fd6:	bf00      	nop
 8000fd8:	370c      	adds	r7, #12
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe0:	4770      	bx	lr

08000fe2 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8000fe2:	b480      	push	{r7}
 8000fe4:	b083      	sub	sp, #12
 8000fe6:	af00      	add	r7, sp, #0
 8000fe8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8000fea:	bf00      	nop
 8000fec:	370c      	adds	r7, #12
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff4:	4770      	bx	lr
	...

08000ff8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	b085      	sub	sp, #20
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
 8001000:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001002:	2300      	movs	r3, #0
 8001004:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800100c:	2b01      	cmp	r3, #1
 800100e:	d101      	bne.n	8001014 <HAL_ADC_ConfigChannel+0x1c>
 8001010:	2302      	movs	r3, #2
 8001012:	e113      	b.n	800123c <HAL_ADC_ConfigChannel+0x244>
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	2201      	movs	r2, #1
 8001018:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	2b09      	cmp	r3, #9
 8001022:	d925      	bls.n	8001070 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	68d9      	ldr	r1, [r3, #12]
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	b29b      	uxth	r3, r3
 8001030:	461a      	mov	r2, r3
 8001032:	4613      	mov	r3, r2
 8001034:	005b      	lsls	r3, r3, #1
 8001036:	4413      	add	r3, r2
 8001038:	3b1e      	subs	r3, #30
 800103a:	2207      	movs	r2, #7
 800103c:	fa02 f303 	lsl.w	r3, r2, r3
 8001040:	43da      	mvns	r2, r3
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	400a      	ands	r2, r1
 8001048:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	68d9      	ldr	r1, [r3, #12]
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	689a      	ldr	r2, [r3, #8]
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	b29b      	uxth	r3, r3
 800105a:	4618      	mov	r0, r3
 800105c:	4603      	mov	r3, r0
 800105e:	005b      	lsls	r3, r3, #1
 8001060:	4403      	add	r3, r0
 8001062:	3b1e      	subs	r3, #30
 8001064:	409a      	lsls	r2, r3
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	430a      	orrs	r2, r1
 800106c:	60da      	str	r2, [r3, #12]
 800106e:	e022      	b.n	80010b6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	6919      	ldr	r1, [r3, #16]
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	b29b      	uxth	r3, r3
 800107c:	461a      	mov	r2, r3
 800107e:	4613      	mov	r3, r2
 8001080:	005b      	lsls	r3, r3, #1
 8001082:	4413      	add	r3, r2
 8001084:	2207      	movs	r2, #7
 8001086:	fa02 f303 	lsl.w	r3, r2, r3
 800108a:	43da      	mvns	r2, r3
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	400a      	ands	r2, r1
 8001092:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	6919      	ldr	r1, [r3, #16]
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	689a      	ldr	r2, [r3, #8]
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	b29b      	uxth	r3, r3
 80010a4:	4618      	mov	r0, r3
 80010a6:	4603      	mov	r3, r0
 80010a8:	005b      	lsls	r3, r3, #1
 80010aa:	4403      	add	r3, r0
 80010ac:	409a      	lsls	r2, r3
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	430a      	orrs	r2, r1
 80010b4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	685b      	ldr	r3, [r3, #4]
 80010ba:	2b06      	cmp	r3, #6
 80010bc:	d824      	bhi.n	8001108 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	685a      	ldr	r2, [r3, #4]
 80010c8:	4613      	mov	r3, r2
 80010ca:	009b      	lsls	r3, r3, #2
 80010cc:	4413      	add	r3, r2
 80010ce:	3b05      	subs	r3, #5
 80010d0:	221f      	movs	r2, #31
 80010d2:	fa02 f303 	lsl.w	r3, r2, r3
 80010d6:	43da      	mvns	r2, r3
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	400a      	ands	r2, r1
 80010de:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	b29b      	uxth	r3, r3
 80010ec:	4618      	mov	r0, r3
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	685a      	ldr	r2, [r3, #4]
 80010f2:	4613      	mov	r3, r2
 80010f4:	009b      	lsls	r3, r3, #2
 80010f6:	4413      	add	r3, r2
 80010f8:	3b05      	subs	r3, #5
 80010fa:	fa00 f203 	lsl.w	r2, r0, r3
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	430a      	orrs	r2, r1
 8001104:	635a      	str	r2, [r3, #52]	; 0x34
 8001106:	e04c      	b.n	80011a2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	685b      	ldr	r3, [r3, #4]
 800110c:	2b0c      	cmp	r3, #12
 800110e:	d824      	bhi.n	800115a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	685a      	ldr	r2, [r3, #4]
 800111a:	4613      	mov	r3, r2
 800111c:	009b      	lsls	r3, r3, #2
 800111e:	4413      	add	r3, r2
 8001120:	3b23      	subs	r3, #35	; 0x23
 8001122:	221f      	movs	r2, #31
 8001124:	fa02 f303 	lsl.w	r3, r2, r3
 8001128:	43da      	mvns	r2, r3
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	400a      	ands	r2, r1
 8001130:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	b29b      	uxth	r3, r3
 800113e:	4618      	mov	r0, r3
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	685a      	ldr	r2, [r3, #4]
 8001144:	4613      	mov	r3, r2
 8001146:	009b      	lsls	r3, r3, #2
 8001148:	4413      	add	r3, r2
 800114a:	3b23      	subs	r3, #35	; 0x23
 800114c:	fa00 f203 	lsl.w	r2, r0, r3
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	430a      	orrs	r2, r1
 8001156:	631a      	str	r2, [r3, #48]	; 0x30
 8001158:	e023      	b.n	80011a2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	685a      	ldr	r2, [r3, #4]
 8001164:	4613      	mov	r3, r2
 8001166:	009b      	lsls	r3, r3, #2
 8001168:	4413      	add	r3, r2
 800116a:	3b41      	subs	r3, #65	; 0x41
 800116c:	221f      	movs	r2, #31
 800116e:	fa02 f303 	lsl.w	r3, r2, r3
 8001172:	43da      	mvns	r2, r3
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	400a      	ands	r2, r1
 800117a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	b29b      	uxth	r3, r3
 8001188:	4618      	mov	r0, r3
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	685a      	ldr	r2, [r3, #4]
 800118e:	4613      	mov	r3, r2
 8001190:	009b      	lsls	r3, r3, #2
 8001192:	4413      	add	r3, r2
 8001194:	3b41      	subs	r3, #65	; 0x41
 8001196:	fa00 f203 	lsl.w	r2, r0, r3
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	430a      	orrs	r2, r1
 80011a0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80011a2:	4b29      	ldr	r3, [pc, #164]	; (8001248 <HAL_ADC_ConfigChannel+0x250>)
 80011a4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	4a28      	ldr	r2, [pc, #160]	; (800124c <HAL_ADC_ConfigChannel+0x254>)
 80011ac:	4293      	cmp	r3, r2
 80011ae:	d10f      	bne.n	80011d0 <HAL_ADC_ConfigChannel+0x1d8>
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	2b12      	cmp	r3, #18
 80011b6:	d10b      	bne.n	80011d0 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	685b      	ldr	r3, [r3, #4]
 80011bc:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	685b      	ldr	r3, [r3, #4]
 80011c8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	4a1d      	ldr	r2, [pc, #116]	; (800124c <HAL_ADC_ConfigChannel+0x254>)
 80011d6:	4293      	cmp	r3, r2
 80011d8:	d12b      	bne.n	8001232 <HAL_ADC_ConfigChannel+0x23a>
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	4a1c      	ldr	r2, [pc, #112]	; (8001250 <HAL_ADC_ConfigChannel+0x258>)
 80011e0:	4293      	cmp	r3, r2
 80011e2:	d003      	beq.n	80011ec <HAL_ADC_ConfigChannel+0x1f4>
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	2b11      	cmp	r3, #17
 80011ea:	d122      	bne.n	8001232 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	685b      	ldr	r3, [r3, #4]
 80011f0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	685b      	ldr	r3, [r3, #4]
 80011fc:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	4a11      	ldr	r2, [pc, #68]	; (8001250 <HAL_ADC_ConfigChannel+0x258>)
 800120a:	4293      	cmp	r3, r2
 800120c:	d111      	bne.n	8001232 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800120e:	4b11      	ldr	r3, [pc, #68]	; (8001254 <HAL_ADC_ConfigChannel+0x25c>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	4a11      	ldr	r2, [pc, #68]	; (8001258 <HAL_ADC_ConfigChannel+0x260>)
 8001214:	fba2 2303 	umull	r2, r3, r2, r3
 8001218:	0c9a      	lsrs	r2, r3, #18
 800121a:	4613      	mov	r3, r2
 800121c:	009b      	lsls	r3, r3, #2
 800121e:	4413      	add	r3, r2
 8001220:	005b      	lsls	r3, r3, #1
 8001222:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001224:	e002      	b.n	800122c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001226:	68bb      	ldr	r3, [r7, #8]
 8001228:	3b01      	subs	r3, #1
 800122a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800122c:	68bb      	ldr	r3, [r7, #8]
 800122e:	2b00      	cmp	r3, #0
 8001230:	d1f9      	bne.n	8001226 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	2200      	movs	r2, #0
 8001236:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800123a:	2300      	movs	r3, #0
}
 800123c:	4618      	mov	r0, r3
 800123e:	3714      	adds	r7, #20
 8001240:	46bd      	mov	sp, r7
 8001242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001246:	4770      	bx	lr
 8001248:	40012300 	.word	0x40012300
 800124c:	40012000 	.word	0x40012000
 8001250:	10000012 	.word	0x10000012
 8001254:	20000000 	.word	0x20000000
 8001258:	431bde83 	.word	0x431bde83

0800125c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800125c:	b480      	push	{r7}
 800125e:	b085      	sub	sp, #20
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001264:	4b79      	ldr	r3, [pc, #484]	; (800144c <ADC_Init+0x1f0>)
 8001266:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	685a      	ldr	r2, [r3, #4]
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	685b      	ldr	r3, [r3, #4]
 800127c:	431a      	orrs	r2, r3
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	685a      	ldr	r2, [r3, #4]
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001290:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	6859      	ldr	r1, [r3, #4]
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	691b      	ldr	r3, [r3, #16]
 800129c:	021a      	lsls	r2, r3, #8
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	430a      	orrs	r2, r1
 80012a4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	685a      	ldr	r2, [r3, #4]
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80012b4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	6859      	ldr	r1, [r3, #4]
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	689a      	ldr	r2, [r3, #8]
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	430a      	orrs	r2, r1
 80012c6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	689a      	ldr	r2, [r3, #8]
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80012d6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	6899      	ldr	r1, [r3, #8]
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	68da      	ldr	r2, [r3, #12]
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	430a      	orrs	r2, r1
 80012e8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012ee:	4a58      	ldr	r2, [pc, #352]	; (8001450 <ADC_Init+0x1f4>)
 80012f0:	4293      	cmp	r3, r2
 80012f2:	d022      	beq.n	800133a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	689a      	ldr	r2, [r3, #8]
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001302:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	6899      	ldr	r1, [r3, #8]
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	430a      	orrs	r2, r1
 8001314:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	689a      	ldr	r2, [r3, #8]
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001324:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	6899      	ldr	r1, [r3, #8]
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	430a      	orrs	r2, r1
 8001336:	609a      	str	r2, [r3, #8]
 8001338:	e00f      	b.n	800135a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	689a      	ldr	r2, [r3, #8]
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001348:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	689a      	ldr	r2, [r3, #8]
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001358:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	689a      	ldr	r2, [r3, #8]
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	f022 0202 	bic.w	r2, r2, #2
 8001368:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	6899      	ldr	r1, [r3, #8]
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	7e1b      	ldrb	r3, [r3, #24]
 8001374:	005a      	lsls	r2, r3, #1
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	430a      	orrs	r2, r1
 800137c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001384:	2b00      	cmp	r3, #0
 8001386:	d01b      	beq.n	80013c0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	685a      	ldr	r2, [r3, #4]
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001396:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	685a      	ldr	r2, [r3, #4]
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80013a6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	6859      	ldr	r1, [r3, #4]
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013b2:	3b01      	subs	r3, #1
 80013b4:	035a      	lsls	r2, r3, #13
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	430a      	orrs	r2, r1
 80013bc:	605a      	str	r2, [r3, #4]
 80013be:	e007      	b.n	80013d0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	685a      	ldr	r2, [r3, #4]
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80013ce:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80013de:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	69db      	ldr	r3, [r3, #28]
 80013ea:	3b01      	subs	r3, #1
 80013ec:	051a      	lsls	r2, r3, #20
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	430a      	orrs	r2, r1
 80013f4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	689a      	ldr	r2, [r3, #8]
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001404:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	6899      	ldr	r1, [r3, #8]
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001412:	025a      	lsls	r2, r3, #9
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	430a      	orrs	r2, r1
 800141a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	689a      	ldr	r2, [r3, #8]
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800142a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	6899      	ldr	r1, [r3, #8]
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	695b      	ldr	r3, [r3, #20]
 8001436:	029a      	lsls	r2, r3, #10
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	430a      	orrs	r2, r1
 800143e:	609a      	str	r2, [r3, #8]
}
 8001440:	bf00      	nop
 8001442:	3714      	adds	r7, #20
 8001444:	46bd      	mov	sp, r7
 8001446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144a:	4770      	bx	lr
 800144c:	40012300 	.word	0x40012300
 8001450:	0f000001 	.word	0x0f000001

08001454 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001454:	b480      	push	{r7}
 8001456:	b083      	sub	sp, #12
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 800145c:	bf00      	nop
 800145e:	370c      	adds	r7, #12
 8001460:	46bd      	mov	sp, r7
 8001462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001466:	4770      	bx	lr

08001468 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001468:	b480      	push	{r7}
 800146a:	b085      	sub	sp, #20
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	f003 0307 	and.w	r3, r3, #7
 8001476:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001478:	4b0c      	ldr	r3, [pc, #48]	; (80014ac <__NVIC_SetPriorityGrouping+0x44>)
 800147a:	68db      	ldr	r3, [r3, #12]
 800147c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800147e:	68ba      	ldr	r2, [r7, #8]
 8001480:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001484:	4013      	ands	r3, r2
 8001486:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800148c:	68bb      	ldr	r3, [r7, #8]
 800148e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001490:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001494:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001498:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800149a:	4a04      	ldr	r2, [pc, #16]	; (80014ac <__NVIC_SetPriorityGrouping+0x44>)
 800149c:	68bb      	ldr	r3, [r7, #8]
 800149e:	60d3      	str	r3, [r2, #12]
}
 80014a0:	bf00      	nop
 80014a2:	3714      	adds	r7, #20
 80014a4:	46bd      	mov	sp, r7
 80014a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014aa:	4770      	bx	lr
 80014ac:	e000ed00 	.word	0xe000ed00

080014b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014b0:	b480      	push	{r7}
 80014b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014b4:	4b04      	ldr	r3, [pc, #16]	; (80014c8 <__NVIC_GetPriorityGrouping+0x18>)
 80014b6:	68db      	ldr	r3, [r3, #12]
 80014b8:	0a1b      	lsrs	r3, r3, #8
 80014ba:	f003 0307 	and.w	r3, r3, #7
}
 80014be:	4618      	mov	r0, r3
 80014c0:	46bd      	mov	sp, r7
 80014c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c6:	4770      	bx	lr
 80014c8:	e000ed00 	.word	0xe000ed00

080014cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014cc:	b480      	push	{r7}
 80014ce:	b083      	sub	sp, #12
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	4603      	mov	r3, r0
 80014d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	db0b      	blt.n	80014f6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014de:	79fb      	ldrb	r3, [r7, #7]
 80014e0:	f003 021f 	and.w	r2, r3, #31
 80014e4:	4907      	ldr	r1, [pc, #28]	; (8001504 <__NVIC_EnableIRQ+0x38>)
 80014e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ea:	095b      	lsrs	r3, r3, #5
 80014ec:	2001      	movs	r0, #1
 80014ee:	fa00 f202 	lsl.w	r2, r0, r2
 80014f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80014f6:	bf00      	nop
 80014f8:	370c      	adds	r7, #12
 80014fa:	46bd      	mov	sp, r7
 80014fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001500:	4770      	bx	lr
 8001502:	bf00      	nop
 8001504:	e000e100 	.word	0xe000e100

08001508 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001508:	b480      	push	{r7}
 800150a:	b083      	sub	sp, #12
 800150c:	af00      	add	r7, sp, #0
 800150e:	4603      	mov	r3, r0
 8001510:	6039      	str	r1, [r7, #0]
 8001512:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001514:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001518:	2b00      	cmp	r3, #0
 800151a:	db0a      	blt.n	8001532 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	b2da      	uxtb	r2, r3
 8001520:	490c      	ldr	r1, [pc, #48]	; (8001554 <__NVIC_SetPriority+0x4c>)
 8001522:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001526:	0112      	lsls	r2, r2, #4
 8001528:	b2d2      	uxtb	r2, r2
 800152a:	440b      	add	r3, r1
 800152c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001530:	e00a      	b.n	8001548 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	b2da      	uxtb	r2, r3
 8001536:	4908      	ldr	r1, [pc, #32]	; (8001558 <__NVIC_SetPriority+0x50>)
 8001538:	79fb      	ldrb	r3, [r7, #7]
 800153a:	f003 030f 	and.w	r3, r3, #15
 800153e:	3b04      	subs	r3, #4
 8001540:	0112      	lsls	r2, r2, #4
 8001542:	b2d2      	uxtb	r2, r2
 8001544:	440b      	add	r3, r1
 8001546:	761a      	strb	r2, [r3, #24]
}
 8001548:	bf00      	nop
 800154a:	370c      	adds	r7, #12
 800154c:	46bd      	mov	sp, r7
 800154e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001552:	4770      	bx	lr
 8001554:	e000e100 	.word	0xe000e100
 8001558:	e000ed00 	.word	0xe000ed00

0800155c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800155c:	b480      	push	{r7}
 800155e:	b089      	sub	sp, #36	; 0x24
 8001560:	af00      	add	r7, sp, #0
 8001562:	60f8      	str	r0, [r7, #12]
 8001564:	60b9      	str	r1, [r7, #8]
 8001566:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	f003 0307 	and.w	r3, r3, #7
 800156e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001570:	69fb      	ldr	r3, [r7, #28]
 8001572:	f1c3 0307 	rsb	r3, r3, #7
 8001576:	2b04      	cmp	r3, #4
 8001578:	bf28      	it	cs
 800157a:	2304      	movcs	r3, #4
 800157c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800157e:	69fb      	ldr	r3, [r7, #28]
 8001580:	3304      	adds	r3, #4
 8001582:	2b06      	cmp	r3, #6
 8001584:	d902      	bls.n	800158c <NVIC_EncodePriority+0x30>
 8001586:	69fb      	ldr	r3, [r7, #28]
 8001588:	3b03      	subs	r3, #3
 800158a:	e000      	b.n	800158e <NVIC_EncodePriority+0x32>
 800158c:	2300      	movs	r3, #0
 800158e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001590:	f04f 32ff 	mov.w	r2, #4294967295
 8001594:	69bb      	ldr	r3, [r7, #24]
 8001596:	fa02 f303 	lsl.w	r3, r2, r3
 800159a:	43da      	mvns	r2, r3
 800159c:	68bb      	ldr	r3, [r7, #8]
 800159e:	401a      	ands	r2, r3
 80015a0:	697b      	ldr	r3, [r7, #20]
 80015a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015a4:	f04f 31ff 	mov.w	r1, #4294967295
 80015a8:	697b      	ldr	r3, [r7, #20]
 80015aa:	fa01 f303 	lsl.w	r3, r1, r3
 80015ae:	43d9      	mvns	r1, r3
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015b4:	4313      	orrs	r3, r2
         );
}
 80015b6:	4618      	mov	r0, r3
 80015b8:	3724      	adds	r7, #36	; 0x24
 80015ba:	46bd      	mov	sp, r7
 80015bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c0:	4770      	bx	lr
	...

080015c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b082      	sub	sp, #8
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	3b01      	subs	r3, #1
 80015d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80015d4:	d301      	bcc.n	80015da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015d6:	2301      	movs	r3, #1
 80015d8:	e00f      	b.n	80015fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015da:	4a0a      	ldr	r2, [pc, #40]	; (8001604 <SysTick_Config+0x40>)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	3b01      	subs	r3, #1
 80015e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015e2:	210f      	movs	r1, #15
 80015e4:	f04f 30ff 	mov.w	r0, #4294967295
 80015e8:	f7ff ff8e 	bl	8001508 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015ec:	4b05      	ldr	r3, [pc, #20]	; (8001604 <SysTick_Config+0x40>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015f2:	4b04      	ldr	r3, [pc, #16]	; (8001604 <SysTick_Config+0x40>)
 80015f4:	2207      	movs	r2, #7
 80015f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015f8:	2300      	movs	r3, #0
}
 80015fa:	4618      	mov	r0, r3
 80015fc:	3708      	adds	r7, #8
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	e000e010 	.word	0xe000e010

08001608 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b082      	sub	sp, #8
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001610:	6878      	ldr	r0, [r7, #4]
 8001612:	f7ff ff29 	bl	8001468 <__NVIC_SetPriorityGrouping>
}
 8001616:	bf00      	nop
 8001618:	3708      	adds	r7, #8
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}

0800161e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800161e:	b580      	push	{r7, lr}
 8001620:	b086      	sub	sp, #24
 8001622:	af00      	add	r7, sp, #0
 8001624:	4603      	mov	r3, r0
 8001626:	60b9      	str	r1, [r7, #8]
 8001628:	607a      	str	r2, [r7, #4]
 800162a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800162c:	2300      	movs	r3, #0
 800162e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001630:	f7ff ff3e 	bl	80014b0 <__NVIC_GetPriorityGrouping>
 8001634:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001636:	687a      	ldr	r2, [r7, #4]
 8001638:	68b9      	ldr	r1, [r7, #8]
 800163a:	6978      	ldr	r0, [r7, #20]
 800163c:	f7ff ff8e 	bl	800155c <NVIC_EncodePriority>
 8001640:	4602      	mov	r2, r0
 8001642:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001646:	4611      	mov	r1, r2
 8001648:	4618      	mov	r0, r3
 800164a:	f7ff ff5d 	bl	8001508 <__NVIC_SetPriority>
}
 800164e:	bf00      	nop
 8001650:	3718      	adds	r7, #24
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}

08001656 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001656:	b580      	push	{r7, lr}
 8001658:	b082      	sub	sp, #8
 800165a:	af00      	add	r7, sp, #0
 800165c:	4603      	mov	r3, r0
 800165e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001660:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001664:	4618      	mov	r0, r3
 8001666:	f7ff ff31 	bl	80014cc <__NVIC_EnableIRQ>
}
 800166a:	bf00      	nop
 800166c:	3708      	adds	r7, #8
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}

08001672 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001672:	b580      	push	{r7, lr}
 8001674:	b082      	sub	sp, #8
 8001676:	af00      	add	r7, sp, #0
 8001678:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800167a:	6878      	ldr	r0, [r7, #4]
 800167c:	f7ff ffa2 	bl	80015c4 <SysTick_Config>
 8001680:	4603      	mov	r3, r0
}
 8001682:	4618      	mov	r0, r3
 8001684:	3708      	adds	r7, #8
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}
	...

0800168c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800168c:	b480      	push	{r7}
 800168e:	b089      	sub	sp, #36	; 0x24
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
 8001694:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001696:	2300      	movs	r3, #0
 8001698:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800169a:	2300      	movs	r3, #0
 800169c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800169e:	2300      	movs	r3, #0
 80016a0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80016a2:	2300      	movs	r3, #0
 80016a4:	61fb      	str	r3, [r7, #28]
 80016a6:	e159      	b.n	800195c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80016a8:	2201      	movs	r2, #1
 80016aa:	69fb      	ldr	r3, [r7, #28]
 80016ac:	fa02 f303 	lsl.w	r3, r2, r3
 80016b0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	697a      	ldr	r2, [r7, #20]
 80016b8:	4013      	ands	r3, r2
 80016ba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80016bc:	693a      	ldr	r2, [r7, #16]
 80016be:	697b      	ldr	r3, [r7, #20]
 80016c0:	429a      	cmp	r2, r3
 80016c2:	f040 8148 	bne.w	8001956 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	685b      	ldr	r3, [r3, #4]
 80016ca:	f003 0303 	and.w	r3, r3, #3
 80016ce:	2b01      	cmp	r3, #1
 80016d0:	d005      	beq.n	80016de <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	685b      	ldr	r3, [r3, #4]
 80016d6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80016da:	2b02      	cmp	r3, #2
 80016dc:	d130      	bne.n	8001740 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	689b      	ldr	r3, [r3, #8]
 80016e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80016e4:	69fb      	ldr	r3, [r7, #28]
 80016e6:	005b      	lsls	r3, r3, #1
 80016e8:	2203      	movs	r2, #3
 80016ea:	fa02 f303 	lsl.w	r3, r2, r3
 80016ee:	43db      	mvns	r3, r3
 80016f0:	69ba      	ldr	r2, [r7, #24]
 80016f2:	4013      	ands	r3, r2
 80016f4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	68da      	ldr	r2, [r3, #12]
 80016fa:	69fb      	ldr	r3, [r7, #28]
 80016fc:	005b      	lsls	r3, r3, #1
 80016fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001702:	69ba      	ldr	r2, [r7, #24]
 8001704:	4313      	orrs	r3, r2
 8001706:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	69ba      	ldr	r2, [r7, #24]
 800170c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	685b      	ldr	r3, [r3, #4]
 8001712:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001714:	2201      	movs	r2, #1
 8001716:	69fb      	ldr	r3, [r7, #28]
 8001718:	fa02 f303 	lsl.w	r3, r2, r3
 800171c:	43db      	mvns	r3, r3
 800171e:	69ba      	ldr	r2, [r7, #24]
 8001720:	4013      	ands	r3, r2
 8001722:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	091b      	lsrs	r3, r3, #4
 800172a:	f003 0201 	and.w	r2, r3, #1
 800172e:	69fb      	ldr	r3, [r7, #28]
 8001730:	fa02 f303 	lsl.w	r3, r2, r3
 8001734:	69ba      	ldr	r2, [r7, #24]
 8001736:	4313      	orrs	r3, r2
 8001738:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	69ba      	ldr	r2, [r7, #24]
 800173e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	f003 0303 	and.w	r3, r3, #3
 8001748:	2b03      	cmp	r3, #3
 800174a:	d017      	beq.n	800177c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	68db      	ldr	r3, [r3, #12]
 8001750:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001752:	69fb      	ldr	r3, [r7, #28]
 8001754:	005b      	lsls	r3, r3, #1
 8001756:	2203      	movs	r2, #3
 8001758:	fa02 f303 	lsl.w	r3, r2, r3
 800175c:	43db      	mvns	r3, r3
 800175e:	69ba      	ldr	r2, [r7, #24]
 8001760:	4013      	ands	r3, r2
 8001762:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	689a      	ldr	r2, [r3, #8]
 8001768:	69fb      	ldr	r3, [r7, #28]
 800176a:	005b      	lsls	r3, r3, #1
 800176c:	fa02 f303 	lsl.w	r3, r2, r3
 8001770:	69ba      	ldr	r2, [r7, #24]
 8001772:	4313      	orrs	r3, r2
 8001774:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	69ba      	ldr	r2, [r7, #24]
 800177a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	f003 0303 	and.w	r3, r3, #3
 8001784:	2b02      	cmp	r3, #2
 8001786:	d123      	bne.n	80017d0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001788:	69fb      	ldr	r3, [r7, #28]
 800178a:	08da      	lsrs	r2, r3, #3
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	3208      	adds	r2, #8
 8001790:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001794:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001796:	69fb      	ldr	r3, [r7, #28]
 8001798:	f003 0307 	and.w	r3, r3, #7
 800179c:	009b      	lsls	r3, r3, #2
 800179e:	220f      	movs	r2, #15
 80017a0:	fa02 f303 	lsl.w	r3, r2, r3
 80017a4:	43db      	mvns	r3, r3
 80017a6:	69ba      	ldr	r2, [r7, #24]
 80017a8:	4013      	ands	r3, r2
 80017aa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	691a      	ldr	r2, [r3, #16]
 80017b0:	69fb      	ldr	r3, [r7, #28]
 80017b2:	f003 0307 	and.w	r3, r3, #7
 80017b6:	009b      	lsls	r3, r3, #2
 80017b8:	fa02 f303 	lsl.w	r3, r2, r3
 80017bc:	69ba      	ldr	r2, [r7, #24]
 80017be:	4313      	orrs	r3, r2
 80017c0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80017c2:	69fb      	ldr	r3, [r7, #28]
 80017c4:	08da      	lsrs	r2, r3, #3
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	3208      	adds	r2, #8
 80017ca:	69b9      	ldr	r1, [r7, #24]
 80017cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80017d6:	69fb      	ldr	r3, [r7, #28]
 80017d8:	005b      	lsls	r3, r3, #1
 80017da:	2203      	movs	r2, #3
 80017dc:	fa02 f303 	lsl.w	r3, r2, r3
 80017e0:	43db      	mvns	r3, r3
 80017e2:	69ba      	ldr	r2, [r7, #24]
 80017e4:	4013      	ands	r3, r2
 80017e6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	685b      	ldr	r3, [r3, #4]
 80017ec:	f003 0203 	and.w	r2, r3, #3
 80017f0:	69fb      	ldr	r3, [r7, #28]
 80017f2:	005b      	lsls	r3, r3, #1
 80017f4:	fa02 f303 	lsl.w	r3, r2, r3
 80017f8:	69ba      	ldr	r2, [r7, #24]
 80017fa:	4313      	orrs	r3, r2
 80017fc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	69ba      	ldr	r2, [r7, #24]
 8001802:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800180c:	2b00      	cmp	r3, #0
 800180e:	f000 80a2 	beq.w	8001956 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001812:	2300      	movs	r3, #0
 8001814:	60fb      	str	r3, [r7, #12]
 8001816:	4b57      	ldr	r3, [pc, #348]	; (8001974 <HAL_GPIO_Init+0x2e8>)
 8001818:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800181a:	4a56      	ldr	r2, [pc, #344]	; (8001974 <HAL_GPIO_Init+0x2e8>)
 800181c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001820:	6453      	str	r3, [r2, #68]	; 0x44
 8001822:	4b54      	ldr	r3, [pc, #336]	; (8001974 <HAL_GPIO_Init+0x2e8>)
 8001824:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001826:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800182a:	60fb      	str	r3, [r7, #12]
 800182c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800182e:	4a52      	ldr	r2, [pc, #328]	; (8001978 <HAL_GPIO_Init+0x2ec>)
 8001830:	69fb      	ldr	r3, [r7, #28]
 8001832:	089b      	lsrs	r3, r3, #2
 8001834:	3302      	adds	r3, #2
 8001836:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800183a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800183c:	69fb      	ldr	r3, [r7, #28]
 800183e:	f003 0303 	and.w	r3, r3, #3
 8001842:	009b      	lsls	r3, r3, #2
 8001844:	220f      	movs	r2, #15
 8001846:	fa02 f303 	lsl.w	r3, r2, r3
 800184a:	43db      	mvns	r3, r3
 800184c:	69ba      	ldr	r2, [r7, #24]
 800184e:	4013      	ands	r3, r2
 8001850:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	4a49      	ldr	r2, [pc, #292]	; (800197c <HAL_GPIO_Init+0x2f0>)
 8001856:	4293      	cmp	r3, r2
 8001858:	d019      	beq.n	800188e <HAL_GPIO_Init+0x202>
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	4a48      	ldr	r2, [pc, #288]	; (8001980 <HAL_GPIO_Init+0x2f4>)
 800185e:	4293      	cmp	r3, r2
 8001860:	d013      	beq.n	800188a <HAL_GPIO_Init+0x1fe>
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	4a47      	ldr	r2, [pc, #284]	; (8001984 <HAL_GPIO_Init+0x2f8>)
 8001866:	4293      	cmp	r3, r2
 8001868:	d00d      	beq.n	8001886 <HAL_GPIO_Init+0x1fa>
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	4a46      	ldr	r2, [pc, #280]	; (8001988 <HAL_GPIO_Init+0x2fc>)
 800186e:	4293      	cmp	r3, r2
 8001870:	d007      	beq.n	8001882 <HAL_GPIO_Init+0x1f6>
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	4a45      	ldr	r2, [pc, #276]	; (800198c <HAL_GPIO_Init+0x300>)
 8001876:	4293      	cmp	r3, r2
 8001878:	d101      	bne.n	800187e <HAL_GPIO_Init+0x1f2>
 800187a:	2304      	movs	r3, #4
 800187c:	e008      	b.n	8001890 <HAL_GPIO_Init+0x204>
 800187e:	2307      	movs	r3, #7
 8001880:	e006      	b.n	8001890 <HAL_GPIO_Init+0x204>
 8001882:	2303      	movs	r3, #3
 8001884:	e004      	b.n	8001890 <HAL_GPIO_Init+0x204>
 8001886:	2302      	movs	r3, #2
 8001888:	e002      	b.n	8001890 <HAL_GPIO_Init+0x204>
 800188a:	2301      	movs	r3, #1
 800188c:	e000      	b.n	8001890 <HAL_GPIO_Init+0x204>
 800188e:	2300      	movs	r3, #0
 8001890:	69fa      	ldr	r2, [r7, #28]
 8001892:	f002 0203 	and.w	r2, r2, #3
 8001896:	0092      	lsls	r2, r2, #2
 8001898:	4093      	lsls	r3, r2
 800189a:	69ba      	ldr	r2, [r7, #24]
 800189c:	4313      	orrs	r3, r2
 800189e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80018a0:	4935      	ldr	r1, [pc, #212]	; (8001978 <HAL_GPIO_Init+0x2ec>)
 80018a2:	69fb      	ldr	r3, [r7, #28]
 80018a4:	089b      	lsrs	r3, r3, #2
 80018a6:	3302      	adds	r3, #2
 80018a8:	69ba      	ldr	r2, [r7, #24]
 80018aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80018ae:	4b38      	ldr	r3, [pc, #224]	; (8001990 <HAL_GPIO_Init+0x304>)
 80018b0:	689b      	ldr	r3, [r3, #8]
 80018b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018b4:	693b      	ldr	r3, [r7, #16]
 80018b6:	43db      	mvns	r3, r3
 80018b8:	69ba      	ldr	r2, [r7, #24]
 80018ba:	4013      	ands	r3, r2
 80018bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d003      	beq.n	80018d2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80018ca:	69ba      	ldr	r2, [r7, #24]
 80018cc:	693b      	ldr	r3, [r7, #16]
 80018ce:	4313      	orrs	r3, r2
 80018d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80018d2:	4a2f      	ldr	r2, [pc, #188]	; (8001990 <HAL_GPIO_Init+0x304>)
 80018d4:	69bb      	ldr	r3, [r7, #24]
 80018d6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80018d8:	4b2d      	ldr	r3, [pc, #180]	; (8001990 <HAL_GPIO_Init+0x304>)
 80018da:	68db      	ldr	r3, [r3, #12]
 80018dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018de:	693b      	ldr	r3, [r7, #16]
 80018e0:	43db      	mvns	r3, r3
 80018e2:	69ba      	ldr	r2, [r7, #24]
 80018e4:	4013      	ands	r3, r2
 80018e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	685b      	ldr	r3, [r3, #4]
 80018ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d003      	beq.n	80018fc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80018f4:	69ba      	ldr	r2, [r7, #24]
 80018f6:	693b      	ldr	r3, [r7, #16]
 80018f8:	4313      	orrs	r3, r2
 80018fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80018fc:	4a24      	ldr	r2, [pc, #144]	; (8001990 <HAL_GPIO_Init+0x304>)
 80018fe:	69bb      	ldr	r3, [r7, #24]
 8001900:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001902:	4b23      	ldr	r3, [pc, #140]	; (8001990 <HAL_GPIO_Init+0x304>)
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001908:	693b      	ldr	r3, [r7, #16]
 800190a:	43db      	mvns	r3, r3
 800190c:	69ba      	ldr	r2, [r7, #24]
 800190e:	4013      	ands	r3, r2
 8001910:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800191a:	2b00      	cmp	r3, #0
 800191c:	d003      	beq.n	8001926 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800191e:	69ba      	ldr	r2, [r7, #24]
 8001920:	693b      	ldr	r3, [r7, #16]
 8001922:	4313      	orrs	r3, r2
 8001924:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001926:	4a1a      	ldr	r2, [pc, #104]	; (8001990 <HAL_GPIO_Init+0x304>)
 8001928:	69bb      	ldr	r3, [r7, #24]
 800192a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800192c:	4b18      	ldr	r3, [pc, #96]	; (8001990 <HAL_GPIO_Init+0x304>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001932:	693b      	ldr	r3, [r7, #16]
 8001934:	43db      	mvns	r3, r3
 8001936:	69ba      	ldr	r2, [r7, #24]
 8001938:	4013      	ands	r3, r2
 800193a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001944:	2b00      	cmp	r3, #0
 8001946:	d003      	beq.n	8001950 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001948:	69ba      	ldr	r2, [r7, #24]
 800194a:	693b      	ldr	r3, [r7, #16]
 800194c:	4313      	orrs	r3, r2
 800194e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001950:	4a0f      	ldr	r2, [pc, #60]	; (8001990 <HAL_GPIO_Init+0x304>)
 8001952:	69bb      	ldr	r3, [r7, #24]
 8001954:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001956:	69fb      	ldr	r3, [r7, #28]
 8001958:	3301      	adds	r3, #1
 800195a:	61fb      	str	r3, [r7, #28]
 800195c:	69fb      	ldr	r3, [r7, #28]
 800195e:	2b0f      	cmp	r3, #15
 8001960:	f67f aea2 	bls.w	80016a8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001964:	bf00      	nop
 8001966:	bf00      	nop
 8001968:	3724      	adds	r7, #36	; 0x24
 800196a:	46bd      	mov	sp, r7
 800196c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001970:	4770      	bx	lr
 8001972:	bf00      	nop
 8001974:	40023800 	.word	0x40023800
 8001978:	40013800 	.word	0x40013800
 800197c:	40020000 	.word	0x40020000
 8001980:	40020400 	.word	0x40020400
 8001984:	40020800 	.word	0x40020800
 8001988:	40020c00 	.word	0x40020c00
 800198c:	40021000 	.word	0x40021000
 8001990:	40013c00 	.word	0x40013c00

08001994 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001994:	b480      	push	{r7}
 8001996:	b083      	sub	sp, #12
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
 800199c:	460b      	mov	r3, r1
 800199e:	807b      	strh	r3, [r7, #2]
 80019a0:	4613      	mov	r3, r2
 80019a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80019a4:	787b      	ldrb	r3, [r7, #1]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d003      	beq.n	80019b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80019aa:	887a      	ldrh	r2, [r7, #2]
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80019b0:	e003      	b.n	80019ba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80019b2:	887b      	ldrh	r3, [r7, #2]
 80019b4:	041a      	lsls	r2, r3, #16
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	619a      	str	r2, [r3, #24]
}
 80019ba:	bf00      	nop
 80019bc:	370c      	adds	r7, #12
 80019be:	46bd      	mov	sp, r7
 80019c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c4:	4770      	bx	lr
	...

080019c8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b086      	sub	sp, #24
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d101      	bne.n	80019da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80019d6:	2301      	movs	r3, #1
 80019d8:	e267      	b.n	8001eaa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f003 0301 	and.w	r3, r3, #1
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d075      	beq.n	8001ad2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80019e6:	4b88      	ldr	r3, [pc, #544]	; (8001c08 <HAL_RCC_OscConfig+0x240>)
 80019e8:	689b      	ldr	r3, [r3, #8]
 80019ea:	f003 030c 	and.w	r3, r3, #12
 80019ee:	2b04      	cmp	r3, #4
 80019f0:	d00c      	beq.n	8001a0c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80019f2:	4b85      	ldr	r3, [pc, #532]	; (8001c08 <HAL_RCC_OscConfig+0x240>)
 80019f4:	689b      	ldr	r3, [r3, #8]
 80019f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80019fa:	2b08      	cmp	r3, #8
 80019fc:	d112      	bne.n	8001a24 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80019fe:	4b82      	ldr	r3, [pc, #520]	; (8001c08 <HAL_RCC_OscConfig+0x240>)
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a06:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001a0a:	d10b      	bne.n	8001a24 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a0c:	4b7e      	ldr	r3, [pc, #504]	; (8001c08 <HAL_RCC_OscConfig+0x240>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d05b      	beq.n	8001ad0 <HAL_RCC_OscConfig+0x108>
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d157      	bne.n	8001ad0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001a20:	2301      	movs	r3, #1
 8001a22:	e242      	b.n	8001eaa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a2c:	d106      	bne.n	8001a3c <HAL_RCC_OscConfig+0x74>
 8001a2e:	4b76      	ldr	r3, [pc, #472]	; (8001c08 <HAL_RCC_OscConfig+0x240>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4a75      	ldr	r2, [pc, #468]	; (8001c08 <HAL_RCC_OscConfig+0x240>)
 8001a34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a38:	6013      	str	r3, [r2, #0]
 8001a3a:	e01d      	b.n	8001a78 <HAL_RCC_OscConfig+0xb0>
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a44:	d10c      	bne.n	8001a60 <HAL_RCC_OscConfig+0x98>
 8001a46:	4b70      	ldr	r3, [pc, #448]	; (8001c08 <HAL_RCC_OscConfig+0x240>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	4a6f      	ldr	r2, [pc, #444]	; (8001c08 <HAL_RCC_OscConfig+0x240>)
 8001a4c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a50:	6013      	str	r3, [r2, #0]
 8001a52:	4b6d      	ldr	r3, [pc, #436]	; (8001c08 <HAL_RCC_OscConfig+0x240>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	4a6c      	ldr	r2, [pc, #432]	; (8001c08 <HAL_RCC_OscConfig+0x240>)
 8001a58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a5c:	6013      	str	r3, [r2, #0]
 8001a5e:	e00b      	b.n	8001a78 <HAL_RCC_OscConfig+0xb0>
 8001a60:	4b69      	ldr	r3, [pc, #420]	; (8001c08 <HAL_RCC_OscConfig+0x240>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4a68      	ldr	r2, [pc, #416]	; (8001c08 <HAL_RCC_OscConfig+0x240>)
 8001a66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a6a:	6013      	str	r3, [r2, #0]
 8001a6c:	4b66      	ldr	r3, [pc, #408]	; (8001c08 <HAL_RCC_OscConfig+0x240>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4a65      	ldr	r2, [pc, #404]	; (8001c08 <HAL_RCC_OscConfig+0x240>)
 8001a72:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a76:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d013      	beq.n	8001aa8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a80:	f7fe ffc6 	bl	8000a10 <HAL_GetTick>
 8001a84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a86:	e008      	b.n	8001a9a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a88:	f7fe ffc2 	bl	8000a10 <HAL_GetTick>
 8001a8c:	4602      	mov	r2, r0
 8001a8e:	693b      	ldr	r3, [r7, #16]
 8001a90:	1ad3      	subs	r3, r2, r3
 8001a92:	2b64      	cmp	r3, #100	; 0x64
 8001a94:	d901      	bls.n	8001a9a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001a96:	2303      	movs	r3, #3
 8001a98:	e207      	b.n	8001eaa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a9a:	4b5b      	ldr	r3, [pc, #364]	; (8001c08 <HAL_RCC_OscConfig+0x240>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d0f0      	beq.n	8001a88 <HAL_RCC_OscConfig+0xc0>
 8001aa6:	e014      	b.n	8001ad2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aa8:	f7fe ffb2 	bl	8000a10 <HAL_GetTick>
 8001aac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001aae:	e008      	b.n	8001ac2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ab0:	f7fe ffae 	bl	8000a10 <HAL_GetTick>
 8001ab4:	4602      	mov	r2, r0
 8001ab6:	693b      	ldr	r3, [r7, #16]
 8001ab8:	1ad3      	subs	r3, r2, r3
 8001aba:	2b64      	cmp	r3, #100	; 0x64
 8001abc:	d901      	bls.n	8001ac2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001abe:	2303      	movs	r3, #3
 8001ac0:	e1f3      	b.n	8001eaa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ac2:	4b51      	ldr	r3, [pc, #324]	; (8001c08 <HAL_RCC_OscConfig+0x240>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d1f0      	bne.n	8001ab0 <HAL_RCC_OscConfig+0xe8>
 8001ace:	e000      	b.n	8001ad2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ad0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f003 0302 	and.w	r3, r3, #2
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d063      	beq.n	8001ba6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001ade:	4b4a      	ldr	r3, [pc, #296]	; (8001c08 <HAL_RCC_OscConfig+0x240>)
 8001ae0:	689b      	ldr	r3, [r3, #8]
 8001ae2:	f003 030c 	and.w	r3, r3, #12
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d00b      	beq.n	8001b02 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001aea:	4b47      	ldr	r3, [pc, #284]	; (8001c08 <HAL_RCC_OscConfig+0x240>)
 8001aec:	689b      	ldr	r3, [r3, #8]
 8001aee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001af2:	2b08      	cmp	r3, #8
 8001af4:	d11c      	bne.n	8001b30 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001af6:	4b44      	ldr	r3, [pc, #272]	; (8001c08 <HAL_RCC_OscConfig+0x240>)
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d116      	bne.n	8001b30 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b02:	4b41      	ldr	r3, [pc, #260]	; (8001c08 <HAL_RCC_OscConfig+0x240>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f003 0302 	and.w	r3, r3, #2
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d005      	beq.n	8001b1a <HAL_RCC_OscConfig+0x152>
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	68db      	ldr	r3, [r3, #12]
 8001b12:	2b01      	cmp	r3, #1
 8001b14:	d001      	beq.n	8001b1a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001b16:	2301      	movs	r3, #1
 8001b18:	e1c7      	b.n	8001eaa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b1a:	4b3b      	ldr	r3, [pc, #236]	; (8001c08 <HAL_RCC_OscConfig+0x240>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	691b      	ldr	r3, [r3, #16]
 8001b26:	00db      	lsls	r3, r3, #3
 8001b28:	4937      	ldr	r1, [pc, #220]	; (8001c08 <HAL_RCC_OscConfig+0x240>)
 8001b2a:	4313      	orrs	r3, r2
 8001b2c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b2e:	e03a      	b.n	8001ba6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	68db      	ldr	r3, [r3, #12]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d020      	beq.n	8001b7a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b38:	4b34      	ldr	r3, [pc, #208]	; (8001c0c <HAL_RCC_OscConfig+0x244>)
 8001b3a:	2201      	movs	r2, #1
 8001b3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b3e:	f7fe ff67 	bl	8000a10 <HAL_GetTick>
 8001b42:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b44:	e008      	b.n	8001b58 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b46:	f7fe ff63 	bl	8000a10 <HAL_GetTick>
 8001b4a:	4602      	mov	r2, r0
 8001b4c:	693b      	ldr	r3, [r7, #16]
 8001b4e:	1ad3      	subs	r3, r2, r3
 8001b50:	2b02      	cmp	r3, #2
 8001b52:	d901      	bls.n	8001b58 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001b54:	2303      	movs	r3, #3
 8001b56:	e1a8      	b.n	8001eaa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b58:	4b2b      	ldr	r3, [pc, #172]	; (8001c08 <HAL_RCC_OscConfig+0x240>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f003 0302 	and.w	r3, r3, #2
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d0f0      	beq.n	8001b46 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b64:	4b28      	ldr	r3, [pc, #160]	; (8001c08 <HAL_RCC_OscConfig+0x240>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	691b      	ldr	r3, [r3, #16]
 8001b70:	00db      	lsls	r3, r3, #3
 8001b72:	4925      	ldr	r1, [pc, #148]	; (8001c08 <HAL_RCC_OscConfig+0x240>)
 8001b74:	4313      	orrs	r3, r2
 8001b76:	600b      	str	r3, [r1, #0]
 8001b78:	e015      	b.n	8001ba6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b7a:	4b24      	ldr	r3, [pc, #144]	; (8001c0c <HAL_RCC_OscConfig+0x244>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b80:	f7fe ff46 	bl	8000a10 <HAL_GetTick>
 8001b84:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b86:	e008      	b.n	8001b9a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b88:	f7fe ff42 	bl	8000a10 <HAL_GetTick>
 8001b8c:	4602      	mov	r2, r0
 8001b8e:	693b      	ldr	r3, [r7, #16]
 8001b90:	1ad3      	subs	r3, r2, r3
 8001b92:	2b02      	cmp	r3, #2
 8001b94:	d901      	bls.n	8001b9a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001b96:	2303      	movs	r3, #3
 8001b98:	e187      	b.n	8001eaa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b9a:	4b1b      	ldr	r3, [pc, #108]	; (8001c08 <HAL_RCC_OscConfig+0x240>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f003 0302 	and.w	r3, r3, #2
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d1f0      	bne.n	8001b88 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f003 0308 	and.w	r3, r3, #8
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d036      	beq.n	8001c20 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	695b      	ldr	r3, [r3, #20]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d016      	beq.n	8001be8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001bba:	4b15      	ldr	r3, [pc, #84]	; (8001c10 <HAL_RCC_OscConfig+0x248>)
 8001bbc:	2201      	movs	r2, #1
 8001bbe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bc0:	f7fe ff26 	bl	8000a10 <HAL_GetTick>
 8001bc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bc6:	e008      	b.n	8001bda <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001bc8:	f7fe ff22 	bl	8000a10 <HAL_GetTick>
 8001bcc:	4602      	mov	r2, r0
 8001bce:	693b      	ldr	r3, [r7, #16]
 8001bd0:	1ad3      	subs	r3, r2, r3
 8001bd2:	2b02      	cmp	r3, #2
 8001bd4:	d901      	bls.n	8001bda <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001bd6:	2303      	movs	r3, #3
 8001bd8:	e167      	b.n	8001eaa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bda:	4b0b      	ldr	r3, [pc, #44]	; (8001c08 <HAL_RCC_OscConfig+0x240>)
 8001bdc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001bde:	f003 0302 	and.w	r3, r3, #2
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d0f0      	beq.n	8001bc8 <HAL_RCC_OscConfig+0x200>
 8001be6:	e01b      	b.n	8001c20 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001be8:	4b09      	ldr	r3, [pc, #36]	; (8001c10 <HAL_RCC_OscConfig+0x248>)
 8001bea:	2200      	movs	r2, #0
 8001bec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bee:	f7fe ff0f 	bl	8000a10 <HAL_GetTick>
 8001bf2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bf4:	e00e      	b.n	8001c14 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001bf6:	f7fe ff0b 	bl	8000a10 <HAL_GetTick>
 8001bfa:	4602      	mov	r2, r0
 8001bfc:	693b      	ldr	r3, [r7, #16]
 8001bfe:	1ad3      	subs	r3, r2, r3
 8001c00:	2b02      	cmp	r3, #2
 8001c02:	d907      	bls.n	8001c14 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001c04:	2303      	movs	r3, #3
 8001c06:	e150      	b.n	8001eaa <HAL_RCC_OscConfig+0x4e2>
 8001c08:	40023800 	.word	0x40023800
 8001c0c:	42470000 	.word	0x42470000
 8001c10:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c14:	4b88      	ldr	r3, [pc, #544]	; (8001e38 <HAL_RCC_OscConfig+0x470>)
 8001c16:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c18:	f003 0302 	and.w	r3, r3, #2
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d1ea      	bne.n	8001bf6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f003 0304 	and.w	r3, r3, #4
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	f000 8097 	beq.w	8001d5c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c32:	4b81      	ldr	r3, [pc, #516]	; (8001e38 <HAL_RCC_OscConfig+0x470>)
 8001c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d10f      	bne.n	8001c5e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c3e:	2300      	movs	r3, #0
 8001c40:	60bb      	str	r3, [r7, #8]
 8001c42:	4b7d      	ldr	r3, [pc, #500]	; (8001e38 <HAL_RCC_OscConfig+0x470>)
 8001c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c46:	4a7c      	ldr	r2, [pc, #496]	; (8001e38 <HAL_RCC_OscConfig+0x470>)
 8001c48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c4c:	6413      	str	r3, [r2, #64]	; 0x40
 8001c4e:	4b7a      	ldr	r3, [pc, #488]	; (8001e38 <HAL_RCC_OscConfig+0x470>)
 8001c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c56:	60bb      	str	r3, [r7, #8]
 8001c58:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c5e:	4b77      	ldr	r3, [pc, #476]	; (8001e3c <HAL_RCC_OscConfig+0x474>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d118      	bne.n	8001c9c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c6a:	4b74      	ldr	r3, [pc, #464]	; (8001e3c <HAL_RCC_OscConfig+0x474>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4a73      	ldr	r2, [pc, #460]	; (8001e3c <HAL_RCC_OscConfig+0x474>)
 8001c70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c74:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c76:	f7fe fecb 	bl	8000a10 <HAL_GetTick>
 8001c7a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c7c:	e008      	b.n	8001c90 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c7e:	f7fe fec7 	bl	8000a10 <HAL_GetTick>
 8001c82:	4602      	mov	r2, r0
 8001c84:	693b      	ldr	r3, [r7, #16]
 8001c86:	1ad3      	subs	r3, r2, r3
 8001c88:	2b02      	cmp	r3, #2
 8001c8a:	d901      	bls.n	8001c90 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001c8c:	2303      	movs	r3, #3
 8001c8e:	e10c      	b.n	8001eaa <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c90:	4b6a      	ldr	r3, [pc, #424]	; (8001e3c <HAL_RCC_OscConfig+0x474>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d0f0      	beq.n	8001c7e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	689b      	ldr	r3, [r3, #8]
 8001ca0:	2b01      	cmp	r3, #1
 8001ca2:	d106      	bne.n	8001cb2 <HAL_RCC_OscConfig+0x2ea>
 8001ca4:	4b64      	ldr	r3, [pc, #400]	; (8001e38 <HAL_RCC_OscConfig+0x470>)
 8001ca6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ca8:	4a63      	ldr	r2, [pc, #396]	; (8001e38 <HAL_RCC_OscConfig+0x470>)
 8001caa:	f043 0301 	orr.w	r3, r3, #1
 8001cae:	6713      	str	r3, [r2, #112]	; 0x70
 8001cb0:	e01c      	b.n	8001cec <HAL_RCC_OscConfig+0x324>
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	689b      	ldr	r3, [r3, #8]
 8001cb6:	2b05      	cmp	r3, #5
 8001cb8:	d10c      	bne.n	8001cd4 <HAL_RCC_OscConfig+0x30c>
 8001cba:	4b5f      	ldr	r3, [pc, #380]	; (8001e38 <HAL_RCC_OscConfig+0x470>)
 8001cbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cbe:	4a5e      	ldr	r2, [pc, #376]	; (8001e38 <HAL_RCC_OscConfig+0x470>)
 8001cc0:	f043 0304 	orr.w	r3, r3, #4
 8001cc4:	6713      	str	r3, [r2, #112]	; 0x70
 8001cc6:	4b5c      	ldr	r3, [pc, #368]	; (8001e38 <HAL_RCC_OscConfig+0x470>)
 8001cc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cca:	4a5b      	ldr	r2, [pc, #364]	; (8001e38 <HAL_RCC_OscConfig+0x470>)
 8001ccc:	f043 0301 	orr.w	r3, r3, #1
 8001cd0:	6713      	str	r3, [r2, #112]	; 0x70
 8001cd2:	e00b      	b.n	8001cec <HAL_RCC_OscConfig+0x324>
 8001cd4:	4b58      	ldr	r3, [pc, #352]	; (8001e38 <HAL_RCC_OscConfig+0x470>)
 8001cd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cd8:	4a57      	ldr	r2, [pc, #348]	; (8001e38 <HAL_RCC_OscConfig+0x470>)
 8001cda:	f023 0301 	bic.w	r3, r3, #1
 8001cde:	6713      	str	r3, [r2, #112]	; 0x70
 8001ce0:	4b55      	ldr	r3, [pc, #340]	; (8001e38 <HAL_RCC_OscConfig+0x470>)
 8001ce2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ce4:	4a54      	ldr	r2, [pc, #336]	; (8001e38 <HAL_RCC_OscConfig+0x470>)
 8001ce6:	f023 0304 	bic.w	r3, r3, #4
 8001cea:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	689b      	ldr	r3, [r3, #8]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d015      	beq.n	8001d20 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cf4:	f7fe fe8c 	bl	8000a10 <HAL_GetTick>
 8001cf8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cfa:	e00a      	b.n	8001d12 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001cfc:	f7fe fe88 	bl	8000a10 <HAL_GetTick>
 8001d00:	4602      	mov	r2, r0
 8001d02:	693b      	ldr	r3, [r7, #16]
 8001d04:	1ad3      	subs	r3, r2, r3
 8001d06:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d901      	bls.n	8001d12 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001d0e:	2303      	movs	r3, #3
 8001d10:	e0cb      	b.n	8001eaa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d12:	4b49      	ldr	r3, [pc, #292]	; (8001e38 <HAL_RCC_OscConfig+0x470>)
 8001d14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d16:	f003 0302 	and.w	r3, r3, #2
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d0ee      	beq.n	8001cfc <HAL_RCC_OscConfig+0x334>
 8001d1e:	e014      	b.n	8001d4a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d20:	f7fe fe76 	bl	8000a10 <HAL_GetTick>
 8001d24:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d26:	e00a      	b.n	8001d3e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d28:	f7fe fe72 	bl	8000a10 <HAL_GetTick>
 8001d2c:	4602      	mov	r2, r0
 8001d2e:	693b      	ldr	r3, [r7, #16]
 8001d30:	1ad3      	subs	r3, r2, r3
 8001d32:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d901      	bls.n	8001d3e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001d3a:	2303      	movs	r3, #3
 8001d3c:	e0b5      	b.n	8001eaa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d3e:	4b3e      	ldr	r3, [pc, #248]	; (8001e38 <HAL_RCC_OscConfig+0x470>)
 8001d40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d42:	f003 0302 	and.w	r3, r3, #2
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d1ee      	bne.n	8001d28 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001d4a:	7dfb      	ldrb	r3, [r7, #23]
 8001d4c:	2b01      	cmp	r3, #1
 8001d4e:	d105      	bne.n	8001d5c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d50:	4b39      	ldr	r3, [pc, #228]	; (8001e38 <HAL_RCC_OscConfig+0x470>)
 8001d52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d54:	4a38      	ldr	r2, [pc, #224]	; (8001e38 <HAL_RCC_OscConfig+0x470>)
 8001d56:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d5a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	699b      	ldr	r3, [r3, #24]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	f000 80a1 	beq.w	8001ea8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001d66:	4b34      	ldr	r3, [pc, #208]	; (8001e38 <HAL_RCC_OscConfig+0x470>)
 8001d68:	689b      	ldr	r3, [r3, #8]
 8001d6a:	f003 030c 	and.w	r3, r3, #12
 8001d6e:	2b08      	cmp	r3, #8
 8001d70:	d05c      	beq.n	8001e2c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	699b      	ldr	r3, [r3, #24]
 8001d76:	2b02      	cmp	r3, #2
 8001d78:	d141      	bne.n	8001dfe <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d7a:	4b31      	ldr	r3, [pc, #196]	; (8001e40 <HAL_RCC_OscConfig+0x478>)
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d80:	f7fe fe46 	bl	8000a10 <HAL_GetTick>
 8001d84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d86:	e008      	b.n	8001d9a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d88:	f7fe fe42 	bl	8000a10 <HAL_GetTick>
 8001d8c:	4602      	mov	r2, r0
 8001d8e:	693b      	ldr	r3, [r7, #16]
 8001d90:	1ad3      	subs	r3, r2, r3
 8001d92:	2b02      	cmp	r3, #2
 8001d94:	d901      	bls.n	8001d9a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001d96:	2303      	movs	r3, #3
 8001d98:	e087      	b.n	8001eaa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d9a:	4b27      	ldr	r3, [pc, #156]	; (8001e38 <HAL_RCC_OscConfig+0x470>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d1f0      	bne.n	8001d88 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	69da      	ldr	r2, [r3, #28]
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6a1b      	ldr	r3, [r3, #32]
 8001dae:	431a      	orrs	r2, r3
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001db4:	019b      	lsls	r3, r3, #6
 8001db6:	431a      	orrs	r2, r3
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dbc:	085b      	lsrs	r3, r3, #1
 8001dbe:	3b01      	subs	r3, #1
 8001dc0:	041b      	lsls	r3, r3, #16
 8001dc2:	431a      	orrs	r2, r3
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dc8:	061b      	lsls	r3, r3, #24
 8001dca:	491b      	ldr	r1, [pc, #108]	; (8001e38 <HAL_RCC_OscConfig+0x470>)
 8001dcc:	4313      	orrs	r3, r2
 8001dce:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001dd0:	4b1b      	ldr	r3, [pc, #108]	; (8001e40 <HAL_RCC_OscConfig+0x478>)
 8001dd2:	2201      	movs	r2, #1
 8001dd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dd6:	f7fe fe1b 	bl	8000a10 <HAL_GetTick>
 8001dda:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ddc:	e008      	b.n	8001df0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001dde:	f7fe fe17 	bl	8000a10 <HAL_GetTick>
 8001de2:	4602      	mov	r2, r0
 8001de4:	693b      	ldr	r3, [r7, #16]
 8001de6:	1ad3      	subs	r3, r2, r3
 8001de8:	2b02      	cmp	r3, #2
 8001dea:	d901      	bls.n	8001df0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001dec:	2303      	movs	r3, #3
 8001dee:	e05c      	b.n	8001eaa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001df0:	4b11      	ldr	r3, [pc, #68]	; (8001e38 <HAL_RCC_OscConfig+0x470>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d0f0      	beq.n	8001dde <HAL_RCC_OscConfig+0x416>
 8001dfc:	e054      	b.n	8001ea8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dfe:	4b10      	ldr	r3, [pc, #64]	; (8001e40 <HAL_RCC_OscConfig+0x478>)
 8001e00:	2200      	movs	r2, #0
 8001e02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e04:	f7fe fe04 	bl	8000a10 <HAL_GetTick>
 8001e08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e0a:	e008      	b.n	8001e1e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e0c:	f7fe fe00 	bl	8000a10 <HAL_GetTick>
 8001e10:	4602      	mov	r2, r0
 8001e12:	693b      	ldr	r3, [r7, #16]
 8001e14:	1ad3      	subs	r3, r2, r3
 8001e16:	2b02      	cmp	r3, #2
 8001e18:	d901      	bls.n	8001e1e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001e1a:	2303      	movs	r3, #3
 8001e1c:	e045      	b.n	8001eaa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e1e:	4b06      	ldr	r3, [pc, #24]	; (8001e38 <HAL_RCC_OscConfig+0x470>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d1f0      	bne.n	8001e0c <HAL_RCC_OscConfig+0x444>
 8001e2a:	e03d      	b.n	8001ea8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	699b      	ldr	r3, [r3, #24]
 8001e30:	2b01      	cmp	r3, #1
 8001e32:	d107      	bne.n	8001e44 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001e34:	2301      	movs	r3, #1
 8001e36:	e038      	b.n	8001eaa <HAL_RCC_OscConfig+0x4e2>
 8001e38:	40023800 	.word	0x40023800
 8001e3c:	40007000 	.word	0x40007000
 8001e40:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001e44:	4b1b      	ldr	r3, [pc, #108]	; (8001eb4 <HAL_RCC_OscConfig+0x4ec>)
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	699b      	ldr	r3, [r3, #24]
 8001e4e:	2b01      	cmp	r3, #1
 8001e50:	d028      	beq.n	8001ea4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e5c:	429a      	cmp	r2, r3
 8001e5e:	d121      	bne.n	8001ea4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e6a:	429a      	cmp	r2, r3
 8001e6c:	d11a      	bne.n	8001ea4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001e6e:	68fa      	ldr	r2, [r7, #12]
 8001e70:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001e74:	4013      	ands	r3, r2
 8001e76:	687a      	ldr	r2, [r7, #4]
 8001e78:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001e7a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001e7c:	4293      	cmp	r3, r2
 8001e7e:	d111      	bne.n	8001ea4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e8a:	085b      	lsrs	r3, r3, #1
 8001e8c:	3b01      	subs	r3, #1
 8001e8e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001e90:	429a      	cmp	r2, r3
 8001e92:	d107      	bne.n	8001ea4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e9e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001ea0:	429a      	cmp	r2, r3
 8001ea2:	d001      	beq.n	8001ea8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001ea4:	2301      	movs	r3, #1
 8001ea6:	e000      	b.n	8001eaa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001ea8:	2300      	movs	r3, #0
}
 8001eaa:	4618      	mov	r0, r3
 8001eac:	3718      	adds	r7, #24
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd80      	pop	{r7, pc}
 8001eb2:	bf00      	nop
 8001eb4:	40023800 	.word	0x40023800

08001eb8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b084      	sub	sp, #16
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
 8001ec0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d101      	bne.n	8001ecc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ec8:	2301      	movs	r3, #1
 8001eca:	e0cc      	b.n	8002066 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ecc:	4b68      	ldr	r3, [pc, #416]	; (8002070 <HAL_RCC_ClockConfig+0x1b8>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f003 0307 	and.w	r3, r3, #7
 8001ed4:	683a      	ldr	r2, [r7, #0]
 8001ed6:	429a      	cmp	r2, r3
 8001ed8:	d90c      	bls.n	8001ef4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001eda:	4b65      	ldr	r3, [pc, #404]	; (8002070 <HAL_RCC_ClockConfig+0x1b8>)
 8001edc:	683a      	ldr	r2, [r7, #0]
 8001ede:	b2d2      	uxtb	r2, r2
 8001ee0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ee2:	4b63      	ldr	r3, [pc, #396]	; (8002070 <HAL_RCC_ClockConfig+0x1b8>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f003 0307 	and.w	r3, r3, #7
 8001eea:	683a      	ldr	r2, [r7, #0]
 8001eec:	429a      	cmp	r2, r3
 8001eee:	d001      	beq.n	8001ef4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	e0b8      	b.n	8002066 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f003 0302 	and.w	r3, r3, #2
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d020      	beq.n	8001f42 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f003 0304 	and.w	r3, r3, #4
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d005      	beq.n	8001f18 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f0c:	4b59      	ldr	r3, [pc, #356]	; (8002074 <HAL_RCC_ClockConfig+0x1bc>)
 8001f0e:	689b      	ldr	r3, [r3, #8]
 8001f10:	4a58      	ldr	r2, [pc, #352]	; (8002074 <HAL_RCC_ClockConfig+0x1bc>)
 8001f12:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001f16:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f003 0308 	and.w	r3, r3, #8
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d005      	beq.n	8001f30 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f24:	4b53      	ldr	r3, [pc, #332]	; (8002074 <HAL_RCC_ClockConfig+0x1bc>)
 8001f26:	689b      	ldr	r3, [r3, #8]
 8001f28:	4a52      	ldr	r2, [pc, #328]	; (8002074 <HAL_RCC_ClockConfig+0x1bc>)
 8001f2a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001f2e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f30:	4b50      	ldr	r3, [pc, #320]	; (8002074 <HAL_RCC_ClockConfig+0x1bc>)
 8001f32:	689b      	ldr	r3, [r3, #8]
 8001f34:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	689b      	ldr	r3, [r3, #8]
 8001f3c:	494d      	ldr	r1, [pc, #308]	; (8002074 <HAL_RCC_ClockConfig+0x1bc>)
 8001f3e:	4313      	orrs	r3, r2
 8001f40:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f003 0301 	and.w	r3, r3, #1
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d044      	beq.n	8001fd8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	2b01      	cmp	r3, #1
 8001f54:	d107      	bne.n	8001f66 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f56:	4b47      	ldr	r3, [pc, #284]	; (8002074 <HAL_RCC_ClockConfig+0x1bc>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d119      	bne.n	8001f96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f62:	2301      	movs	r3, #1
 8001f64:	e07f      	b.n	8002066 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	2b02      	cmp	r3, #2
 8001f6c:	d003      	beq.n	8001f76 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001f72:	2b03      	cmp	r3, #3
 8001f74:	d107      	bne.n	8001f86 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f76:	4b3f      	ldr	r3, [pc, #252]	; (8002074 <HAL_RCC_ClockConfig+0x1bc>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d109      	bne.n	8001f96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f82:	2301      	movs	r3, #1
 8001f84:	e06f      	b.n	8002066 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f86:	4b3b      	ldr	r3, [pc, #236]	; (8002074 <HAL_RCC_ClockConfig+0x1bc>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f003 0302 	and.w	r3, r3, #2
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d101      	bne.n	8001f96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f92:	2301      	movs	r3, #1
 8001f94:	e067      	b.n	8002066 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f96:	4b37      	ldr	r3, [pc, #220]	; (8002074 <HAL_RCC_ClockConfig+0x1bc>)
 8001f98:	689b      	ldr	r3, [r3, #8]
 8001f9a:	f023 0203 	bic.w	r2, r3, #3
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	4934      	ldr	r1, [pc, #208]	; (8002074 <HAL_RCC_ClockConfig+0x1bc>)
 8001fa4:	4313      	orrs	r3, r2
 8001fa6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001fa8:	f7fe fd32 	bl	8000a10 <HAL_GetTick>
 8001fac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fae:	e00a      	b.n	8001fc6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fb0:	f7fe fd2e 	bl	8000a10 <HAL_GetTick>
 8001fb4:	4602      	mov	r2, r0
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	1ad3      	subs	r3, r2, r3
 8001fba:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d901      	bls.n	8001fc6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001fc2:	2303      	movs	r3, #3
 8001fc4:	e04f      	b.n	8002066 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fc6:	4b2b      	ldr	r3, [pc, #172]	; (8002074 <HAL_RCC_ClockConfig+0x1bc>)
 8001fc8:	689b      	ldr	r3, [r3, #8]
 8001fca:	f003 020c 	and.w	r2, r3, #12
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	685b      	ldr	r3, [r3, #4]
 8001fd2:	009b      	lsls	r3, r3, #2
 8001fd4:	429a      	cmp	r2, r3
 8001fd6:	d1eb      	bne.n	8001fb0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001fd8:	4b25      	ldr	r3, [pc, #148]	; (8002070 <HAL_RCC_ClockConfig+0x1b8>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f003 0307 	and.w	r3, r3, #7
 8001fe0:	683a      	ldr	r2, [r7, #0]
 8001fe2:	429a      	cmp	r2, r3
 8001fe4:	d20c      	bcs.n	8002000 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fe6:	4b22      	ldr	r3, [pc, #136]	; (8002070 <HAL_RCC_ClockConfig+0x1b8>)
 8001fe8:	683a      	ldr	r2, [r7, #0]
 8001fea:	b2d2      	uxtb	r2, r2
 8001fec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fee:	4b20      	ldr	r3, [pc, #128]	; (8002070 <HAL_RCC_ClockConfig+0x1b8>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f003 0307 	and.w	r3, r3, #7
 8001ff6:	683a      	ldr	r2, [r7, #0]
 8001ff8:	429a      	cmp	r2, r3
 8001ffa:	d001      	beq.n	8002000 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	e032      	b.n	8002066 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f003 0304 	and.w	r3, r3, #4
 8002008:	2b00      	cmp	r3, #0
 800200a:	d008      	beq.n	800201e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800200c:	4b19      	ldr	r3, [pc, #100]	; (8002074 <HAL_RCC_ClockConfig+0x1bc>)
 800200e:	689b      	ldr	r3, [r3, #8]
 8002010:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	68db      	ldr	r3, [r3, #12]
 8002018:	4916      	ldr	r1, [pc, #88]	; (8002074 <HAL_RCC_ClockConfig+0x1bc>)
 800201a:	4313      	orrs	r3, r2
 800201c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f003 0308 	and.w	r3, r3, #8
 8002026:	2b00      	cmp	r3, #0
 8002028:	d009      	beq.n	800203e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800202a:	4b12      	ldr	r3, [pc, #72]	; (8002074 <HAL_RCC_ClockConfig+0x1bc>)
 800202c:	689b      	ldr	r3, [r3, #8]
 800202e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	691b      	ldr	r3, [r3, #16]
 8002036:	00db      	lsls	r3, r3, #3
 8002038:	490e      	ldr	r1, [pc, #56]	; (8002074 <HAL_RCC_ClockConfig+0x1bc>)
 800203a:	4313      	orrs	r3, r2
 800203c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800203e:	f000 f821 	bl	8002084 <HAL_RCC_GetSysClockFreq>
 8002042:	4602      	mov	r2, r0
 8002044:	4b0b      	ldr	r3, [pc, #44]	; (8002074 <HAL_RCC_ClockConfig+0x1bc>)
 8002046:	689b      	ldr	r3, [r3, #8]
 8002048:	091b      	lsrs	r3, r3, #4
 800204a:	f003 030f 	and.w	r3, r3, #15
 800204e:	490a      	ldr	r1, [pc, #40]	; (8002078 <HAL_RCC_ClockConfig+0x1c0>)
 8002050:	5ccb      	ldrb	r3, [r1, r3]
 8002052:	fa22 f303 	lsr.w	r3, r2, r3
 8002056:	4a09      	ldr	r2, [pc, #36]	; (800207c <HAL_RCC_ClockConfig+0x1c4>)
 8002058:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800205a:	4b09      	ldr	r3, [pc, #36]	; (8002080 <HAL_RCC_ClockConfig+0x1c8>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	4618      	mov	r0, r3
 8002060:	f7fe fc92 	bl	8000988 <HAL_InitTick>

  return HAL_OK;
 8002064:	2300      	movs	r3, #0
}
 8002066:	4618      	mov	r0, r3
 8002068:	3710      	adds	r7, #16
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}
 800206e:	bf00      	nop
 8002070:	40023c00 	.word	0x40023c00
 8002074:	40023800 	.word	0x40023800
 8002078:	08002300 	.word	0x08002300
 800207c:	20000000 	.word	0x20000000
 8002080:	20000004 	.word	0x20000004

08002084 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002084:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002088:	b094      	sub	sp, #80	; 0x50
 800208a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800208c:	2300      	movs	r3, #0
 800208e:	647b      	str	r3, [r7, #68]	; 0x44
 8002090:	2300      	movs	r3, #0
 8002092:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002094:	2300      	movs	r3, #0
 8002096:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002098:	2300      	movs	r3, #0
 800209a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800209c:	4b79      	ldr	r3, [pc, #484]	; (8002284 <HAL_RCC_GetSysClockFreq+0x200>)
 800209e:	689b      	ldr	r3, [r3, #8]
 80020a0:	f003 030c 	and.w	r3, r3, #12
 80020a4:	2b08      	cmp	r3, #8
 80020a6:	d00d      	beq.n	80020c4 <HAL_RCC_GetSysClockFreq+0x40>
 80020a8:	2b08      	cmp	r3, #8
 80020aa:	f200 80e1 	bhi.w	8002270 <HAL_RCC_GetSysClockFreq+0x1ec>
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d002      	beq.n	80020b8 <HAL_RCC_GetSysClockFreq+0x34>
 80020b2:	2b04      	cmp	r3, #4
 80020b4:	d003      	beq.n	80020be <HAL_RCC_GetSysClockFreq+0x3a>
 80020b6:	e0db      	b.n	8002270 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80020b8:	4b73      	ldr	r3, [pc, #460]	; (8002288 <HAL_RCC_GetSysClockFreq+0x204>)
 80020ba:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80020bc:	e0db      	b.n	8002276 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80020be:	4b73      	ldr	r3, [pc, #460]	; (800228c <HAL_RCC_GetSysClockFreq+0x208>)
 80020c0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80020c2:	e0d8      	b.n	8002276 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80020c4:	4b6f      	ldr	r3, [pc, #444]	; (8002284 <HAL_RCC_GetSysClockFreq+0x200>)
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80020cc:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80020ce:	4b6d      	ldr	r3, [pc, #436]	; (8002284 <HAL_RCC_GetSysClockFreq+0x200>)
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d063      	beq.n	80021a2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80020da:	4b6a      	ldr	r3, [pc, #424]	; (8002284 <HAL_RCC_GetSysClockFreq+0x200>)
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	099b      	lsrs	r3, r3, #6
 80020e0:	2200      	movs	r2, #0
 80020e2:	63bb      	str	r3, [r7, #56]	; 0x38
 80020e4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80020e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80020ec:	633b      	str	r3, [r7, #48]	; 0x30
 80020ee:	2300      	movs	r3, #0
 80020f0:	637b      	str	r3, [r7, #52]	; 0x34
 80020f2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80020f6:	4622      	mov	r2, r4
 80020f8:	462b      	mov	r3, r5
 80020fa:	f04f 0000 	mov.w	r0, #0
 80020fe:	f04f 0100 	mov.w	r1, #0
 8002102:	0159      	lsls	r1, r3, #5
 8002104:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002108:	0150      	lsls	r0, r2, #5
 800210a:	4602      	mov	r2, r0
 800210c:	460b      	mov	r3, r1
 800210e:	4621      	mov	r1, r4
 8002110:	1a51      	subs	r1, r2, r1
 8002112:	6139      	str	r1, [r7, #16]
 8002114:	4629      	mov	r1, r5
 8002116:	eb63 0301 	sbc.w	r3, r3, r1
 800211a:	617b      	str	r3, [r7, #20]
 800211c:	f04f 0200 	mov.w	r2, #0
 8002120:	f04f 0300 	mov.w	r3, #0
 8002124:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002128:	4659      	mov	r1, fp
 800212a:	018b      	lsls	r3, r1, #6
 800212c:	4651      	mov	r1, sl
 800212e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002132:	4651      	mov	r1, sl
 8002134:	018a      	lsls	r2, r1, #6
 8002136:	4651      	mov	r1, sl
 8002138:	ebb2 0801 	subs.w	r8, r2, r1
 800213c:	4659      	mov	r1, fp
 800213e:	eb63 0901 	sbc.w	r9, r3, r1
 8002142:	f04f 0200 	mov.w	r2, #0
 8002146:	f04f 0300 	mov.w	r3, #0
 800214a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800214e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002152:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002156:	4690      	mov	r8, r2
 8002158:	4699      	mov	r9, r3
 800215a:	4623      	mov	r3, r4
 800215c:	eb18 0303 	adds.w	r3, r8, r3
 8002160:	60bb      	str	r3, [r7, #8]
 8002162:	462b      	mov	r3, r5
 8002164:	eb49 0303 	adc.w	r3, r9, r3
 8002168:	60fb      	str	r3, [r7, #12]
 800216a:	f04f 0200 	mov.w	r2, #0
 800216e:	f04f 0300 	mov.w	r3, #0
 8002172:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002176:	4629      	mov	r1, r5
 8002178:	024b      	lsls	r3, r1, #9
 800217a:	4621      	mov	r1, r4
 800217c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002180:	4621      	mov	r1, r4
 8002182:	024a      	lsls	r2, r1, #9
 8002184:	4610      	mov	r0, r2
 8002186:	4619      	mov	r1, r3
 8002188:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800218a:	2200      	movs	r2, #0
 800218c:	62bb      	str	r3, [r7, #40]	; 0x28
 800218e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002190:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002194:	f7fe f820 	bl	80001d8 <__aeabi_uldivmod>
 8002198:	4602      	mov	r2, r0
 800219a:	460b      	mov	r3, r1
 800219c:	4613      	mov	r3, r2
 800219e:	64fb      	str	r3, [r7, #76]	; 0x4c
 80021a0:	e058      	b.n	8002254 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80021a2:	4b38      	ldr	r3, [pc, #224]	; (8002284 <HAL_RCC_GetSysClockFreq+0x200>)
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	099b      	lsrs	r3, r3, #6
 80021a8:	2200      	movs	r2, #0
 80021aa:	4618      	mov	r0, r3
 80021ac:	4611      	mov	r1, r2
 80021ae:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80021b2:	623b      	str	r3, [r7, #32]
 80021b4:	2300      	movs	r3, #0
 80021b6:	627b      	str	r3, [r7, #36]	; 0x24
 80021b8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80021bc:	4642      	mov	r2, r8
 80021be:	464b      	mov	r3, r9
 80021c0:	f04f 0000 	mov.w	r0, #0
 80021c4:	f04f 0100 	mov.w	r1, #0
 80021c8:	0159      	lsls	r1, r3, #5
 80021ca:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80021ce:	0150      	lsls	r0, r2, #5
 80021d0:	4602      	mov	r2, r0
 80021d2:	460b      	mov	r3, r1
 80021d4:	4641      	mov	r1, r8
 80021d6:	ebb2 0a01 	subs.w	sl, r2, r1
 80021da:	4649      	mov	r1, r9
 80021dc:	eb63 0b01 	sbc.w	fp, r3, r1
 80021e0:	f04f 0200 	mov.w	r2, #0
 80021e4:	f04f 0300 	mov.w	r3, #0
 80021e8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80021ec:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80021f0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80021f4:	ebb2 040a 	subs.w	r4, r2, sl
 80021f8:	eb63 050b 	sbc.w	r5, r3, fp
 80021fc:	f04f 0200 	mov.w	r2, #0
 8002200:	f04f 0300 	mov.w	r3, #0
 8002204:	00eb      	lsls	r3, r5, #3
 8002206:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800220a:	00e2      	lsls	r2, r4, #3
 800220c:	4614      	mov	r4, r2
 800220e:	461d      	mov	r5, r3
 8002210:	4643      	mov	r3, r8
 8002212:	18e3      	adds	r3, r4, r3
 8002214:	603b      	str	r3, [r7, #0]
 8002216:	464b      	mov	r3, r9
 8002218:	eb45 0303 	adc.w	r3, r5, r3
 800221c:	607b      	str	r3, [r7, #4]
 800221e:	f04f 0200 	mov.w	r2, #0
 8002222:	f04f 0300 	mov.w	r3, #0
 8002226:	e9d7 4500 	ldrd	r4, r5, [r7]
 800222a:	4629      	mov	r1, r5
 800222c:	028b      	lsls	r3, r1, #10
 800222e:	4621      	mov	r1, r4
 8002230:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002234:	4621      	mov	r1, r4
 8002236:	028a      	lsls	r2, r1, #10
 8002238:	4610      	mov	r0, r2
 800223a:	4619      	mov	r1, r3
 800223c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800223e:	2200      	movs	r2, #0
 8002240:	61bb      	str	r3, [r7, #24]
 8002242:	61fa      	str	r2, [r7, #28]
 8002244:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002248:	f7fd ffc6 	bl	80001d8 <__aeabi_uldivmod>
 800224c:	4602      	mov	r2, r0
 800224e:	460b      	mov	r3, r1
 8002250:	4613      	mov	r3, r2
 8002252:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002254:	4b0b      	ldr	r3, [pc, #44]	; (8002284 <HAL_RCC_GetSysClockFreq+0x200>)
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	0c1b      	lsrs	r3, r3, #16
 800225a:	f003 0303 	and.w	r3, r3, #3
 800225e:	3301      	adds	r3, #1
 8002260:	005b      	lsls	r3, r3, #1
 8002262:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002264:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002266:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002268:	fbb2 f3f3 	udiv	r3, r2, r3
 800226c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800226e:	e002      	b.n	8002276 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002270:	4b05      	ldr	r3, [pc, #20]	; (8002288 <HAL_RCC_GetSysClockFreq+0x204>)
 8002272:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002274:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002276:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002278:	4618      	mov	r0, r3
 800227a:	3750      	adds	r7, #80	; 0x50
 800227c:	46bd      	mov	sp, r7
 800227e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002282:	bf00      	nop
 8002284:	40023800 	.word	0x40023800
 8002288:	00f42400 	.word	0x00f42400
 800228c:	007a1200 	.word	0x007a1200

08002290 <__libc_init_array>:
 8002290:	b570      	push	{r4, r5, r6, lr}
 8002292:	4d0d      	ldr	r5, [pc, #52]	; (80022c8 <__libc_init_array+0x38>)
 8002294:	4c0d      	ldr	r4, [pc, #52]	; (80022cc <__libc_init_array+0x3c>)
 8002296:	1b64      	subs	r4, r4, r5
 8002298:	10a4      	asrs	r4, r4, #2
 800229a:	2600      	movs	r6, #0
 800229c:	42a6      	cmp	r6, r4
 800229e:	d109      	bne.n	80022b4 <__libc_init_array+0x24>
 80022a0:	4d0b      	ldr	r5, [pc, #44]	; (80022d0 <__libc_init_array+0x40>)
 80022a2:	4c0c      	ldr	r4, [pc, #48]	; (80022d4 <__libc_init_array+0x44>)
 80022a4:	f000 f820 	bl	80022e8 <_init>
 80022a8:	1b64      	subs	r4, r4, r5
 80022aa:	10a4      	asrs	r4, r4, #2
 80022ac:	2600      	movs	r6, #0
 80022ae:	42a6      	cmp	r6, r4
 80022b0:	d105      	bne.n	80022be <__libc_init_array+0x2e>
 80022b2:	bd70      	pop	{r4, r5, r6, pc}
 80022b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80022b8:	4798      	blx	r3
 80022ba:	3601      	adds	r6, #1
 80022bc:	e7ee      	b.n	800229c <__libc_init_array+0xc>
 80022be:	f855 3b04 	ldr.w	r3, [r5], #4
 80022c2:	4798      	blx	r3
 80022c4:	3601      	adds	r6, #1
 80022c6:	e7f2      	b.n	80022ae <__libc_init_array+0x1e>
 80022c8:	08002318 	.word	0x08002318
 80022cc:	08002318 	.word	0x08002318
 80022d0:	08002318 	.word	0x08002318
 80022d4:	0800231c 	.word	0x0800231c

080022d8 <memset>:
 80022d8:	4402      	add	r2, r0
 80022da:	4603      	mov	r3, r0
 80022dc:	4293      	cmp	r3, r2
 80022de:	d100      	bne.n	80022e2 <memset+0xa>
 80022e0:	4770      	bx	lr
 80022e2:	f803 1b01 	strb.w	r1, [r3], #1
 80022e6:	e7f9      	b.n	80022dc <memset+0x4>

080022e8 <_init>:
 80022e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022ea:	bf00      	nop
 80022ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80022ee:	bc08      	pop	{r3}
 80022f0:	469e      	mov	lr, r3
 80022f2:	4770      	bx	lr

080022f4 <_fini>:
 80022f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022f6:	bf00      	nop
 80022f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80022fa:	bc08      	pop	{r3}
 80022fc:	469e      	mov	lr, r3
 80022fe:	4770      	bx	lr
